{
  "api/Unosquare.Swan.AspNetCore.TokenProviderOptions.html": {
    "href": "api/Unosquare.Swan.AspNetCore.TokenProviderOptions.html",
    "title": "Class TokenProviderOptions | Unosquare SWAN",
    "keywords": "Class TokenProviderOptions Provides options for TokenProviderMiddleware . Inheritance System.Object TokenProviderOptions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.AspNetCore Assembly : cs.temp.dll.dll Syntax public class TokenProviderOptions Properties Audience The Audience (aud) claim for the generated tokens. Declaration public string Audience { get; set; } Property Value Type Description System.String BearerTokenResolver Resolves a bearer token response Declaration public Func<ClaimsIdentity, Dictionary<string, object>, Task<Dictionary<string, object>>> BearerTokenResolver { get; set; } Property Value Type Description System.Func < System.Security.Claims.ClaimsIdentity , System.Collections.Generic.Dictionary < System.String , System.Object >, System.Threading.Tasks.Task < System.Collections.Generic.Dictionary < System.String , System.Object >>> ClaimResolver Resolves the claims from a user. Declaration public Func<ClaimsIdentity, Task<Claim[]>> ClaimResolver { get; set; } Property Value Type Description System.Func < System.Security.Claims.ClaimsIdentity , System.Threading.Tasks.Task < System.Security.Claims.Claim []>> Expiration The expiration time for the generated tokens. Declaration public TimeSpan Expiration { get; set; } Property Value Type Description System.TimeSpan Remarks The default is five minutes (300 seconds). ForceHttps Gets or sets a value indicating whether [force HTTPS]. Declaration public bool ForceHttps { get; set; } Property Value Type Description System.Boolean IdentityResolver Resolves a user identity given a username and password. Declaration public Func<string, string, string, string, Task<ClaimsIdentity>> IdentityResolver { get; set; } Property Value Type Description System.Func < System.String , System.String , System.String , System.String , System.Threading.Tasks.Task < System.Security.Claims.ClaimsIdentity >> Issuer The Issuer (iss) claim for generated tokens. Declaration public string Issuer { get; set; } Property Value Type Description System.String NonceGenerator Generates a random value (nonce) for each generated token. Declaration public Func<Task<string>> NonceGenerator { get; set; } Property Value Type Description System.Func < System.Threading.Tasks.Task < System.String >> Remarks The default nonce is a random GUID. Path The relative request path to listen on. Declaration public string Path { get; set; } Property Value Type Description System.String Remarks The default path is /api/token . SigningCredentials The signing key to use when generating tokens. Declaration public SigningCredentials SigningCredentials { get; set; } Property Value Type Description SigningCredentials"
  },
  "api/Unosquare.Swan.AspNetCore.html": {
    "href": "api/Unosquare.Swan.AspNetCore.html",
    "title": "Namespace Unosquare.Swan.AspNetCore | Unosquare SWAN",
    "keywords": "Namespace Unosquare.Swan.AspNetCore Classes AuditTrailController<T, TEntity> Represents an AuditTrail controller to use with BusinessDbContext BasicRoleStore Represents a basic RoleStore for AspNetCore Identity BasicUserStore Represents a basic UserStore for AspNetCore Identity BusinessDbContext Represents a abstract class to create DbContext using Business Rules BusinessRuleAttribute Decorate methods with this attribute to execute business rules that match the following signature: public void MethodName(T entity) BusinessRulesController<T> Extensions Extensions methods to implement SWAN providers TokenProviderMiddleware Token generator middleware component which is added to an HTTP pipeline. TokenProviderOptions Provides options for TokenProviderMiddleware . Interfaces IBusinessDbContext Creates a new DbContext with support to run BusinessControllers IBusinessRulesController Represents a Business Rules Controller Enums ActionFlags defines a combination of actions in a CRUD pattern"
  },
  "api/Unosquare.Swan.Components.CircularBuffer.html": {
    "href": "api/Unosquare.Swan.Components.CircularBuffer.html",
    "title": "Class CircularBuffer | Unosquare SWAN",
    "keywords": "Class CircularBuffer A fixed-size buffer that acts as an infinite length one. This buffer is backed by unmanaged, very fast memory so ensure you call the dispose method when you are done using it. Only for Windows. Inheritance System.Object CircularBuffer Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Components Assembly : cs.temp.dll.dll Syntax public sealed class CircularBuffer : IDisposable Constructors CircularBuffer(Int32) Initializes a new instance of the CircularBuffer class. Declaration public CircularBuffer(int bufferLength) Parameters Type Name Description System.Int32 bufferLength Length of the buffer. Properties CapacityPercent Gets percentage of used bytes (readbale/available, from 0.0 to 1.0). Declaration public double CapacityPercent { get; } Property Value Type Description System.Double Length Gets the capacity of this buffer. Declaration public int Length { get; } Property Value Type Description System.Int32 ReadableCount Gets the available bytes to read. Declaration public int ReadableCount { get; } Property Value Type Description System.Int32 ReadIndex Gets the current, 0-based read index Declaration public int ReadIndex { get; } Property Value Type Description System.Int32 WritableCount Gets the number of bytes that can be written. Declaration public int WritableCount { get; } Property Value Type Description System.Int32 WriteIndex Gets the current, 0-based write index. Declaration public int WriteIndex { get; } Property Value Type Description System.Int32 WriteTag Gets an the object associated with the last write Declaration public TimeSpan WriteTag { get; } Property Value Type Description System.TimeSpan Methods Clear() Resets all states as if this buffer had just been created. Declaration public void Clear() CopyMemory(IntPtr, IntPtr, UInt32) Fast pointer memory block copy function Declaration public static void CopyMemory(IntPtr destination, IntPtr source, uint length) Parameters Type Name Description System.IntPtr destination The destination. System.IntPtr source The source. System.UInt32 length The length. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Implements System.IDisposable.Dispose() Read(Int32, Byte[], Int32) Reads the specified number of bytes into the target array. Declaration public void Read(int requestedBytes, byte[] target, int targetOffset) Parameters Type Name Description System.Int32 requestedBytes The requested bytes. System.Byte [] target The target. System.Int32 targetOffset The target offset. Exceptions Type Condition System.InvalidOperationException Write(IntPtr, Int32, TimeSpan) Writes data to the backing buffer using the specified pointer and length. and associating a write tag for this operation. Declaration public void Write(IntPtr source, int length, TimeSpan writeTag) Parameters Type Name Description System.IntPtr source The source. System.Int32 length The length. System.TimeSpan writeTag The write tag. Exceptions Type Condition System.InvalidOperationException Read See Also System.IDisposable"
  },
  "api/Unosquare.Swan.Components.DependencyContainer.ITinyIoCObjectLifetimeProvider.html": {
    "href": "api/Unosquare.Swan.Components.DependencyContainer.ITinyIoCObjectLifetimeProvider.html",
    "title": "Interface DependencyContainer.ITinyIoCObjectLifetimeProvider | Unosquare SWAN",
    "keywords": "Interface DependencyContainer.ITinyIoCObjectLifetimeProvider Provides custom lifetime management for ASP.Net per-request lifetimes etc. Namespace : Unosquare.Swan.Components Assembly : cs.temp.dll.dll Syntax public interface ITinyIoCObjectLifetimeProvider Methods GetObject() Gets the stored object if it exists, or null if not Declaration object GetObject() Returns Type Description System.Object Object instance or null ReleaseObject() Release the object Declaration void ReleaseObject() SetObject(Object) Store the object Declaration void SetObject(object value) Parameters Type Name Description System.Object value Object to store"
  },
  "api/Unosquare.Swan.Components.DependencyContainer.TypeRegistration.html": {
    "href": "api/Unosquare.Swan.Components.DependencyContainer.TypeRegistration.html",
    "title": "Class DependencyContainer.TypeRegistration | Unosquare SWAN",
    "keywords": "Class DependencyContainer.TypeRegistration Represents a Type Registration within the IoC Container Inheritance System.Object DependencyContainer.TypeRegistration Inherited Members System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Components Assembly : cs.temp.dll.dll Syntax public sealed class TypeRegistration Constructors TypeRegistration(Type, String) Initializes a new instance of the DependencyContainer.TypeRegistration class. Declaration public TypeRegistration(Type type, string name = null) Parameters Type Name Description System.Type type The type. System.String name The name. Properties Name Gets the name. Declaration public string Name { get; } Property Value Type Description System.String The name. Type Gets the type. Declaration public Type Type { get; } Property Value Type Description System.Type The type. Methods Equals(Object) Determines whether the specified System.Object , is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The System.Object to compare with this instance. Returns Type Description System.Boolean true if the specified System.Object is equal to this instance; otherwise, false . Overrides System.Object.Equals(System.Object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides System.Object.GetHashCode()"
  },
  "api/Unosquare.Swan.Components.DependencyContainer.html": {
    "href": "api/Unosquare.Swan.Components.DependencyContainer.html",
    "title": "Class DependencyContainer | Unosquare SWAN",
    "keywords": "Class DependencyContainer The concrete implementation of a simple IoC container based largely on TinyIoC Inheritance System.Object DependencyContainer Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Components Assembly : cs.temp.dll.dll Syntax public sealed class DependencyContainer : IDisposable Constructors DependencyContainer() Initializes a new instance of the DependencyContainer class. Declaration public DependencyContainer() Properties Current Lazy created Singleton instance of the container for simple scenarios Declaration public static DependencyContainer Current { get; } Property Value Type Description DependencyContainer Methods AutoRegister(IEnumerable<Assembly>, DependencyContainerDuplicateImplementationActions, Func<Type, Boolean>) Attempt to automatically register all non-generic classes and interfaces in the specified assemblies Types will only be registered if they pass the supplied registration predicate. Declaration public void AutoRegister(IEnumerable<Assembly> assemblies, DependencyContainerDuplicateImplementationActions duplicateAction = DependencyContainerDuplicateImplementationActions.RegisterSingle, Func<Type, bool> registrationPredicate = null) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Reflection.Assembly > assemblies Assemblies to process DependencyContainerDuplicateImplementationActions duplicateAction What action to take when encountering duplicate implementations of an interface/base class. System.Func < System.Type , System.Boolean > registrationPredicate Predicate to determine if a particular type should be registered Exceptions Type Condition DependencyContainerAutoRegistrationException AutoRegister(DependencyContainerDuplicateImplementationActions, Func<Type, Boolean>) Attempt to automatically register all non-generic classes and interfaces in the current app domain. Types will only be registered if they pass the supplied registration predicate. Declaration public void AutoRegister(DependencyContainerDuplicateImplementationActions duplicateAction = DependencyContainerDuplicateImplementationActions.RegisterSingle, Func<Type, bool> registrationPredicate = null) Parameters Type Name Description DependencyContainerDuplicateImplementationActions duplicateAction What action to take when encountering duplicate implementations of an interface/base class. System.Func < System.Type , System.Boolean > registrationPredicate Predicate to determine if a particular type should be registered Exceptions Type Condition DependencyContainerAutoRegistrationException BuildUp(Object, DependencyContainerResolveOptions) Attempts to resolve all public property dependencies on the given object using the given resolve options. Declaration public void BuildUp(object input, DependencyContainerResolveOptions resolveOptions = null) Parameters Type Name Description System.Object input Object to \"build up\" DependencyContainerResolveOptions resolveOptions Resolve options to use CanResolve(Type, DependencyContainerNamedParameterOverloads, String, DependencyContainerResolveOptions) Attempts to predict whether a given type can be resolved with the supplied constructor parameters options. Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists). All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail. Note: Resolution may still fail if user defined factory registrations fail to construct objects when called. Declaration public bool CanResolve(Type resolveType, DependencyContainerNamedParameterOverloads parameters = null, string name = null, DependencyContainerResolveOptions options = null) Parameters Type Name Description System.Type resolveType Type to resolve DependencyContainerNamedParameterOverloads parameters User supplied named parameter overloads System.String name The name. DependencyContainerResolveOptions options Resolution options Returns Type Description System.Boolean Bool indicating whether the type can be resolved CanResolve(Type, DependencyContainerResolveOptions) Attempts to predict whether a given type can be resolved with the specified options. Note: Resolution may still fail if user defined factory registrations fail to construct objects when called. Declaration public bool CanResolve(Type resolveType, DependencyContainerResolveOptions options) Parameters Type Name Description System.Type resolveType Type to resolve DependencyContainerResolveOptions options Resolution options Returns Type Description System.Boolean Bool indicating whether the type can be resolved CanResolve<ResolveType>(String, DependencyContainerNamedParameterOverloads, DependencyContainerResolveOptions) Attempts to predict whether a given named type can be resolved with the supplied constructor parameters options. Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists). All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail. Note: Resolution may still fail if user defined factory registrations fail to construct objects when called. Declaration public bool CanResolve<ResolveType>(string name, DependencyContainerNamedParameterOverloads parameters, DependencyContainerResolveOptions options = null)where ResolveType : class Parameters Type Name Description System.String name Name of registration DependencyContainerNamedParameterOverloads parameters User supplied named parameter overloads DependencyContainerResolveOptions options Resolution options Returns Type Description System.Boolean Bool indicating whether the type can be resolved Type Parameters Name Description ResolveType Type to resolve CanResolve<ResolveType>(String, DependencyContainerResolveOptions) Attempts to predict whether a given named type can be resolved with the specified options. Note: Resolution may still fail if user defined factory registrations fail to construct objects when called. Declaration public bool CanResolve<ResolveType>(string name = null, DependencyContainerResolveOptions options = null)where ResolveType : class Parameters Type Name Description System.String name Name of registration DependencyContainerResolveOptions options Resolution options Returns Type Description System.Boolean Bool indicating whether the type can be resolved Type Parameters Name Description ResolveType Type to resolve CanResolve<ResolveType>(DependencyContainerNamedParameterOverloads, DependencyContainerResolveOptions) Attempts to predict whether a given type can be resolved with the supplied constructor parameters options. Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists). All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail. Note: Resolution may still fail if user defined factory registrations fail to construct objects when called. Declaration public bool CanResolve<ResolveType>(DependencyContainerNamedParameterOverloads parameters, DependencyContainerResolveOptions options = null)where ResolveType : class Parameters Type Name Description DependencyContainerNamedParameterOverloads parameters User supplied named parameter overloads DependencyContainerResolveOptions options Resolution options Returns Type Description System.Boolean Bool indicating whether the type can be resolved Type Parameters Name Description ResolveType Type to resolve CanResolve<ResolveType>(DependencyContainerResolveOptions) Attempts to predict whether a given type can be resolved with the specified options. Note: Resolution may still fail if user defined factory registrations fail to construct objects when called. Declaration public bool CanResolve<ResolveType>(DependencyContainerResolveOptions options)where ResolveType : class Parameters Type Name Description DependencyContainerResolveOptions options Resolution options Returns Type Description System.Boolean Bool indicating whether the type can be resolved Type Parameters Name Description ResolveType Type to resolve Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Implements System.IDisposable.Dispose() GetChildContainer() Gets the child container. Declaration public DependencyContainer GetChildContainer() Returns Type Description DependencyContainer Register(Type, Func<DependencyContainer, DependencyContainerNamedParameterOverloads, Object>, String) Creates/replaces a container class registration with a user specified factory Declaration public DependencyContainer.RegisterOptions Register(Type registerType, Func<DependencyContainer, DependencyContainerNamedParameterOverloads, object> factory, string name = \"\") Parameters Type Name Description System.Type registerType Type to register System.Func < DependencyContainer , DependencyContainerNamedParameterOverloads , System.Object > factory Factory/lambda that returns an instance of RegisterType System.String name Name of registation Returns Type Description DependencyContainer.RegisterOptions RegisterOptions for fluent API Register(Type, Object, String) Creates/replaces a named container class registration with a specific, strong referenced, instance. Declaration public DependencyContainer.RegisterOptions Register(Type registerType, object instance, string name = \"\") Parameters Type Name Description System.Type registerType Type to register System.Object instance Instance of RegisterType to register System.String name Name of registration Returns Type Description DependencyContainer.RegisterOptions RegisterOptions for fluent API Register(Type, String) Creates/replaces a named container class registration with default options. Declaration public DependencyContainer.RegisterOptions Register(Type registerType, string name = \"\") Parameters Type Name Description System.Type registerType Type to register System.String name Name of registration Returns Type Description DependencyContainer.RegisterOptions RegisterOptions for fluent API Register(Type, Type, Object, String) Creates/replaces a named container class registration with a specific, strong referenced, instance. Declaration public DependencyContainer.RegisterOptions Register(Type registerType, Type registerImplementation, object instance, string name = \"\") Parameters Type Name Description System.Type registerType Type to register System.Type registerImplementation Type of instance to register that implements RegisterType System.Object instance Instance of RegisterImplementation to register System.String name Name of registration Returns Type Description DependencyContainer.RegisterOptions RegisterOptions for fluent API Register(Type, Type, String) Creates/replaces a named container class registration with a given implementation and default options. Declaration public DependencyContainer.RegisterOptions Register(Type registerType, Type registerImplementation, string name = \"\") Parameters Type Name Description System.Type registerType Type to register System.Type registerImplementation Type to instantiate that implements RegisterType System.String name Name of registration Returns Type Description DependencyContainer.RegisterOptions RegisterOptions for fluent API Register<RegisterType>(RegisterType, String) Creates/replaces a named container class registration with a specific, strong referenced, instance. Declaration public DependencyContainer.RegisterOptions Register<RegisterType>(RegisterType instance, string name = \"\")where RegisterType : class Parameters Type Name Description RegisterType instance Instance of RegisterType to register System.String name Name of registration Returns Type Description DependencyContainer.RegisterOptions RegisterOptions for fluent API Type Parameters Name Description RegisterType Type to register Register<RegisterType>(Func<DependencyContainer, DependencyContainerNamedParameterOverloads, RegisterType>, String) Creates/replaces a named container class registration with a user specified factory Declaration public DependencyContainer.RegisterOptions Register<RegisterType>(Func<DependencyContainer, DependencyContainerNamedParameterOverloads, RegisterType> factory, string name = \"\")where RegisterType : class Parameters Type Name Description System.Func < DependencyContainer , DependencyContainerNamedParameterOverloads , RegisterType> factory Factory/lambda that returns an instance of RegisterType System.String name Name of registation Returns Type Description DependencyContainer.RegisterOptions RegisterOptions for fluent API Type Parameters Name Description RegisterType Type to register Register<RegisterType>(String) Creates/replaces a named container class registration with default options. Declaration public DependencyContainer.RegisterOptions Register<RegisterType>(string name = \"\")where RegisterType : class Parameters Type Name Description System.String name Name of registration Returns Type Description DependencyContainer.RegisterOptions RegisterOptions for fluent API Type Parameters Name Description RegisterType Type to register Register<RegisterType, RegisterImplementation>(RegisterImplementation, String) Creates/replaces a named container class registration with a specific, strong referenced, instance. Declaration public DependencyContainer.RegisterOptions Register<RegisterType, RegisterImplementation>(RegisterImplementation instance, string name = \"\")where RegisterType : class where RegisterImplementation : class, RegisterType Parameters Type Name Description RegisterImplementation instance Instance of RegisterImplementation to register System.String name Name of registration Returns Type Description DependencyContainer.RegisterOptions RegisterOptions for fluent API Type Parameters Name Description RegisterType Type to register RegisterImplementation Type of instance to register that implements RegisterType Register<RegisterType, RegisterImplementation>(String) Creates/replaces a named container class registration with a given implementation and default options. Declaration public DependencyContainer.RegisterOptions Register<RegisterType, RegisterImplementation>(string name = \"\")where RegisterType : class where RegisterImplementation : class, RegisterType Parameters Type Name Description System.String name Name of registration Returns Type Description DependencyContainer.RegisterOptions RegisterOptions for fluent API Type Parameters Name Description RegisterType Type to register RegisterImplementation Type to instantiate that implements RegisterType RegisterMultiple(Type, IEnumerable<Type>) Register multiple implementations of a type. Internally this registers each implementation using the full name of the class as its registration name. Declaration public DependencyContainer.MultiRegisterOptions RegisterMultiple(Type registrationType, IEnumerable<Type> implementationTypes) Parameters Type Name Description System.Type registrationType Type that each implementation implements System.Collections.Generic.IEnumerable < System.Type > implementationTypes Types that implement RegisterType Returns Type Description DependencyContainer.MultiRegisterOptions MultiRegisterOptions for the fluent API RegisterMultiple<RegisterType>(IEnumerable<Type>) Register multiple implementations of a type. Internally this registers each implementation using the full name of the class as its registration name. Declaration public DependencyContainer.MultiRegisterOptions RegisterMultiple<RegisterType>(IEnumerable<Type> implementationTypes) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Type > implementationTypes Types that implement RegisterType Returns Type Description DependencyContainer.MultiRegisterOptions MultiRegisterOptions for the fluent API Type Parameters Name Description RegisterType Type that each implementation implements Resolve(Type, String, DependencyContainerNamedParameterOverloads, DependencyContainerResolveOptions) Attempts to resolve a named type using specified options and the supplied constructor parameters. Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists). All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail. Declaration public object Resolve(Type resolveType, string name, DependencyContainerNamedParameterOverloads parameters = null, DependencyContainerResolveOptions options = null) Parameters Type Name Description System.Type resolveType Type to resolve System.String name Name of registration DependencyContainerNamedParameterOverloads parameters User specified constructor parameters DependencyContainerResolveOptions options Resolution options Returns Type Description System.Object Instance of type Exceptions Type Condition DependencyContainerResolutionException Unable to resolve the type. Resolve(Type, DependencyContainerNamedParameterOverloads, DependencyContainerResolveOptions) Attempts to resolve a type using specified options and the supplied constructor parameters. Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists). All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail. Declaration public object Resolve(Type resolveType, DependencyContainerNamedParameterOverloads parameters, DependencyContainerResolveOptions options = null) Parameters Type Name Description System.Type resolveType Type to resolve DependencyContainerNamedParameterOverloads parameters User specified constructor parameters DependencyContainerResolveOptions options Resolution options Returns Type Description System.Object Instance of type Exceptions Type Condition DependencyContainerResolutionException Unable to resolve the type. Resolve(Type, DependencyContainerResolveOptions) Attempts to resolve a type using specified options. Declaration public object Resolve(Type resolveType, DependencyContainerResolveOptions options = null) Parameters Type Name Description System.Type resolveType Type to resolve DependencyContainerResolveOptions options Resolution options Returns Type Description System.Object Instance of type Exceptions Type Condition DependencyContainerResolutionException Unable to resolve the type. Resolve<ResolveType>(String, DependencyContainerNamedParameterOverloads, DependencyContainerResolveOptions) Attempts to resolve a named type using specified options and the supplied constructor parameters. Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists). All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail. Declaration public ResolveType Resolve<ResolveType>(string name, DependencyContainerNamedParameterOverloads parameters, DependencyContainerResolveOptions options = null)where ResolveType : class Parameters Type Name Description System.String name Name of registration DependencyContainerNamedParameterOverloads parameters User specified constructor parameters DependencyContainerResolveOptions options Resolution options Returns Type Description ResolveType Instance of type Type Parameters Name Description ResolveType Type to resolve Exceptions Type Condition DependencyContainerResolutionException Unable to resolve the type. Resolve<ResolveType>(String, DependencyContainerResolveOptions) Attempts to resolve a type using supplied options and name. Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists). All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail. Declaration public ResolveType Resolve<ResolveType>(string name, DependencyContainerResolveOptions options = null)where ResolveType : class Parameters Type Name Description System.String name Name of registration DependencyContainerResolveOptions options Resolution options Returns Type Description ResolveType Instance of type Type Parameters Name Description ResolveType Type to resolve Exceptions Type Condition DependencyContainerResolutionException Unable to resolve the type. Resolve<ResolveType>(DependencyContainerNamedParameterOverloads, DependencyContainerResolveOptions) Attempts to resolve a type using specified options and the supplied constructor parameters. Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists). All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail. Declaration public ResolveType Resolve<ResolveType>(DependencyContainerNamedParameterOverloads parameters, DependencyContainerResolveOptions options = null)where ResolveType : class Parameters Type Name Description DependencyContainerNamedParameterOverloads parameters User specified constructor parameters DependencyContainerResolveOptions options Resolution options Returns Type Description ResolveType Instance of type Type Parameters Name Description ResolveType Type to resolve Exceptions Type Condition DependencyContainerResolutionException Unable to resolve the type. Resolve<ResolveType>(DependencyContainerResolveOptions) Attempts to resolve a type using specified options. Declaration public ResolveType Resolve<ResolveType>(DependencyContainerResolveOptions options = null)where ResolveType : class Parameters Type Name Description DependencyContainerResolveOptions options Resolution options Returns Type Description ResolveType Instance of type Type Parameters Name Description ResolveType Type to resolve Exceptions Type Condition DependencyContainerResolutionException Unable to resolve the type. ResolveAll(Type, Boolean) Returns all registrations of a type Declaration public IEnumerable<object> ResolveAll(Type resolveType, bool includeUnnamed = false) Parameters Type Name Description System.Type resolveType Type to resolveAll System.Boolean includeUnnamed Whether to include un-named (default) registrations Returns Type Description System.Collections.Generic.IEnumerable < System.Object > IEnumerable ResolveAll<ResolveType>(Boolean) Returns all registrations of a type Declaration public IEnumerable<ResolveType> ResolveAll<ResolveType>(bool includeUnnamed = true)where ResolveType : class Parameters Type Name Description System.Boolean includeUnnamed Whether to include un-named (default) registrations Returns Type Description System.Collections.Generic.IEnumerable <ResolveType> IEnumerable Type Parameters Name Description ResolveType Type to resolveAll TryResolve(Type, out Object) Attempts to resolve a type using the default options Declaration public bool TryResolve(Type resolveType, out object resolvedType) Parameters Type Name Description System.Type resolveType Type to resolve System.Object resolvedType Resolved type or default if resolve fails Returns Type Description System.Boolean True if resolved successfully, false otherwise TryResolve(Type, String, out Object) Attempts to resolve a type using the default options and given name Declaration public bool TryResolve(Type resolveType, string name, out object resolvedType) Parameters Type Name Description System.Type resolveType Type to resolve System.String name Name of registration System.Object resolvedType Resolved type or default if resolve fails Returns Type Description System.Boolean True if resolved successfully, false otherwise TryResolve(Type, String, DependencyContainerNamedParameterOverloads, out Object) Attempts to resolve a type using the default options and supplied name and constructor parameters Declaration public bool TryResolve(Type resolveType, string name, DependencyContainerNamedParameterOverloads parameters, out object resolvedType) Parameters Type Name Description System.Type resolveType Type to resolve System.String name Name of registration DependencyContainerNamedParameterOverloads parameters User specified constructor parameters System.Object resolvedType Resolved type or default if resolve fails Returns Type Description System.Boolean True if resolved successfully, false otherwise TryResolve(Type, String, DependencyContainerNamedParameterOverloads, DependencyContainerResolveOptions, out Object) Attempts to resolve a type using the supplied name, options and constructor parameters Declaration public bool TryResolve(Type resolveType, string name, DependencyContainerNamedParameterOverloads parameters, DependencyContainerResolveOptions options, out object resolvedType) Parameters Type Name Description System.Type resolveType Type to resolve System.String name Name of registration DependencyContainerNamedParameterOverloads parameters User specified constructor parameters DependencyContainerResolveOptions options Resolution options System.Object resolvedType Resolved type or default if resolve fails Returns Type Description System.Boolean True if resolved successfully, false otherwise TryResolve(Type, String, DependencyContainerResolveOptions, out Object) Attempts to resolve a type using the given options and name Declaration public bool TryResolve(Type resolveType, string name, DependencyContainerResolveOptions options, out object resolvedType) Parameters Type Name Description System.Type resolveType Type to resolve System.String name Name of registration DependencyContainerResolveOptions options Resolution options System.Object resolvedType Resolved type or default if resolve fails Returns Type Description System.Boolean True if resolved successfully, false otherwise TryResolve(Type, DependencyContainerNamedParameterOverloads, out Object) Attempts to resolve a type using the default options and supplied constructor parameters Declaration public bool TryResolve(Type resolveType, DependencyContainerNamedParameterOverloads parameters, out object resolvedType) Parameters Type Name Description System.Type resolveType Type to resolve DependencyContainerNamedParameterOverloads parameters User specified constructor parameters System.Object resolvedType Resolved type or default if resolve fails Returns Type Description System.Boolean True if resolved successfully, false otherwise TryResolve(Type, DependencyContainerNamedParameterOverloads, DependencyContainerResolveOptions, out Object) Attempts to resolve a type using the supplied options and constructor parameters Declaration public bool TryResolve(Type resolveType, DependencyContainerNamedParameterOverloads parameters, DependencyContainerResolveOptions options, out object resolvedType) Parameters Type Name Description System.Type resolveType Type to resolve DependencyContainerNamedParameterOverloads parameters User specified constructor parameters DependencyContainerResolveOptions options Resolution options System.Object resolvedType Resolved type or default if resolve fails Returns Type Description System.Boolean True if resolved successfully, false otherwise TryResolve(Type, DependencyContainerResolveOptions, out Object) Attempts to resolve a type using the given options Declaration public bool TryResolve(Type resolveType, DependencyContainerResolveOptions options, out object resolvedType) Parameters Type Name Description System.Type resolveType Type to resolve DependencyContainerResolveOptions options Resolution options System.Object resolvedType Resolved type or default if resolve fails Returns Type Description System.Boolean True if resolved successfully, false otherwise TryResolve<ResolveType>(out ResolveType) Attempts to resolve a type using the default options Declaration public bool TryResolve<ResolveType>(out ResolveType resolvedType)where ResolveType : class Parameters Type Name Description ResolveType resolvedType Resolved type or default if resolve fails Returns Type Description System.Boolean True if resolved successfully, false otherwise Type Parameters Name Description ResolveType Type to resolve TryResolve<ResolveType>(String, out ResolveType) Attempts to resolve a type using the default options and given name Declaration public bool TryResolve<ResolveType>(string name, out ResolveType resolvedType)where ResolveType : class Parameters Type Name Description System.String name Name of registration ResolveType resolvedType Resolved type or default if resolve fails Returns Type Description System.Boolean True if resolved successfully, false otherwise Type Parameters Name Description ResolveType Type to resolve TryResolve<ResolveType>(String, DependencyContainerNamedParameterOverloads, out ResolveType) Attempts to resolve a type using the default options and supplied name and constructor parameters Declaration public bool TryResolve<ResolveType>(string name, DependencyContainerNamedParameterOverloads parameters, out ResolveType resolvedType)where ResolveType : class Parameters Type Name Description System.String name Name of registration DependencyContainerNamedParameterOverloads parameters User specified constructor parameters ResolveType resolvedType Resolved type or default if resolve fails Returns Type Description System.Boolean True if resolved successfully, false otherwise Type Parameters Name Description ResolveType Type to resolve TryResolve<ResolveType>(String, DependencyContainerNamedParameterOverloads, DependencyContainerResolveOptions, out ResolveType) Attempts to resolve a type using the supplied name, options and constructor parameters Declaration public bool TryResolve<ResolveType>(string name, DependencyContainerNamedParameterOverloads parameters, DependencyContainerResolveOptions options, out ResolveType resolvedType)where ResolveType : class Parameters Type Name Description System.String name Name of registration DependencyContainerNamedParameterOverloads parameters User specified constructor parameters DependencyContainerResolveOptions options Resolution options ResolveType resolvedType Resolved type or default if resolve fails Returns Type Description System.Boolean True if resolved successfully, false otherwise Type Parameters Name Description ResolveType Type to resolve TryResolve<ResolveType>(String, DependencyContainerResolveOptions, out ResolveType) Attempts to resolve a type using the given options and name Declaration public bool TryResolve<ResolveType>(string name, DependencyContainerResolveOptions options, out ResolveType resolvedType)where ResolveType : class Parameters Type Name Description System.String name Name of registration DependencyContainerResolveOptions options Resolution options ResolveType resolvedType Resolved type or default if resolve fails Returns Type Description System.Boolean True if resolved successfully, false otherwise Type Parameters Name Description ResolveType Type to resolve TryResolve<ResolveType>(DependencyContainerNamedParameterOverloads, out ResolveType) Attempts to resolve a type using the default options and supplied constructor parameters Declaration public bool TryResolve<ResolveType>(DependencyContainerNamedParameterOverloads parameters, out ResolveType resolvedType)where ResolveType : class Parameters Type Name Description DependencyContainerNamedParameterOverloads parameters User specified constructor parameters ResolveType resolvedType Resolved type or default if resolve fails Returns Type Description System.Boolean True if resolved successfully, false otherwise Type Parameters Name Description ResolveType Type to resolve TryResolve<ResolveType>(DependencyContainerNamedParameterOverloads, DependencyContainerResolveOptions, out ResolveType) Attempts to resolve a type using the supplied options and constructor parameters Declaration public bool TryResolve<ResolveType>(DependencyContainerNamedParameterOverloads parameters, DependencyContainerResolveOptions options, out ResolveType resolvedType)where ResolveType : class Parameters Type Name Description DependencyContainerNamedParameterOverloads parameters User specified constructor parameters DependencyContainerResolveOptions options Resolution options ResolveType resolvedType Resolved type or default if resolve fails Returns Type Description System.Boolean True if resolved successfully, false otherwise Type Parameters Name Description ResolveType Type to resolve TryResolve<ResolveType>(DependencyContainerResolveOptions, out ResolveType) Attempts to resolve a type using the given options Declaration public bool TryResolve<ResolveType>(DependencyContainerResolveOptions options, out ResolveType resolvedType)where ResolveType : class Parameters Type Name Description DependencyContainerResolveOptions options Resolution options ResolveType resolvedType Resolved type or default if resolve fails Returns Type Description System.Boolean True if resolved successfully, false otherwise Type Parameters Name Description ResolveType Type to resolve Unregister(Type, String) Remove a named container class registration. Declaration public bool Unregister(Type registerType, string name = \"\") Parameters Type Name Description System.Type registerType Type to unregister System.String name Name of registration Returns Type Description System.Boolean true if the registration is successfully found and removed; otherwise, false. Unregister<RegisterType>(String) Remove a named container class registration. Declaration public bool Unregister<RegisterType>(string name = \"\") Parameters Type Name Description System.String name Name of registration Returns Type Description System.Boolean true if the registration is successfully found and removed; otherwise, false. Type Parameters Name Description RegisterType Type to unregister See Also System.IDisposable"
  },
  "api/Unosquare.Swan.Components.DependencyContainerDuplicateImplementationActions.html": {
    "href": "api/Unosquare.Swan.Components.DependencyContainerDuplicateImplementationActions.html",
    "title": "Enum DependencyContainerDuplicateImplementationActions | Unosquare SWAN",
    "keywords": "Enum DependencyContainerDuplicateImplementationActions Enumerates duplicate definition actions Namespace : Unosquare.Swan.Components Assembly : cs.temp.dll.dll Syntax public enum DependencyContainerDuplicateImplementationActions Fields Name Description Fail The fail RegisterMultiple The register multiple RegisterSingle The register single"
  },
  "api/Unosquare.Swan.Components.DependencyContainerNamedParameterOverloads.html": {
    "href": "api/Unosquare.Swan.Components.DependencyContainerNamedParameterOverloads.html",
    "title": "Class DependencyContainerNamedParameterOverloads | Unosquare SWAN",
    "keywords": "Class DependencyContainerNamedParameterOverloads Define overload on named parameters Inheritance System.Object System.Collections.Generic.Dictionary < System.String , System.Object > DependencyContainerNamedParameterOverloads Inherited Members System.Collections.Generic.Dictionary<System.String, System.Object>.Add(System.String, System.Object) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Add(System.Collections.Generic.KeyValuePair<System.String, System.Object>) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Contains(System.Collections.Generic.KeyValuePair<System.String, System.Object>) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Remove(System.Collections.Generic.KeyValuePair<System.String, System.Object>) System.Collections.Generic.Dictionary<System.String, System.Object>.Clear() System.Collections.Generic.Dictionary<System.String, System.Object>.ContainsKey(System.String) System.Collections.Generic.Dictionary<System.String, System.Object>.ContainsValue(System.Object) System.Collections.Generic.Dictionary<System.String, System.Object>.GetEnumerator() System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.GetEnumerator() System.Collections.Generic.Dictionary<System.String, System.Object>.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Collections.Generic.Dictionary<System.String, System.Object>.OnDeserialization(System.Object) System.Collections.Generic.Dictionary<System.String, System.Object>.Remove(System.String) System.Collections.Generic.Dictionary<System.String, System.Object>.TryGetValue(System.String, System.Object) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.CopyTo(System.Collections.Generic.KeyValuePair<System.String, System.Object>[], System.Int32) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.ICollection.CopyTo(System.Array, System.Int32) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IEnumerable.GetEnumerator() System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.get_Item(System.Object) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.set_Item(System.Object, System.Object) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.Add(System.Object, System.Object) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.Contains(System.Object) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.GetEnumerator() System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.Remove(System.Object) System.Collections.Generic.Dictionary<System.String, System.Object>.Comparer System.Collections.Generic.Dictionary<System.String, System.Object>.Count System.Collections.Generic.Dictionary<System.String, System.Object>.Keys System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.IDictionary<System.String, System.Object>.Keys System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>.Keys System.Collections.Generic.Dictionary<System.String, System.Object>.Values System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.IDictionary<System.String, System.Object>.Values System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>.Values System.Collections.Generic.Dictionary<System.String, System.Object>.Item[System.String] System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.IsReadOnly System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.ICollection.IsSynchronized System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.ICollection.SyncRoot System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.IsFixedSize System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.IsReadOnly System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.Keys System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.Values System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.Item[System.Object] System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Components Assembly : cs.temp.dll.dll Syntax public sealed class DependencyContainerNamedParameterOverloads : Dictionary<string, object>, IDictionary<string, object>, ICollection<KeyValuePair<string, object>>, IDictionary, ICollection, IReadOnlyDictionary<string, object>, IReadOnlyCollection<KeyValuePair<string, object>>, IEnumerable<KeyValuePair<string, object>>, IEnumerable, ISerializable, IDeserializationCallback Constructors DependencyContainerNamedParameterOverloads() Initializes a new instance of the DependencyContainerNamedParameterOverloads class. Declaration public DependencyContainerNamedParameterOverloads() DependencyContainerNamedParameterOverloads(IDictionary<String, Object>) Initializes a new instance of the DependencyContainerNamedParameterOverloads class. Declaration public DependencyContainerNamedParameterOverloads(IDictionary<string, object> data) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.Object > data The data. Properties Default Gets the default instance. Declaration public static DependencyContainerNamedParameterOverloads Default { get; } Property Value Type Description DependencyContainerNamedParameterOverloads The default. Methods FromIDictionary(IDictionary<String, Object>) Creates a new instance from a Dictionary Declaration public static DependencyContainerNamedParameterOverloads FromIDictionary(IDictionary<string, object> data) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.Object > data The data. Returns Type Description DependencyContainerNamedParameterOverloads"
  },
  "api/Unosquare.Swan.Components.DependencyContainerUnregisteredResolutionActions.html": {
    "href": "api/Unosquare.Swan.Components.DependencyContainerUnregisteredResolutionActions.html",
    "title": "Enum DependencyContainerUnregisteredResolutionActions | Unosquare SWAN",
    "keywords": "Enum DependencyContainerUnregisteredResolutionActions Defines Resolution actions Namespace : Unosquare.Swan.Components Assembly : cs.temp.dll.dll Syntax public enum DependencyContainerUnregisteredResolutionActions Fields Name Description AttemptResolve Attempt to resolve type, even if the type isn't registered. Registered types/options will always take precedence. Fail Fail resolution if type not explicitly registered GenericsOnly Attempt to resolve unregistered type if requested type is generic and no registration exists for the specific generic parameters used. Registered types/options will always take precedence."
  },
  "api/Unosquare.Swan.Components.IMessageHub.html": {
    "href": "api/Unosquare.Swan.Components.IMessageHub.html",
    "title": "Interface IMessageHub | Unosquare SWAN",
    "keywords": "Interface IMessageHub Messenger hub responsible for taking subscriptions/publications and delivering of messages. Namespace : Unosquare.Swan.Components Assembly : cs.temp.dll.dll Syntax public interface IMessageHub Methods Publish<TMessage>(TMessage) Publish a message to any subscribers Declaration void Publish<TMessage>(TMessage message)where TMessage : class, IMessageHubMessage Parameters Type Name Description TMessage message Message to deliver Type Parameters Name Description TMessage Type of message PublishAsync<TMessage>(TMessage) Publish a message to any subscribers asynchronously Declaration Task PublishAsync<TMessage>(TMessage message)where TMessage : class, IMessageHubMessage Parameters Type Name Description TMessage message Message to deliver Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TMessage Type of message Subscribe<TMessage>(Action<TMessage>) Subscribe to a message type with the given destination and delivery action. All references are held with WeakReferences All messages of this type will be delivered. Declaration MessageHubSubscriptionToken Subscribe<TMessage>(Action<TMessage> deliveryAction)where TMessage : class, IMessageHubMessage Parameters Type Name Description System.Action <TMessage> deliveryAction Action to invoke when message is delivered Returns Type Description MessageHubSubscriptionToken TinyMessageSubscription used to unsubscribing Type Parameters Name Description TMessage Type of message Subscribe<TMessage>(Action<TMessage>, Boolean) Subscribe to a message type with the given destination and delivery action. All messages of this type will be delivered. Declaration MessageHubSubscriptionToken Subscribe<TMessage>(Action<TMessage> deliveryAction, bool useStrongReferences)where TMessage : class, IMessageHubMessage Parameters Type Name Description System.Action <TMessage> deliveryAction Action to invoke when message is delivered System.Boolean useStrongReferences Use strong references to destination and deliveryAction Returns Type Description MessageHubSubscriptionToken TinyMessageSubscription used to unsubscribing Type Parameters Name Description TMessage Type of message Subscribe<TMessage>(Action<TMessage>, Boolean, IMessageHubProxy) Subscribe to a message type with the given destination and delivery action. Messages will be delivered via the specified proxy. All messages of this type will be delivered. Declaration MessageHubSubscriptionToken Subscribe<TMessage>(Action<TMessage> deliveryAction, bool useStrongReferences, IMessageHubProxy proxy)where TMessage : class, IMessageHubMessage Parameters Type Name Description System.Action <TMessage> deliveryAction Action to invoke when message is delivered System.Boolean useStrongReferences Use strong references to destination and deliveryAction IMessageHubProxy proxy Proxy to use when delivering the messages Returns Type Description MessageHubSubscriptionToken TinyMessageSubscription used to unsubscribing Type Parameters Name Description TMessage Type of message Subscribe<TMessage>(Action<TMessage>, Func<TMessage, Boolean>) Subscribe to a message type with the given destination and delivery action with the given filter. All references are held with WeakReferences Only messages that \"pass\" the filter will be delivered. Declaration MessageHubSubscriptionToken Subscribe<TMessage>(Action<TMessage> deliveryAction, Func<TMessage, bool> messageFilter)where TMessage : class, IMessageHubMessage Parameters Type Name Description System.Action <TMessage> deliveryAction Action to invoke when message is delivered System.Func <TMessage, System.Boolean > messageFilter The message filter. Returns Type Description MessageHubSubscriptionToken TinyMessageSubscription used to unsubscribing Type Parameters Name Description TMessage Type of message Subscribe<TMessage>(Action<TMessage>, Func<TMessage, Boolean>, Boolean) Subscribe to a message type with the given destination and delivery action with the given filter. All references are held with WeakReferences Only messages that \"pass\" the filter will be delivered. Declaration MessageHubSubscriptionToken Subscribe<TMessage>(Action<TMessage> deliveryAction, Func<TMessage, bool> messageFilter, bool useStrongReferences)where TMessage : class, IMessageHubMessage Parameters Type Name Description System.Action <TMessage> deliveryAction Action to invoke when message is delivered System.Func <TMessage, System.Boolean > messageFilter The message filter. System.Boolean useStrongReferences Use strong references to destination and deliveryAction Returns Type Description MessageHubSubscriptionToken TinyMessageSubscription used to unsubscribing Type Parameters Name Description TMessage Type of message Subscribe<TMessage>(Action<TMessage>, Func<TMessage, Boolean>, Boolean, IMessageHubProxy) Subscribe to a message type with the given destination and delivery action with the given filter. Messages will be delivered via the specified proxy. All references are held with WeakReferences Only messages that \"pass\" the filter will be delivered. Declaration MessageHubSubscriptionToken Subscribe<TMessage>(Action<TMessage> deliveryAction, Func<TMessage, bool> messageFilter, bool useStrongReferences, IMessageHubProxy proxy)where TMessage : class, IMessageHubMessage Parameters Type Name Description System.Action <TMessage> deliveryAction Action to invoke when message is delivered System.Func <TMessage, System.Boolean > messageFilter The message filter. System.Boolean useStrongReferences Use strong references to destination and deliveryAction IMessageHubProxy proxy Proxy to use when delivering the messages Returns Type Description MessageHubSubscriptionToken TinyMessageSubscription used to unsubscribing Type Parameters Name Description TMessage Type of message Subscribe<TMessage>(Action<TMessage>, Func<TMessage, Boolean>, IMessageHubProxy) Subscribe to a message type with the given destination and delivery action with the given filter. Messages will be delivered via the specified proxy. All references (apart from the proxy) are held with WeakReferences Only messages that \"pass\" the filter will be delivered. Declaration MessageHubSubscriptionToken Subscribe<TMessage>(Action<TMessage> deliveryAction, Func<TMessage, bool> messageFilter, IMessageHubProxy proxy)where TMessage : class, IMessageHubMessage Parameters Type Name Description System.Action <TMessage> deliveryAction Action to invoke when message is delivered System.Func <TMessage, System.Boolean > messageFilter The message filter. IMessageHubProxy proxy Proxy to use when delivering the messages Returns Type Description MessageHubSubscriptionToken TinyMessageSubscription used to unsubscribing Type Parameters Name Description TMessage Type of message Subscribe<TMessage>(Action<TMessage>, IMessageHubProxy) Subscribe to a message type with the given destination and delivery action. Messages will be delivered via the specified proxy. All references (apart from the proxy) are held with WeakReferences All messages of this type will be delivered. Declaration MessageHubSubscriptionToken Subscribe<TMessage>(Action<TMessage> deliveryAction, IMessageHubProxy proxy)where TMessage : class, IMessageHubMessage Parameters Type Name Description System.Action <TMessage> deliveryAction Action to invoke when message is delivered IMessageHubProxy proxy Proxy to use when delivering the messages Returns Type Description MessageHubSubscriptionToken TinyMessageSubscription used to unsubscribing Type Parameters Name Description TMessage Type of message Unsubscribe<TMessage>(MessageHubSubscriptionToken) Unsubscribe from a particular message type. Does not throw an exception if the subscription is not found. Declaration void Unsubscribe<TMessage>(MessageHubSubscriptionToken subscriptionToken)where TMessage : class, IMessageHubMessage Parameters Type Name Description MessageHubSubscriptionToken subscriptionToken Subscription token received from Subscribe Type Parameters Name Description TMessage Type of message"
  },
  "api/Unosquare.Swan.Components.IMessageHubMessage.html": {
    "href": "api/Unosquare.Swan.Components.IMessageHubMessage.html",
    "title": "Interface IMessageHubMessage | Unosquare SWAN",
    "keywords": "Interface IMessageHubMessage A TinyMessage to be published/delivered by TinyMessenger Namespace : Unosquare.Swan.Components Assembly : cs.temp.dll.dll Syntax public interface IMessageHubMessage Properties Sender The sender of the message, or null if not supported by the message implementation. Declaration object Sender { get; } Property Value Type Description System.Object"
  },
  "api/Unosquare.Swan.Components.IMessageHubProxy.html": {
    "href": "api/Unosquare.Swan.Components.IMessageHubProxy.html",
    "title": "Interface IMessageHubProxy | Unosquare SWAN",
    "keywords": "Interface IMessageHubProxy Message proxy definition. A message proxy can be used to intercept/alter messages and/or marshal delivery actions onto a particular thread. Namespace : Unosquare.Swan.Components Assembly : cs.temp.dll.dll Syntax public interface IMessageHubProxy Methods Deliver(IMessageHubMessage, IMessageHubSubscription) Delivers the specified message. Declaration void Deliver(IMessageHubMessage message, IMessageHubSubscription subscription) Parameters Type Name Description IMessageHubMessage message The message. IMessageHubSubscription subscription The subscription."
  },
  "api/Unosquare.Swan.Components.MessageHub.html": {
    "href": "api/Unosquare.Swan.Components.MessageHub.html",
    "title": "Class MessageHub | Unosquare SWAN",
    "keywords": "Class MessageHub Messenger hub responsible for taking subscriptions/publications and delivering of messages. Inheritance System.Object MessageHub Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Components Assembly : cs.temp.dll.dll Syntax public sealed class MessageHub : IMessageHub Methods Publish<TMessage>(TMessage) Publish a message to any subscribers Declaration public void Publish<TMessage>(TMessage message)where TMessage : class, IMessageHubMessage Parameters Type Name Description TMessage message Message to deliver Type Parameters Name Description TMessage Type of message Implements IMessageHub.Publish<TMessage>(TMessage) PublishAsync<TMessage>(TMessage) Publish a message to any subscribers asynchronously Declaration public Task PublishAsync<TMessage>(TMessage message)where TMessage : class, IMessageHubMessage Parameters Type Name Description TMessage message Message to deliver Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TMessage Type of message Implements IMessageHub.PublishAsync<TMessage>(TMessage) Subscribe<TMessage>(Action<TMessage>) Subscribe to a message type with the given destination and delivery action. All references are held with strong references All messages of this type will be delivered. Declaration public MessageHubSubscriptionToken Subscribe<TMessage>(Action<TMessage> deliveryAction)where TMessage : class, IMessageHubMessage Parameters Type Name Description System.Action <TMessage> deliveryAction Action to invoke when message is delivered Returns Type Description MessageHubSubscriptionToken TinyMessageSubscription used to unsubscribing Type Parameters Name Description TMessage Type of message Implements IMessageHub.Subscribe<TMessage>(Action<TMessage>) Subscribe<TMessage>(Action<TMessage>, Boolean) Subscribe to a message type with the given destination and delivery action. All messages of this type will be delivered. Declaration public MessageHubSubscriptionToken Subscribe<TMessage>(Action<TMessage> deliveryAction, bool useStrongReferences)where TMessage : class, IMessageHubMessage Parameters Type Name Description System.Action <TMessage> deliveryAction Action to invoke when message is delivered System.Boolean useStrongReferences Use strong references to destination and deliveryAction Returns Type Description MessageHubSubscriptionToken TinyMessageSubscription used to unsubscribing Type Parameters Name Description TMessage Type of message Implements IMessageHub.Subscribe<TMessage>(Action<TMessage>, Boolean) Subscribe<TMessage>(Action<TMessage>, Boolean, IMessageHubProxy) Subscribe to a message type with the given destination and delivery action. Messages will be delivered via the specified proxy. All messages of this type will be delivered. Declaration public MessageHubSubscriptionToken Subscribe<TMessage>(Action<TMessage> deliveryAction, bool useStrongReferences, IMessageHubProxy proxy)where TMessage : class, IMessageHubMessage Parameters Type Name Description System.Action <TMessage> deliveryAction Action to invoke when message is delivered System.Boolean useStrongReferences Use strong references to destination and deliveryAction IMessageHubProxy proxy Proxy to use when delivering the messages Returns Type Description MessageHubSubscriptionToken TinyMessageSubscription used to unsubscribing Type Parameters Name Description TMessage Type of message Implements IMessageHub.Subscribe<TMessage>(Action<TMessage>, Boolean, IMessageHubProxy) Subscribe<TMessage>(Action<TMessage>, Func<TMessage, Boolean>) Subscribe to a message type with the given destination and delivery action with the given filter. All references are held with WeakReferences Only messages that \"pass\" the filter will be delivered. Declaration public MessageHubSubscriptionToken Subscribe<TMessage>(Action<TMessage> deliveryAction, Func<TMessage, bool> messageFilter)where TMessage : class, IMessageHubMessage Parameters Type Name Description System.Action <TMessage> deliveryAction Action to invoke when message is delivered System.Func <TMessage, System.Boolean > messageFilter Returns Type Description MessageHubSubscriptionToken TinyMessageSubscription used to unsubscribing Type Parameters Name Description TMessage Type of message Implements IMessageHub.Subscribe<TMessage>(Action<TMessage>, Func<TMessage, Boolean>) Subscribe<TMessage>(Action<TMessage>, Func<TMessage, Boolean>, Boolean) Subscribe to a message type with the given destination and delivery action with the given filter. All references are held with WeakReferences Only messages that \"pass\" the filter will be delivered. Declaration public MessageHubSubscriptionToken Subscribe<TMessage>(Action<TMessage> deliveryAction, Func<TMessage, bool> messageFilter, bool useStrongReferences)where TMessage : class, IMessageHubMessage Parameters Type Name Description System.Action <TMessage> deliveryAction Action to invoke when message is delivered System.Func <TMessage, System.Boolean > messageFilter System.Boolean useStrongReferences Use strong references to destination and deliveryAction Returns Type Description MessageHubSubscriptionToken TinyMessageSubscription used to unsubscribing Type Parameters Name Description TMessage Type of message Implements IMessageHub.Subscribe<TMessage>(Action<TMessage>, Func<TMessage, Boolean>, Boolean) Subscribe<TMessage>(Action<TMessage>, Func<TMessage, Boolean>, Boolean, IMessageHubProxy) Subscribe to a message type with the given destination and delivery action with the given filter. Messages will be delivered via the specified proxy. All references are held with WeakReferences Only messages that \"pass\" the filter will be delivered. Declaration public MessageHubSubscriptionToken Subscribe<TMessage>(Action<TMessage> deliveryAction, Func<TMessage, bool> messageFilter, bool useStrongReferences, IMessageHubProxy proxy)where TMessage : class, IMessageHubMessage Parameters Type Name Description System.Action <TMessage> deliveryAction Action to invoke when message is delivered System.Func <TMessage, System.Boolean > messageFilter System.Boolean useStrongReferences Use strong references to destination and deliveryAction IMessageHubProxy proxy Proxy to use when delivering the messages Returns Type Description MessageHubSubscriptionToken TinyMessageSubscription used to unsubscribing Type Parameters Name Description TMessage Type of message Implements IMessageHub.Subscribe<TMessage>(Action<TMessage>, Func<TMessage, Boolean>, Boolean, IMessageHubProxy) Subscribe<TMessage>(Action<TMessage>, Func<TMessage, Boolean>, IMessageHubProxy) Subscribe to a message type with the given destination and delivery action with the given filter. Messages will be delivered via the specified proxy. All references (apart from the proxy) are held with WeakReferences Only messages that \"pass\" the filter will be delivered. Declaration public MessageHubSubscriptionToken Subscribe<TMessage>(Action<TMessage> deliveryAction, Func<TMessage, bool> messageFilter, IMessageHubProxy proxy)where TMessage : class, IMessageHubMessage Parameters Type Name Description System.Action <TMessage> deliveryAction Action to invoke when message is delivered System.Func <TMessage, System.Boolean > messageFilter IMessageHubProxy proxy Proxy to use when delivering the messages Returns Type Description MessageHubSubscriptionToken TinyMessageSubscription used to unsubscribing Type Parameters Name Description TMessage Type of message Implements IMessageHub.Subscribe<TMessage>(Action<TMessage>, Func<TMessage, Boolean>, IMessageHubProxy) Subscribe<TMessage>(Action<TMessage>, IMessageHubProxy) Subscribe to a message type with the given destination and delivery action. Messages will be delivered via the specified proxy. All references (apart from the proxy) are held with strong references All messages of this type will be delivered. Declaration public MessageHubSubscriptionToken Subscribe<TMessage>(Action<TMessage> deliveryAction, IMessageHubProxy proxy)where TMessage : class, IMessageHubMessage Parameters Type Name Description System.Action <TMessage> deliveryAction Action to invoke when message is delivered IMessageHubProxy proxy Proxy to use when delivering the messages Returns Type Description MessageHubSubscriptionToken TinyMessageSubscription used to unsubscribing Type Parameters Name Description TMessage Type of message Implements IMessageHub.Subscribe<TMessage>(Action<TMessage>, IMessageHubProxy) Unsubscribe<TMessage>(MessageHubSubscriptionToken) Unsubscribe from a particular message type. Does not throw an exception if the subscription is not found. Declaration public void Unsubscribe<TMessage>(MessageHubSubscriptionToken subscriptionToken)where TMessage : class, IMessageHubMessage Parameters Type Name Description MessageHubSubscriptionToken subscriptionToken Subscription token received from Subscribe Type Parameters Name Description TMessage Type of message Implements IMessageHub.Unsubscribe<TMessage>(MessageHubSubscriptionToken)"
  },
  "api/Unosquare.Swan.Components.MessageHubCancellableGenericMessage-1.html": {
    "href": "api/Unosquare.Swan.Components.MessageHubCancellableGenericMessage-1.html",
    "title": "Class MessageHubCancellableGenericMessage<TContent> | Unosquare SWAN",
    "keywords": "Class MessageHubCancellableGenericMessage<TContent> Basic \"cancellable\" generic message Inheritance System.Object MessageHubMessageBase MessageHubCancellableGenericMessage<TContent> Inherited Members MessageHubMessageBase.Sender System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Components Assembly : cs.temp.dll.dll Syntax public class MessageHubCancellableGenericMessage<TContent> : MessageHubMessageBase, IMessageHubMessage Type Parameters Name Description TContent Content type to store Constructors MessageHubCancellableGenericMessage(Object, TContent, Action) Create a new instance of the CancellableGenericTinyMessage class. Declaration public MessageHubCancellableGenericMessage(object sender, TContent content, Action cancelAction) Parameters Type Name Description System.Object sender Message sender (usually \"this\") TContent content Contents of the message System.Action cancelAction Action to call for cancellation Properties Cancel Cancel action Declaration public Action Cancel { get; protected set; } Property Value Type Description System.Action Content Contents of the message Declaration public TContent Content { get; protected set; } Property Value Type Description TContent"
  },
  "api/Unosquare.Swan.Components.MessageHubDefaultProxy.html": {
    "href": "api/Unosquare.Swan.Components.MessageHubDefaultProxy.html",
    "title": "Class MessageHubDefaultProxy | Unosquare SWAN",
    "keywords": "Class MessageHubDefaultProxy Default \"pass through\" proxy. Does nothing other than deliver the message. Inheritance System.Object MessageHubDefaultProxy Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Components Assembly : cs.temp.dll.dll Syntax public sealed class MessageHubDefaultProxy : IMessageHubProxy Properties Instance Singleton instance of the proxy. Declaration public static MessageHubDefaultProxy Instance { get; } Property Value Type Description MessageHubDefaultProxy Methods Deliver(IMessageHubMessage, IMessageHubSubscription) Delivers the specified message. Declaration public void Deliver(IMessageHubMessage message, IMessageHubSubscription subscription) Parameters Type Name Description IMessageHubMessage message The message. IMessageHubSubscription subscription The subscription. Implements IMessageHubProxy.Deliver(IMessageHubMessage, IMessageHubSubscription)"
  },
  "api/Unosquare.Swan.Components.MessageHubGenericMessage-1.html": {
    "href": "api/Unosquare.Swan.Components.MessageHubGenericMessage-1.html",
    "title": "Class MessageHubGenericMessage<TContent> | Unosquare SWAN",
    "keywords": "Class MessageHubGenericMessage<TContent> Generic message with user specified content Inheritance System.Object MessageHubMessageBase MessageHubGenericMessage<TContent> Inherited Members MessageHubMessageBase.Sender System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Components Assembly : cs.temp.dll.dll Syntax public class MessageHubGenericMessage<TContent> : MessageHubMessageBase, IMessageHubMessage Type Parameters Name Description TContent Content type to store Constructors MessageHubGenericMessage(Object, TContent) Create a new instance of the GenericTinyMessage class. Declaration public MessageHubGenericMessage(object sender, TContent content) Parameters Type Name Description System.Object sender Message sender (usually \"this\") TContent content Contents of the message Properties Content Contents of the message Declaration public TContent Content { get; protected set; } Property Value Type Description TContent"
  },
  "api/Unosquare.Swan.Components.ObjectMap-2.html": {
    "href": "api/Unosquare.Swan.Components.ObjectMap-2.html",
    "title": "Class ObjectMap<TSource, TDestination> | Unosquare SWAN",
    "keywords": "Class ObjectMap<TSource, TDestination> Represents an object map Inheritance System.Object ObjectMap<TSource, TDestination> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Components Assembly : cs.temp.dll.dll Syntax public class ObjectMap<TSource, TDestination> : IObjectMap Type Parameters Name Description TSource TDestination Constructors ObjectMap(IEnumerable<PropertyInfo>) Initializes a new instance of the ObjectMap<TSource, TDestination> class. Declaration public ObjectMap(IEnumerable<PropertyInfo> intersect) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Reflection.PropertyInfo > intersect The intersect. Properties DestinationType Gets or sets the type of the destination. Declaration public Type DestinationType { get; } Property Value Type Description System.Type Implements IObjectMap.DestinationType Map Gets or sets the map. Declaration public Dictionary<PropertyInfo, List<PropertyInfo>> Map { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.Reflection.PropertyInfo , System.Collections.Generic.List < System.Reflection.PropertyInfo >> Implements IObjectMap.Map SourceType Gets or sets the type of the source. Declaration public Type SourceType { get; } Property Value Type Description System.Type Implements IObjectMap.SourceType Methods MapProperty<TDestinationProperty, TSourceProperty>(Expression<Func<TDestination, TDestinationProperty>>, Expression<Func<TSource, TSourceProperty>>) Maps the property. Declaration public ObjectMap<TSource, TDestination> MapProperty<TDestinationProperty, TSourceProperty>(Expression<Func<TDestination, TDestinationProperty>> destinationProperty, Expression<Func<TSource, TSourceProperty>> sourceProperty) Parameters Type Name Description Expression < System.Func <TDestination, TDestinationProperty>> destinationProperty The destination property. Expression < System.Func <TSource, TSourceProperty>> sourceProperty The source property. Returns Type Description ObjectMap <TSource, TDestination> Type Parameters Name Description TDestinationProperty The type of the destination property. TSourceProperty The type of the source property. RemoveMap<TDestinationProperty>(Expression<Func<TDestination, TDestinationProperty>>) Removes the map. Declaration public ObjectMap<TSource, TDestination> RemoveMap<TDestinationProperty>(Expression<Func<TDestination, TDestinationProperty>> destinationProperty) Parameters Type Name Description Expression < System.Func <TDestination, TDestinationProperty>> destinationProperty The destination property. Returns Type Description ObjectMap <TSource, TDestination> Type Parameters Name Description TDestinationProperty The type of the destination property. Exceptions Type Condition System.Exception Invalid destination expression"
  },
  "api/Unosquare.Swan.Components.ObjectMapper.html": {
    "href": "api/Unosquare.Swan.Components.ObjectMapper.html",
    "title": "Class ObjectMapper | Unosquare SWAN",
    "keywords": "Class ObjectMapper Represents an AutoMapper-like object to map from one object type to another Inheritance System.Object ObjectMapper Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Components Assembly : cs.temp.dll.dll Syntax public class ObjectMapper Methods CreateMap<TSource, TDestination>() Creates the map. Declaration public ObjectMap<TSource, TDestination> CreateMap<TSource, TDestination>() Returns Type Description ObjectMap <TSource, TDestination> Type Parameters Name Description TSource The type of the source. TDestination The type of the destination. Exceptions Type Condition System.InvalidOperationException You can't create an existing map or Types doesn't match Map<TDestination>(Object, Boolean) Maps the specified source. Declaration public TDestination Map<TDestination>(object source, bool autoResolve = true) Parameters Type Name Description System.Object source The source. System.Boolean autoResolve if set to true [automatic resolve]. Returns Type Description TDestination A new instance of the map Type Parameters Name Description TDestination The type of the destination."
  },
  "api/Unosquare.Swan.Components.ProcessResult.html": {
    "href": "api/Unosquare.Swan.Components.ProcessResult.html",
    "title": "Class ProcessResult | Unosquare SWAN",
    "keywords": "Class ProcessResult Represents the text of the standard output and standard error of a process, including its exit code. Inheritance System.Object ProcessResult Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Components Assembly : cs.temp.dll.dll Syntax public class ProcessResult Constructors ProcessResult(Int32, String, String) Initializes a new instance of the ProcessResult class. Declaration public ProcessResult(int exitCode, string standardOutput, string standardError) Parameters Type Name Description System.Int32 exitCode The exit code. System.String standardOutput The standard output. System.String standardError The standard error. Properties ExitCode Gets the exit code. Declaration public int ExitCode { get; protected set; } Property Value Type Description System.Int32 StandardError Gets the text of the standard error. Declaration public string StandardError { get; protected set; } Property Value Type Description System.String StandardOutput Gets the text of the standard output. Declaration public string StandardOutput { get; protected set; } Property Value Type Description System.String"
  },
  "api/Unosquare.Swan.Components.ProcessRunner.ProcessDataReceivedCallback.html": {
    "href": "api/Unosquare.Swan.Components.ProcessRunner.ProcessDataReceivedCallback.html",
    "title": "Delegate ProcessRunner.ProcessDataReceivedCallback | Unosquare SWAN",
    "keywords": "Delegate ProcessRunner.ProcessDataReceivedCallback Defines a delegate to handle binary data reception from the standard output or standard error streams from a process Namespace : Unosquare.Swan.Components Assembly : cs.temp.dll.dll Syntax public delegate void ProcessDataReceivedCallback(byte[] processData, Process process); Parameters Type Name Description System.Byte [] processData The process data. Process process The process."
  },
  "api/Unosquare.Swan.ConnectionAcceptedEventArgs.html": {
    "href": "api/Unosquare.Swan.ConnectionAcceptedEventArgs.html",
    "title": "Class ConnectionAcceptedEventArgs | Unosquare SWAN",
    "keywords": "Class ConnectionAcceptedEventArgs The event arguments for when connections are accepted Inheritance System.Object System.EventArgs ConnectionAcceptedEventArgs ConnectionAcceptingEventArgs Inherited Members System.EventArgs.Empty System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public class ConnectionAcceptedEventArgs : EventArgs Constructors ConnectionAcceptedEventArgs(TcpClient) Initializes a new instance of the ConnectionAcceptedEventArgs class. Declaration public ConnectionAcceptedEventArgs(TcpClient client) Parameters Type Name Description TcpClient client The client. Properties Client Gets the client. Declaration public TcpClient Client { get; } Property Value Type Description TcpClient See Also System.EventArgs"
  },
  "api/Unosquare.Swan.ConnectionAcceptingEventArgs.html": {
    "href": "api/Unosquare.Swan.ConnectionAcceptingEventArgs.html",
    "title": "Class ConnectionAcceptingEventArgs | Unosquare SWAN",
    "keywords": "Class ConnectionAcceptingEventArgs Occurs before a connection is accepted. Set the Cancel property to true to prevent the connection from being accepted. Inheritance System.Object System.EventArgs ConnectionAcceptedEventArgs ConnectionAcceptingEventArgs Inherited Members ConnectionAcceptedEventArgs.Client System.EventArgs.Empty System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public class ConnectionAcceptingEventArgs : ConnectionAcceptedEventArgs Constructors ConnectionAcceptingEventArgs(TcpClient) Initializes a new instance of the ConnectionAcceptingEventArgs class. Declaration public ConnectionAcceptingEventArgs(TcpClient client) Parameters Type Name Description TcpClient client The client. Properties Cancel Setting Cancel to true rejects the new TcpClient Declaration public bool Cancel { get; set; } Property Value Type Description System.Boolean See Also ConnectionAcceptedEventArgs"
  },
  "api/Unosquare.Swan.ConnectionDataReceivedEventArgs.html": {
    "href": "api/Unosquare.Swan.ConnectionDataReceivedEventArgs.html",
    "title": "Class ConnectionDataReceivedEventArgs | Unosquare SWAN",
    "keywords": "Class ConnectionDataReceivedEventArgs Event arguments for when data is received. Inheritance System.Object System.EventArgs ConnectionDataReceivedEventArgs Inherited Members System.EventArgs.Empty System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public class ConnectionDataReceivedEventArgs : EventArgs Constructors ConnectionDataReceivedEventArgs(Byte[], ConnectionDataReceivedTrigger, Boolean) Initializes a new instance of the ConnectionDataReceivedEventArgs class. Declaration public ConnectionDataReceivedEventArgs(byte[] buffer, ConnectionDataReceivedTrigger trigger, bool moreAvailable) Parameters Type Name Description System.Byte [] buffer The buffer. ConnectionDataReceivedTrigger trigger The trigger. System.Boolean moreAvailable if set to true [more available]. Properties Buffer Gets the buffer. Declaration public byte[] Buffer { get; } Property Value Type Description System.Byte [] HasMoreAvailable Gets a value indicating whether the receive buffer has more bytes available Declaration public bool HasMoreAvailable { get; } Property Value Type Description System.Boolean Trigger Gets the cause as to why this event was thrown Declaration public ConnectionDataReceivedTrigger Trigger { get; } Property Value Type Description ConnectionDataReceivedTrigger Methods GetStringFromBuffer(Byte[], Encoding) Gets the string from the given buffer. Declaration public static string GetStringFromBuffer(byte[] buffer, Encoding encoding) Parameters Type Name Description System.Byte [] buffer The buffer. System.Text.Encoding encoding The encoding. Returns Type Description System.String GetStringFromBuffer(Encoding) Gets the string from buffer. Declaration public string GetStringFromBuffer(Encoding encoding) Parameters Type Name Description System.Text.Encoding encoding The encoding. Returns Type Description System.String See Also System.EventArgs"
  },
  "api/Unosquare.Swan.ConnectionDataReceivedTrigger.html": {
    "href": "api/Unosquare.Swan.ConnectionDataReceivedTrigger.html",
    "title": "Enum ConnectionDataReceivedTrigger | Unosquare SWAN",
    "keywords": "Enum ConnectionDataReceivedTrigger Enumerates the possible causes of the DataReceived event occurring. Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public enum ConnectionDataReceivedTrigger Fields Name Description BlockSizeReached The block size reached BufferFull The buffer was full Flush The trigger was a forceful flush of the buffer NewLineSequenceEncountered The new line sequence bytes were received"
  },
  "api/Unosquare.Swan.Definitions.SmtpAuthMethods.html": {
    "href": "api/Unosquare.Swan.Definitions.SmtpAuthMethods.html",
    "title": "Class Definitions.SmtpAuthMethods | Unosquare SWAN",
    "keywords": "Class Definitions.SmtpAuthMethods Lists the AUTH methods supported by default. Inheritance System.Object Definitions.SmtpAuthMethods Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public class SmtpAuthMethods Fields Login The login method Declaration public const string Login = \"LOGIN\" Field Value Type Description System.String Plain The plain method Declaration public const string Plain = \"PLAIN\" Field Value Type Description System.String"
  },
  "api/Unosquare.Swan.Definitions.html": {
    "href": "api/Unosquare.Swan.Definitions.html",
    "title": "Class Definitions | Unosquare SWAN",
    "keywords": "Class Definitions Contains useful constants and definitions Inheritance System.Object Definitions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public static class Definitions Fields BasicTypesInfo The basic types information Declaration public static readonly Dictionary<Type, ExtendedTypeInfo> BasicTypesInfo Field Value Type Description System.Collections.Generic.Dictionary < System.Type , ExtendedTypeInfo > CurrentAnsiEncoding The encoding associated with the default ANSI code page in the operating system's regional and language settings Declaration public static readonly Encoding CurrentAnsiEncoding Field Value Type Description System.Text.Encoding DnsDefaultPort The DNS default port Declaration public const int DnsDefaultPort = 53 Field Value Type Description System.Int32 NtpDefaultPort The NTP default port Declaration public const int NtpDefaultPort = 123 Field Value Type Description System.Int32 SmtpDataCommandTerminator The string sequence that delimits the end of the DATA command Declaration public const string SmtpDataCommandTerminator = \"\\r\\n.\\r\\n\" Field Value Type Description System.String SmtpGroupableCommandNames Defines the groupable command names according to: https://tools.ietf.org/html/rfc2920 Declaration public static readonly SmtpCommandNames[] SmtpGroupableCommandNames Field Value Type Description SmtpCommandNames [] SmtpStatelessCommandNames The stateless command names (i.e. the commands that don't require initiation from the client) Declaration public static readonly SmtpCommandNames[] SmtpStatelessCommandNames Field Value Type Description SmtpCommandNames [] Windows1252Encoding The MS Windows codepage 1252 encoding used in some legacy scenarios such as default CSV text encoding from Excel Declaration public static readonly Encoding Windows1252Encoding Field Value Type Description System.Text.Encoding Properties AllBasicNullableValueTypes Gets all nullable value types. i.e. excludes string and all basic value types Declaration public static List<Type> AllBasicNullableValueTypes { get; } Property Value Type Description System.Collections.Generic.List < System.Type > AllBasicTypes Contains all basic types, including string, date time, and all of their nullable counterparts Declaration public static List<Type> AllBasicTypes { get; } Property Value Type Description System.Collections.Generic.List < System.Type > AllBasicValueAndStringTypes Contains all basic value types including the string type. i.e. excludes nullables Declaration public static List<Type> AllBasicValueAndStringTypes { get; } Property Value Type Description System.Collections.Generic.List < System.Type > AllBasicValueTypes Contains all basic value types. i.e. excludes string and nullables Declaration public static List<Type> AllBasicValueTypes { get; } Property Value Type Description System.Collections.Generic.List < System.Type > AllNumericTypes Gets all numeric types including their nullable counterparts. Note that Booleans and Guids are not considered numeric types Declaration public static List<Type> AllNumericTypes { get; } Property Value Type Description System.Collections.Generic.List < System.Type > AllNumericValueTypes Gets all numeric types without their nullable counterparts. Note that Booleans and Guids are not considered numeric types Declaration public static List<Type> AllNumericValueTypes { get; } Property Value Type Description System.Collections.Generic.List < System.Type >"
  },
  "api/Unosquare.Swan.DependencyContainerAutoRegistrationException.html": {
    "href": "api/Unosquare.Swan.DependencyContainerAutoRegistrationException.html",
    "title": "Class DependencyContainerAutoRegistrationException | Unosquare SWAN",
    "keywords": "Class DependencyContainerAutoRegistrationException Auto-registration Exception Inheritance System.Object System.Exception DependencyContainerAutoRegistrationException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public class DependencyContainerAutoRegistrationException : Exception, ISerializable, _Exception Constructors DependencyContainerAutoRegistrationException(Type, IEnumerable<Type>) Initializes a new instance of the DependencyContainerAutoRegistrationException class. Declaration public DependencyContainerAutoRegistrationException(Type registerType, IEnumerable<Type> types) Parameters Type Name Description System.Type registerType Type of the register. System.Collections.Generic.IEnumerable < System.Type > types The types. DependencyContainerAutoRegistrationException(Type, IEnumerable<Type>, Exception) Initializes a new instance of the DependencyContainerAutoRegistrationException class. Declaration public DependencyContainerAutoRegistrationException(Type registerType, IEnumerable<Type> types, Exception innerException) Parameters Type Name Description System.Type registerType Type of the register. System.Collections.Generic.IEnumerable < System.Type > types The types. System.Exception innerException The inner exception. See Also System.Exception"
  },
  "api/Unosquare.Swan.DependencyContainerConstructorResolutionException.html": {
    "href": "api/Unosquare.Swan.DependencyContainerConstructorResolutionException.html",
    "title": "Class DependencyContainerConstructorResolutionException | Unosquare SWAN",
    "keywords": "Class DependencyContainerConstructorResolutionException Constructor Resolution Exception Inheritance System.Object System.Exception DependencyContainerConstructorResolutionException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public class DependencyContainerConstructorResolutionException : Exception, ISerializable, _Exception Constructors DependencyContainerConstructorResolutionException(String) Initializes a new instance of the DependencyContainerConstructorResolutionException class. Declaration public DependencyContainerConstructorResolutionException(string message) Parameters Type Name Description System.String message The message that describes the error. DependencyContainerConstructorResolutionException(String, Exception) Initializes a new instance of the DependencyContainerConstructorResolutionException class. Declaration public DependencyContainerConstructorResolutionException(string message, Exception innerException) Parameters Type Name Description System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. DependencyContainerConstructorResolutionException(Type) Initializes a new instance of the DependencyContainerConstructorResolutionException class. Declaration public DependencyContainerConstructorResolutionException(Type type) Parameters Type Name Description System.Type type The type. DependencyContainerConstructorResolutionException(Type, Exception) Initializes a new instance of the DependencyContainerConstructorResolutionException class. Declaration public DependencyContainerConstructorResolutionException(Type type, Exception innerException) Parameters Type Name Description System.Type type The type. System.Exception innerException The inner exception. See Also System.Exception"
  },
  "api/Unosquare.Swan.DependencyContainerRegistrationException.html": {
    "href": "api/Unosquare.Swan.DependencyContainerRegistrationException.html",
    "title": "Class DependencyContainerRegistrationException | Unosquare SWAN",
    "keywords": "Class DependencyContainerRegistrationException Generic Constraint Registration Exception Inheritance System.Object System.Exception DependencyContainerRegistrationException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public class DependencyContainerRegistrationException : Exception, ISerializable, _Exception Constructors DependencyContainerRegistrationException(Type, String) Initializes a new instance of the DependencyContainerRegistrationException class. Declaration public DependencyContainerRegistrationException(Type type, string method) Parameters Type Name Description System.Type type The type. System.String method The method. DependencyContainerRegistrationException(Type, String, Exception) Initializes a new instance of the DependencyContainerRegistrationException class. Declaration public DependencyContainerRegistrationException(Type type, string method, Exception innerException) Parameters Type Name Description System.Type type The type. System.String method The method. System.Exception innerException The inner exception. DependencyContainerRegistrationException(Type, Type) Initializes a new instance of the DependencyContainerRegistrationException class. Declaration public DependencyContainerRegistrationException(Type registerType, Type implementationType) Parameters Type Name Description System.Type registerType Type of the register. System.Type implementationType Type of the implementation. DependencyContainerRegistrationException(Type, Type, Exception) Initializes a new instance of the DependencyContainerRegistrationException class. Declaration public DependencyContainerRegistrationException(Type registerType, Type implementationType, Exception innerException) Parameters Type Name Description System.Type registerType Type of the register. System.Type implementationType Type of the implementation. System.Exception innerException The inner exception. See Also System.Exception"
  },
  "api/Unosquare.Swan.DependencyContainerRegistrationTypeException.html": {
    "href": "api/Unosquare.Swan.DependencyContainerRegistrationTypeException.html",
    "title": "Class DependencyContainerRegistrationTypeException | Unosquare SWAN",
    "keywords": "Class DependencyContainerRegistrationTypeException Registration Type Exception Inheritance System.Object System.Exception DependencyContainerRegistrationTypeException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public class DependencyContainerRegistrationTypeException : Exception, ISerializable, _Exception Constructors DependencyContainerRegistrationTypeException(Type, String) Initializes a new instance of the DependencyContainerRegistrationTypeException class. Declaration public DependencyContainerRegistrationTypeException(Type type, string factory) Parameters Type Name Description System.Type type The type. System.String factory The factory. DependencyContainerRegistrationTypeException(Type, String, Exception) Initializes a new instance of the DependencyContainerRegistrationTypeException class. Declaration public DependencyContainerRegistrationTypeException(Type type, string factory, Exception innerException) Parameters Type Name Description System.Type type The type. System.String factory The factory. System.Exception innerException The inner exception. See Also System.Exception"
  },
  "api/Unosquare.Swan.DependencyContainerResolutionException.html": {
    "href": "api/Unosquare.Swan.DependencyContainerResolutionException.html",
    "title": "Class DependencyContainerResolutionException | Unosquare SWAN",
    "keywords": "Class DependencyContainerResolutionException An exception for dependency resolutions Inheritance System.Object System.Exception DependencyContainerResolutionException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public class DependencyContainerResolutionException : Exception, ISerializable, _Exception Constructors DependencyContainerResolutionException(Type) Initializes a new instance of the DependencyContainerResolutionException class. Declaration public DependencyContainerResolutionException(Type type) Parameters Type Name Description System.Type type The type. DependencyContainerResolutionException(Type, Exception) Initializes a new instance of the DependencyContainerResolutionException class. Declaration public DependencyContainerResolutionException(Type type, Exception innerException) Parameters Type Name Description System.Type type The type. System.Exception innerException The inner exception. See Also System.Exception"
  },
  "api/Unosquare.Swan.DependencyContainerWeakReferenceException.html": {
    "href": "api/Unosquare.Swan.DependencyContainerWeakReferenceException.html",
    "title": "Class DependencyContainerWeakReferenceException | Unosquare SWAN",
    "keywords": "Class DependencyContainerWeakReferenceException Weak Reference Exception Inheritance System.Object System.Exception DependencyContainerWeakReferenceException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public class DependencyContainerWeakReferenceException : Exception, ISerializable, _Exception Constructors DependencyContainerWeakReferenceException(Type) Initializes a new instance of the DependencyContainerWeakReferenceException class. Declaration public DependencyContainerWeakReferenceException(Type type) Parameters Type Name Description System.Type type The type. DependencyContainerWeakReferenceException(Type, Exception) Initializes a new instance of the DependencyContainerWeakReferenceException class. Declaration public DependencyContainerWeakReferenceException(Type type, Exception innerException) Parameters Type Name Description System.Type type The type. System.Exception innerException The inner exception. See Also System.Exception"
  },
  "api/Unosquare.Swan.DnsResponseCode.html": {
    "href": "api/Unosquare.Swan.DnsResponseCode.html",
    "title": "Enum DnsResponseCode | Unosquare SWAN",
    "keywords": "Enum DnsResponseCode Enumerates the different DNS query response codes Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public enum DnsResponseCode Fields Name Description FormatError No error NameError Server failure error NoError No error NotAuth Not authorized error NotImplemented Name error NotZone Not zone error NXRRSet NXRR Set error Refused Not implemented error ServerFailure Format error YXDomain Refused error YXRRSet YXRR error"
  },
  "api/Unosquare.Swan.Endianness.html": {
    "href": "api/Unosquare.Swan.Endianness.html",
    "title": "Enum Endianness | Unosquare SWAN",
    "keywords": "Enum Endianness Defines Endianness, big or little Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public enum Endianness Fields Name Description Big In big endian, you store the most significant byte in the smallest address. Little In little endian, you store the least significant byte in the smallest address."
  },
  "api/Unosquare.Swan.Extensions.html": {
    "href": "api/Unosquare.Swan.Extensions.html",
    "title": "Class Extensions | Unosquare SWAN",
    "keywords": "Class Extensions Provides various extension methods Inheritance System.Object Extensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public static class Extensions Methods Append(MemoryStream, Byte[]) Appends the Memory Stream with the specified buffer. Declaration public static MemoryStream Append(this MemoryStream stream, byte[] buffer) Parameters Type Name Description System.IO.MemoryStream stream The stream. System.Byte [] buffer The buffer. Returns Type Description System.IO.MemoryStream Append(MemoryStream, IEnumerable<Byte[]>) Appends the Memory Stream with the specified set of buffers. Declaration public static MemoryStream Append(this MemoryStream stream, IEnumerable<byte[]> buffers) Parameters Type Name Description System.IO.MemoryStream stream The stream. System.Collections.Generic.IEnumerable < System.Byte []> buffers The buffers. Returns Type Description System.IO.MemoryStream Append(MemoryStream, IEnumerable<Byte>) Appends the Memory Stream with the specified buffer. Declaration public static MemoryStream Append(this MemoryStream stream, IEnumerable<byte> buffer) Parameters Type Name Description System.IO.MemoryStream stream The stream. System.Collections.Generic.IEnumerable < System.Byte > buffer The buffer. Returns Type Description System.IO.MemoryStream Assembly(Type) Assemblies the specified type. Declaration public static Assembly Assembly(this Type type) Parameters Type Name Description System.Type type The type. Returns Type Description System.Reflection.Assembly BaseType(Type) Bases the type. Declaration public static Type BaseType(this Type type) Parameters Type Name Description System.Type type The type. Returns Type Description System.Type Benchmark(Action) Measures the elapsed time of the given action as a TimeSpan This method uses a high precision Stopwatch. Declaration public static TimeSpan Benchmark(this Action target) Parameters Type Name Description System.Action target The target. Returns Type Description System.TimeSpan Clamp<T>(T, T, T) Clamps the specified value between the minimum and the maximum Declaration public static T Clamp<T>(this T value, T min, T max)where T : struct, IComparable Parameters Type Name Description T value The value. T min The minimum. T max The maximum. Returns Type Description T Type Parameters Name Description T ComputeMD5(Byte[], Boolean) Computes the MD5 hash of the given byte array. Declaration public static byte[] ComputeMD5(this byte[] data, bool createHasher = false) Parameters Type Name Description System.Byte [] data The data. System.Boolean createHasher if set to true [create hasher]. Returns Type Description System.Byte [] ComputeMD5(Stream, Boolean) Computes the MD5 hash of the given stream. Do not use for large streams as this reads ALL bytes at once Declaration public static byte[] ComputeMD5(this Stream stream, bool createHasher = false) Parameters Type Name Description System.IO.Stream stream The stream. System.Boolean createHasher if set to true [create hasher]. Returns Type Description System.Byte [] ComputeMD5(String, Boolean) Computes the MD5 hash of the given string using UTF8 byte encoding. Declaration public static byte[] ComputeMD5(this string inputString, bool createHasher = false) Parameters Type Name Description System.String inputString The input string. System.Boolean createHasher if set to true [create hasher]. Returns Type Description System.Byte [] ComputeSha1(String, Boolean) Computes the SHA-1 hash of the given string using UTF8 byte encoding. Declaration public static byte[] ComputeSha1(this string inputString, bool createHasher = false) Parameters Type Name Description System.String inputString The input string. System.Boolean createHasher if set to true [create hasher]. Returns Type Description System.Byte [] ComputeSha256(String, Boolean) Computes the SHA-256 hash of the given string using UTF8 byte encoding. Declaration public static byte[] ComputeSha256(this string inputString, bool createHasher = false) Parameters Type Name Description System.String inputString The input string. System.Boolean createHasher if set to true [create hasher]. Returns Type Description System.Byte [] ComputeSha512(String, Boolean) Computes the SHA-512 hash of the given string using UTF8 byte encoding. Declaration public static byte[] ComputeSha512(this string inputString, bool createHasher = false) Parameters Type Name Description System.String inputString The input string. System.Boolean createHasher if set to true [create hasher]. Returns Type Description System.Byte [] Contains(Byte[], Byte[]) Determines whether the buffer contains the specified sequence Declaration public static bool Contains(this byte[] buffer, params byte[] sequence) Parameters Type Name Description System.Byte [] buffer The buffer. System.Byte [] sequence The sequence. Returns Type Description System.Boolean Contains(String, Char[]) Determines whether the specified System.String contains any of characters in the specified array of System.Char . Declaration public static bool Contains(this string value, params char[] chars) Parameters Type Name Description System.String value A System.String to test. System.Char [] chars An array of System.Char that contains characters to find. Returns Type Description System.Boolean true if value contains any of chars ; otherwise, false . ConvertHexadecimalToBytes(String) Converts a set of hexadecimal characters (uppercase or lowercase) to a byte array. String length must be a multiple of 2 and any prefix (such as 0x) has to be avoided for this to work properly Declaration public static byte[] ConvertHexadecimalToBytes(this string hex) Parameters Type Name Description System.String hex The hexadecimal. Returns Type Description System.Byte [] CopyPropertiesTo(IDictionary<String, Object>, Object, String[]) Iterates over the keys of the source and tries to write a compatible value to a public, instance, writable property in the destination. This method only supports basic types and it is not multi level Declaration public static int CopyPropertiesTo(this IDictionary<string, object> source, object target, string[] ignoreProperties) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.Object > source The source. System.Object target The target. System.String [] ignoreProperties The ignore properties. Returns Type Description System.Int32 CopyPropertiesTo(Object, Object, String[]) Iterates over the public, instance, readable properties of the source and tries to write a compatible value to a public, instance, writable property in the destination This method only supports basic types and it is not multi level Declaration public static int CopyPropertiesTo(this object source, object target, string[] ignoreProperties) Parameters Type Name Description System.Object source The source. System.Object target The destination. System.String [] ignoreProperties The ignore properties. Returns Type Description System.Int32 Returns the number of properties that were successfully copied CopyPropertiesTo<T>(T, Object) Iterates over the public, instance, readable properties of the source and tries to write a compatible value to a public, instance, writable property in the destination This method only supports basic types and it is not multi level Declaration public static int CopyPropertiesTo<T>(this T source, object target) Parameters Type Name Description T source The source. System.Object target The target. Returns Type Description System.Int32 Type Parameters Name Description T The type of the source. CopyPropertiesToNew<T>(Object, String[]) Copies the properties to new. Declaration public static T CopyPropertiesToNew<T>(this object source, string[] ignoreProperties = null) Parameters Type Name Description System.Object source The source. System.String [] ignoreProperties The ignore properties. Returns Type Description T Type Parameters Name Description T DateRange(DateTime, DateTime) Creates a date's range. Declaration public static IEnumerable<DateTime> DateRange(this DateTime startDate, DateTime endDate) Parameters Type Name Description System.DateTime startDate The start date. System.DateTime endDate The end date. Returns Type Description System.Collections.Generic.IEnumerable < System.DateTime > DeepClone(Byte[]) Colones the specified buffer, byte by byte Declaration public static byte[] DeepClone(this byte[] buffer) Parameters Type Name Description System.Byte [] buffer The buffer. Returns Type Description System.Byte [] EndsWith(Byte[], Byte[]) Determines if the specified buffer ends with the given sequence of bytes Declaration public static bool EndsWith(this byte[] buffer, params byte[] sequence) Parameters Type Name Description System.Byte [] buffer The buffer. System.Byte [] sequence The sequence. Returns Type Description System.Boolean ExceptionMessage(Exception, String) Retrieves the exception message, plus all the inner exception messages separated by new lines Declaration public static string ExceptionMessage(this Exception ex, string priorMessage = \"\") Parameters Type Name Description System.Exception ex The ex. System.String priorMessage The prior message. Returns Type Description System.String FormatBytes(Int64) Formats a long into the closest bytes string. Declaration public static string FormatBytes(this long bytes) Parameters Type Name Description System.Int64 bytes The bytes length Returns Type Description System.String FormatBytes(UInt64) Formats a long into the closest bytes string. Declaration public static string FormatBytes(this ulong bytes) Parameters Type Name Description System.UInt64 bytes The bytes length Returns Type Description System.String GetAllTypes(Assembly) Gets all types within an assembly in a safe manner. Declaration public static Type[] GetAllTypes(this Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly The assembly. Returns Type Description System.Type [] GetBitValueAt(Byte, Byte) Gets the bit value at the given offset. Declaration public static byte GetBitValueAt(this byte b, byte offset) Parameters Type Name Description System.Byte b The b. System.Byte offset The offset. Returns Type Description System.Byte GetBitValueAt(Byte, Byte, Byte) Gets the bit value at the given offset. Declaration public static byte GetBitValueAt(this byte b, byte offset, byte length) Parameters Type Name Description System.Byte b The b. System.Byte offset The offset. System.Byte length The length. Returns Type Description System.Byte GetCustomAttributes(Type, Type, Boolean) Gets the custom attributes. Declaration public static Attribute[] GetCustomAttributes(this Type type, Type attributeType, bool inherit) Parameters Type Name Description System.Type type The type. System.Type attributeType Type of the attribute. System.Boolean inherit if set to true [inherit]. Returns Type Description System.Attribute [] GetDefault(Type) The closest programmatic equivalent of default(T) Declaration public static object GetDefault(this Type type) Parameters Type Name Description System.Type type The type. Returns Type Description System.Object GetIndexOf(Byte[], Byte[], Int32) Returns the first instance of the matched sequence based on the given offset. If nomatches are found then this method returns -1 Declaration public static int GetIndexOf(this byte[] buffer, byte[] sequence, int offset = 0) Parameters Type Name Description System.Byte [] buffer The buffer. System.Byte [] sequence The sequence. System.Int32 offset The offset. Returns Type Description System.Int32 GetMethod(Type, BindingFlags, String, Type[], Type[]) Gets a method from a type given the method name, binding flags, generic types and parameter types Declaration public static MethodInfo GetMethod(this Type sourceType, BindingFlags bindingFlags, string methodName, Type[] genericTypes, Type[] parameterTypes) Parameters Type Name Description System.Type sourceType Type of the source. System.Reflection.BindingFlags bindingFlags The binding flags. System.String methodName Name of the method. System.Type [] genericTypes The generic types. System.Type [] parameterTypes The parameter types. Returns Type Description System.Reflection.MethodInfo Exceptions Type Condition System.Reflection.AmbiguousMatchException Humanize(String) Humanizes (make more human-readable) an identifier-style string in either camel case or snake case. For example, CamelCase will be converted to Camel Case and Snake_Case will be converted to Snake Case. Declaration public static string Humanize(this string identifierString) Parameters Type Name Description System.String identifierString The identifier-style string. Returns Type Description System.String Indent(String, Int32) Indents the specified multi-line text with the given amount of leading spaces per line. Declaration public static string Indent(this string text, int spaces = 4) Parameters Type Name Description System.String text The text. System.Int32 spaces The spaces. Returns Type Description System.String IsAbstract(Type) Determines whether this instance is abstract. Declaration public static bool IsAbstract(this Type type) Parameters Type Name Description System.Type type The type. Returns Type Description System.Boolean true if the specified type is abstract; otherwise, false . IsBetween<T>(T, T, T) Determines whether the specified value is between a minimum and a maximum value. Declaration public static bool IsBetween<T>(this T value, T min, T max)where T : struct, IComparable Parameters Type Name Description T value The value. T min The minimum. T max The maximum. Returns Type Description System.Boolean true if the specified minimum is between; otherwise, false . Type Parameters Name Description T IsClass(Type) Determines whether this instance is class. Declaration public static bool IsClass(this Type type) Parameters Type Name Description System.Type type The type. Returns Type Description System.Boolean true if the specified type is class; otherwise, false . IsCollection(Type) Determines whether this type is compatible with ICollection. Declaration public static bool IsCollection(this Type sourceType) Parameters Type Name Description System.Type sourceType The type. Returns Type Description System.Boolean IsDefined(Type, Type, Boolean) Determines whether the specified attribute type is defined. Declaration public static bool IsDefined(this Type type, Type attributeType, bool inherit) Parameters Type Name Description System.Type type The type. System.Type attributeType Type of the attribute. System.Boolean inherit if set to true [inherit]. Returns Type Description System.Boolean true if the specified attribute type is defined; otherwise, false . IsEqualTo(Byte[], Byte[]) Determines whether the buffer exactly matches, byte by byte the specified sequence. Declaration public static bool IsEqualTo(this byte[] buffer, params byte[] sequence) Parameters Type Name Description System.Byte [] buffer The buffer. System.Byte [] sequence The sequence. Returns Type Description System.Boolean IsGenericParameter(Type) Determines whether [is generic parameter]. Declaration public static bool IsGenericParameter(this Type type) Parameters Type Name Description System.Type type The type. Returns Type Description System.Boolean true if [is generic parameter] [the specified type]; otherwise, false . IsGenericType(Type) Determines whether [is generic type]. Declaration public static bool IsGenericType(this Type type) Parameters Type Name Description System.Type type The type. Returns Type Description System.Boolean true if [is generic type] [the specified type]; otherwise, false . IsGenericTypeDefinition(Type) Determines whether [is generic type definition]. Declaration public static bool IsGenericTypeDefinition(this Type type) Parameters Type Name Description System.Type type The type. Returns Type Description System.Boolean true if [is generic type definition] [the specified type]; otherwise, false . IsIEnumerable(Type) Determines whether [is i enumerable request]. Declaration public static bool IsIEnumerable(this Type type) Parameters Type Name Description System.Type type The type. Returns Type Description System.Boolean true if [is i enumerable request] [the specified type]; otherwise, false . IsInterface(Type) Determines whether this instance is interface. Declaration public static bool IsInterface(this Type type) Parameters Type Name Description System.Type type The type. Returns Type Description System.Boolean true if the specified type is interface; otherwise, false . IsPrimitive(Type) Determines whether this instance is primitive. Declaration public static bool IsPrimitive(this Type type) Parameters Type Name Description System.Type type The type. Returns Type Description System.Boolean true if the specified type is primitive; otherwise, false . IsPrivateAddress(IPAddress) Determines whether the IP address is private Declaration public static bool IsPrivateAddress(this IPAddress address) Parameters Type Name Description IPAddress address The IP address. Returns Type Description System.Boolean IsValueType(Type) Determines whether [is value type]. Declaration public static bool IsValueType(this Type type) Parameters Type Name Description System.Type type The type. Returns Type Description System.Boolean true if [is value type] [the specified type]; otherwise, false . ReadBytesAsync(Stream, Int32, CancellationToken) Reads the bytes asynchronous. Declaration public static Task<byte[]> ReadBytesAsync(this Stream stream, int length, CancellationToken ct = null) Parameters Type Name Description System.IO.Stream stream The stream. System.Int32 length The length. System.Threading.CancellationToken ct The cancellation token. Returns Type Description System.Threading.Tasks.Task < System.Byte []> ReadBytesAsync(Stream, Int64, Int32, CancellationToken) Reads the bytes asynchronous. Declaration public static Task<byte[]> ReadBytesAsync(this Stream stream, long length, int bufferLength, CancellationToken ct = null) Parameters Type Name Description System.IO.Stream stream The stream. System.Int64 length The length. System.Int32 bufferLength Length of the buffer. System.Threading.CancellationToken ct The cancellation token. Returns Type Description System.Threading.Tasks.Task < System.Byte []> RemoveControlChars(String) Removes all control characters from a string, including new line sequences. Declaration public static string RemoveControlChars(this string input) Parameters Type Name Description System.String input The input. Returns Type Description System.String RemoveControlCharsExcept(String, Char[]) Removes the control characters from a string except for those specified. Declaration public static string RemoveControlCharsExcept(this string input, params char[] excludeChars) Parameters Type Name Description System.String input The input. System.Char [] excludeChars When specified, these characters will not be removed. Returns Type Description System.String Retry(Action, TimeSpan, Int32) Does the specified action. Declaration public static void Retry(this Action action, TimeSpan retryInterval = null, int retryCount = 3) Parameters Type Name Description System.Action action The action. System.TimeSpan retryInterval The retry interval. System.Int32 retryCount The retry count. Retry<T>(Func<T>, TimeSpan, Int32) Does the specified action. Declaration public static T Retry<T>(this Func<T> action, TimeSpan retryInterval = null, int retryCount = 3) Parameters Type Name Description System.Func <T> action The action. System.TimeSpan retryInterval The retry interval. System.Int32 retryCount The retry count. Returns Type Description T Type Parameters Name Description T Exceptions Type Condition System.AggregateException RoundUp(DateTime, TimeSpan) Rounds up a date to match a timespan. Declaration public static DateTime RoundUp(this DateTime dt, TimeSpan d) Parameters Type Name Description System.DateTime dt The datetime. System.TimeSpan d The timespan to match. Returns Type Description System.DateTime SetBitValueAt(Byte, Byte, Byte) Sets the bit value at the given offset. Declaration public static byte SetBitValueAt(this byte b, byte offset, byte value) Parameters Type Name Description System.Byte b The b. System.Byte offset The offset. System.Byte value The value. Returns Type Description System.Byte SetBitValueAt(Byte, Byte, Byte, Byte) Sets the bit value at the given offset. Declaration public static byte SetBitValueAt(this byte b, byte offset, byte length, byte value) Parameters Type Name Description System.Byte b The b. System.Byte offset The offset. System.Byte length The length. System.Byte value The value. Returns Type Description System.Byte Slice(String, Int32, Int32) Retrieves a section of the string, inclusive of both, the start and end indexes. This behavior is unlike JavaScript's Slice behavior where the end index is non-inclusive If the string is null it returns an empty string Declaration public static string Slice(this string str, int startIndex, int endIndex) Parameters Type Name Description System.String str The string. System.Int32 startIndex The start index. System.Int32 endIndex The end index. Returns Type Description System.String SliceLength(String, Int32, Int32) Gets a part of the string clamping the length and startIndex parameters to safe values. If the string is null it returns an empty string. This is basically just a safe version of string.Substring Declaration public static string SliceLength(this string str, int startIndex, int length) Parameters Type Name Description System.String str The string. System.Int32 startIndex The start index. System.Int32 length The length. Returns Type Description System.String Split(Byte[], Int32, Byte[]) Splits a byte array delimited by the specified sequence of bytes. Each individual element in the result will contain the split sequence terminator if it is found to be delimited by it. For example if you split [1,2,3,4] by a sequence of [2,3] this method will return a list with 2 byte arrays, one containing [1,2,3] and the second one containing 4. Use the Trim extension methods to remove terminator sequences. Declaration public static List<byte[]> Split(this byte[] buffer, int offset, params byte[] sequence) Parameters Type Name Description System.Byte [] buffer The buffer. System.Int32 offset The offset at which to start splitting bytes. Any bytes befor this will be discarded. System.Byte [] sequence The sequence. Returns Type Description System.Collections.Generic.List < System.Byte []> Exceptions Type Condition System.ArgumentNullException buffer or sequence StartsWith(Byte[], Byte[]) Determines if the specified buffer starts with the given sequence of bytes Declaration public static bool StartsWith(this byte[] buffer, params byte[] sequence) Parameters Type Name Description System.Byte [] buffer The buffer. System.Byte [] sequence The sequence. Returns Type Description System.Boolean Stringify(Object) Returns text representing the properties of the specified object in a human-readable format. While this method is fairly expensive computationally speaking, it provides an easy way to examine objects. Declaration public static string Stringify(this object obj) Parameters Type Name Description System.Object obj The object. Returns Type Description System.String SubArray<T>(T[], Int32, Int32) Retrieves a sub-array from the specified array . A sub-array starts at the specified element position in array . Declaration public static T[] SubArray<T>(this T[] array, int startIndex, int length) Parameters Type Name Description T[] array An array of T from which to retrieve a sub-array. System.Int32 startIndex An System.Int32 that represents the zero-based starting position of a sub-array in array . System.Int32 length An System.Int32 that represents the number of elements to retrieve. Returns Type Description T[] An array of T that receives a sub-array, or an empty array of T if any problems with the parameters. Type Parameters Name Description T The type of elements in array . SubArray<T>(T[], Int64, Int64) Retrieves a sub-array from the specified array . A sub-array starts at the specified element position in array . Declaration public static T[] SubArray<T>(this T[] array, long startIndex, long length) Parameters Type Name Description T[] array An array of T from which to retrieve a sub-array. System.Int64 startIndex A System.Int64 that represents the zero-based starting position of a sub-array in array . System.Int64 length A System.Int64 that represents the number of elements to retrieve. Returns Type Description T[] An array of T that receives a sub-array, or an empty array of T if any problems with the parameters. Type Parameters Name Description T The type of elements in array . TextPositionAt(String, Int32) Gets the line and column number (i.e. not index) of the specified character index. Useful to locate text in a multi-line string the same way a text editor does. Please not that the tuple contains first the line number and then the column number Declaration public static Tuple<int, int> TextPositionAt(this string str, int charIndex) Parameters Type Name Description System.String str The string. System.Int32 charIndex Index of the character. Returns Type Description System.Tuple < System.Int32 , System.Int32 > ToBase64(Byte[]) Converts an array of bytes to a base-64 encoded string Declaration public static string ToBase64(this byte[] bytes) Parameters Type Name Description System.Byte [] bytes The bytes. Returns Type Description System.String ToBytes<T>(T) Converts a struct to an array of bytes Declaration public static byte[] ToBytes<T>(this T obj)where T : struct Parameters Type Name Description T obj The object. Returns Type Description System.Byte [] Type Parameters Name Description T ToDashedHex(Byte[]) Converts an array of bytes to a sequence of dash-separated, hexadecimal, uppercase characters Declaration public static string ToDashedHex(this byte[] bytes) Parameters Type Name Description System.Byte [] bytes The bytes. Returns Type Description System.String ToDateTime(String) Parses a YYYY-MM-DD and optionally it time part, HH:II:SS into a DateTime Declaration public static DateTime ToDateTime(this string sortableDate) Parameters Type Name Description System.String sortableDate The sortable date. Returns Type Description System.DateTime Exceptions Type Condition System.ArgumentNullException sortableDate System.Exception System.ArgumentException Unable to parse sortable date and time. - sortableDate ToJson(Object, Boolean) Outputs JSON string representing this object Declaration public static string ToJson(this object obj, bool format = true) Parameters Type Name Description System.Object obj The object. System.Boolean format if set to true format the output. Returns Type Description System.String ToLines(String) Splits the specified text into r, n or rn separated lines Declaration public static string[] ToLines(this string text) Parameters Type Name Description System.String text The text. Returns Type Description System.String [] ToLowerHex(Byte[], Boolean) Converts an array of bytes to its lower-case, hexadecimal representation Declaration public static string ToLowerHex(this byte[] bytes, bool addPrefix = false) Parameters Type Name Description System.Byte [] bytes The bytes. System.Boolean addPrefix if set to true add the 0x prefix tot he output. Returns Type Description System.String ToSafeFilename(String) Makes the file name system safe. Declaration public static string ToSafeFilename(this string s) Parameters Type Name Description System.String s The s. Returns Type Description System.String ToSortableDate(DateTime) Converts the date to a YYYY-MM-DD string Declaration public static string ToSortableDate(this DateTime date) Parameters Type Name Description System.DateTime date The date. Returns Type Description System.String ToSortableDateTime(DateTime) Converts the date to a YYYY-MM-DD HH:II:SS string Declaration public static string ToSortableDateTime(this DateTime date) Parameters Type Name Description System.DateTime date The date. Returns Type Description System.String ToStringInvariant(Object) Returns a string that represents the given item It tries to use InvariantCulture if the ToString(IFormatProvider) overload exists. Declaration public static string ToStringInvariant(this object item) Parameters Type Name Description System.Object item The item. Returns Type Description System.String ToStringInvariant<T>(T) Returns a string that represents the given item It tries to use InvariantCulture if the ToString(IFormatProvider) overload exists. Declaration public static string ToStringInvariant<T>(this T item) Parameters Type Name Description T item The item. Returns Type Description System.String Type Parameters Name Description T ToStruct<T>(Byte[]) Converts an array of bytes into the given struct type Declaration public static T ToStruct<T>(this byte[] data)where T : struct Parameters Type Name Description System.Byte [] data The data. Returns Type Description T Type Parameters Name Description T ToStruct<T>(Byte[], Int32, Int32) Converts an array of bytes into the given struct type Declaration public static T ToStruct<T>(this byte[] data, int offset, int length)where T : struct Parameters Type Name Description System.Byte [] data The data. System.Int32 offset The offset. System.Int32 length The length. Returns Type Description T Type Parameters Name Description T ToText(Byte[]) Converts an array of bytes into text with UTF8 encoding Declaration public static string ToText(this byte[] buffer) Parameters Type Name Description System.Byte [] buffer The buffer. Returns Type Description System.String ToText(Byte[], Encoding) Converts an array of bytes into text with the specified encoding Declaration public static string ToText(this byte[] buffer, Encoding encoding) Parameters Type Name Description System.Byte [] buffer The buffer. System.Text.Encoding encoding The encoding. Returns Type Description System.String ToUInt32(IPAddress) Converts an IPv4 Address to its Unsigned, 32-bit integer representation. Declaration public static uint ToUInt32(this IPAddress address) Parameters Type Name Description IPAddress address The address. Returns Type Description System.UInt32 ToUnixEpochDate(DateTime) Get this datetime as a Unix epoch timestamp (seconds since Jan 1, 1970, midnight UTC). Declaration public static long ToUnixEpochDate(this DateTime date) Parameters Type Name Description System.DateTime date The date to convert. Returns Type Description System.Int64 Seconds since Unix epoch. ToUpperHex(Byte[], Boolean) Converts an array of bytes to its upper-case, hexadecimal representation Declaration public static string ToUpperHex(this byte[] bytes, bool addPrefix = false) Parameters Type Name Description System.Byte [] bytes The bytes. System.Boolean addPrefix if set to true [add prefix]. Returns Type Description System.String Trim(Byte[], Byte[]) Removes the specified sequence from the end and the start of the buffer if the buffer ends and/or starts with such sequence Declaration public static byte[] Trim(this byte[] buffer, params byte[] sequence) Parameters Type Name Description System.Byte [] buffer The buffer. System.Byte [] sequence The sequence. Returns Type Description System.Byte [] TrimEnd(Byte[], Byte[]) Removes the specified sequence from the end of the buffer if the buffer ends with such sequence Declaration public static byte[] TrimEnd(this byte[] buffer, params byte[] sequence) Parameters Type Name Description System.Byte [] buffer The buffer. System.Byte [] sequence The sequence. Returns Type Description System.Byte [] TrimStart(Byte[], Byte[]) Removes the specified sequence from the start of the buffer if the buffer begins with such sequence Declaration public static byte[] TrimStart(this byte[] buffer, params byte[] sequence) Parameters Type Name Description System.Byte [] buffer The buffer. System.Byte [] sequence The sequence. Returns Type Description System.Byte [] Truncate(String, Int32) Truncates the specified value. Declaration public static string Truncate(this string value, int maximumLength) Parameters Type Name Description System.String value The value. System.Int32 maximumLength The maximum length. Returns Type Description System.String"
  },
  "api/Unosquare.Swan.Formatters.CsvReader.html": {
    "href": "api/Unosquare.Swan.Formatters.CsvReader.html",
    "title": "Class CsvReader | Unosquare SWAN",
    "keywords": "Class CsvReader Represents a reader designed for CSV text. It is capable of deserializing objects from individual lines of CSV text, transforming CSV lines of text into objects, or simply reading the lines of CSV as an array of strings Inheritance System.Object CsvReader Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Formatters Assembly : cs.temp.dll.dll Syntax public class CsvReader : IDisposable Constructors CsvReader(Stream) Initializes a new instance of the CsvReader class. It automatically closes the stream when disposing this reader and uses the Windows 1253 encoding Declaration public CsvReader(Stream stream) Parameters Type Name Description System.IO.Stream stream The stream. CsvReader(Stream, Boolean, Encoding) Initializes a new instance of the CsvReader class. Declaration public CsvReader(Stream inputStream, bool leaveOpen, Encoding textEncoding) Parameters Type Name Description System.IO.Stream inputStream The stream. System.Boolean leaveOpen if set to true leaves the input stream open System.Text.Encoding textEncoding The text encoding. CsvReader(Stream, Encoding) Initializes a new instance of the CsvReader class. It will automatically close the stream upon disposing Declaration public CsvReader(Stream stream, Encoding textEncoding) Parameters Type Name Description System.IO.Stream stream The stream. System.Text.Encoding textEncoding The text encoding. CsvReader(String) Initializes a new instance of the CsvReader class. It uses the Windows 1252 Encoding by default and it automatically closes the file when this reader is disposed of. Declaration public CsvReader(string filename) Parameters Type Name Description System.String filename The filename. CsvReader(String, Encoding) Initializes a new instance of the CsvReader class. It automatically closes the file when disposing this reader Declaration public CsvReader(string filename, Encoding encoding) Parameters Type Name Description System.String filename The filename. System.Text.Encoding encoding The encoding. Properties Count Gets number of lines that have been read, including the headings Declaration public ulong Count { get; } Property Value Type Description System.UInt64 EndOfStream Gets a value indicating whether the stream reader is at the end of the stream In other words, if no more data can be read, this will be set to true. Declaration public bool EndOfStream { get; } Property Value Type Description System.Boolean true if [end of stream]; otherwise, false . EscapeCharacter Gets or sets the escape character. By default it is the double quote '\"' Declaration public char EscapeCharacter { get; set; } Property Value Type Description System.Char SeparatorCharacter Gets or sets the separator character. By default it is the comma character ',' Declaration public char SeparatorCharacter { get; set; } Property Value Type Description System.Char Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Implements System.IDisposable.Dispose() Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. LoadRecords<T>(String) Loads the records from the give file path. This method uses Windows 1252 encoding Declaration public static IList<T> LoadRecords<T>(string filePath)where T : new () Parameters Type Name Description System.String filePath The file path. Returns Type Description System.Collections.Generic.IList <T> Type Parameters Name Description T ReadHeadings() Reads a line of CSV text and stores the values read as a representation of the column names to be used for parsing objects. You have to call this method before calling ReadObject methods. Declaration public string[] ReadHeadings() Returns Type Description System.String [] Exceptions Type Condition System.InvalidOperationException Reading headings is only supported as the first read operation. or ReadHeadings System.IO.EndOfStreamException Cannot read past the end of the stream ReadLine() Reads a line of CSV text into an array of strings Declaration public string[] ReadLine() Returns Type Description System.String [] Exceptions Type Condition System.IO.EndOfStreamException Cannot read past the end of the stream ReadObject() Reads a line of CSV text, converting it into a dynamic object The property names correspond to the names of the CSV headings Declaration public IDictionary<string, object> ReadObject() Returns Type Description System.Collections.Generic.IDictionary < System.String , System.Object > ReadObject(IDictionary<String, String>) Reads a line of CSV text, converting it into a dynamic object in which properties correspond to the names of the headings Declaration public IDictionary<string, object> ReadObject(IDictionary<string, string> map) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > map The mappings between CSV headings (keys) and object properties (values) Returns Type Description System.Collections.Generic.IDictionary < System.String , System.Object > Exceptions Type Condition System.InvalidOperationException ReadHeadings System.IO.EndOfStreamException Cannot read past the end of the stream System.ArgumentNullException map ReadObject<T>() Reads a line of CSV text converting it into an object of the given type, and assuming the property names of the target type match the heading names of the file. Declaration public T ReadObject<T>()where T : new () Returns Type Description T Type Parameters Name Description T ReadObject<T>(IDictionary<String, String>) Reads a line of CSV text converting it into an object of the given type, using a map (or Dictionary) where the keys are the names of the headings and the values are the names of the instance properties in the given Type. Declaration public T ReadObject<T>(IDictionary<string, string> map)where T : new () Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > map The map of CSV headings (keys) and Type property names (values). Returns Type Description T Type Parameters Name Description T Exceptions Type Condition System.ArgumentNullException map System.InvalidOperationException ReadHeadings System.IO.EndOfStreamException Cannot read past the end of the stream ReadObject<T>(IDictionary<String, String>, ref T) Reads a line of CSV text converting it into an object of the given type, using a map (or Dictionary) where the keys are the names of the headings and the values are the names of the instance properties in the given Type. The result object must be already instantiated. Declaration public void ReadObject<T>(IDictionary<string, string> map, ref T result) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > map The map. T result The result. Type Parameters Name Description T Exceptions Type Condition System.ArgumentNullException map or result System.InvalidOperationException ReadHeadings System.IO.EndOfStreamException Cannot read past the end of the stream SkipRecord() Skips a line of CSV text. This operation does not increment the Count property and it is useful when you need to read the headings skipping over a few lines as Reading headings is only supported as the first read operation (i.e. while count is still 0) Declaration public void SkipRecord() Exceptions Type Condition System.IO.EndOfStreamException Cannot read past the end of the stream See Also System.IDisposable"
  },
  "api/Unosquare.Swan.Formatters.CsvWriter.html": {
    "href": "api/Unosquare.Swan.Formatters.CsvWriter.html",
    "title": "Class CsvWriter | Unosquare SWAN",
    "keywords": "Class CsvWriter A CSV writer useful for exporting a set of objects Inheritance System.Object CsvWriter Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Formatters Assembly : cs.temp.dll.dll Syntax public class CsvWriter : IDisposable Constructors CsvWriter(Stream) Initializes a new instance of the CsvWriter class. It uses the Windows 1252 encoding and automatically closes the stream upon disposing this writer Declaration public CsvWriter(Stream outputStream) Parameters Type Name Description System.IO.Stream outputStream The output stream. CsvWriter(Stream, Boolean, Encoding) Initializes a new instance of the CsvWriter class. Declaration public CsvWriter(Stream outputStream, bool leaveOpen, Encoding encoding) Parameters Type Name Description System.IO.Stream outputStream The output stream. System.Boolean leaveOpen if set to true [leave open]. System.Text.Encoding encoding The encoding. CsvWriter(Stream, Encoding) Initializes a new instance of the CsvWriter class. It automatically closes the stream when disposing this writer Declaration public CsvWriter(Stream outputStream, Encoding encoding) Parameters Type Name Description System.IO.Stream outputStream The output stream. System.Text.Encoding encoding The encoding. CsvWriter(String) Initializes a new instance of the CsvWriter class. It opens the file given file, automatically closes the stream upon disposing of this writer, and uses the Windows 1252 encoding Declaration public CsvWriter(string filename) Parameters Type Name Description System.String filename The filename. CsvWriter(String, Encoding) Initializes a new instance of the CsvWriter class. It opens the file given file, automatically closes the stream upon disposing of this writer, and uses the given text encoding for output Declaration public CsvWriter(string filename, Encoding encoding) Parameters Type Name Description System.String filename The filename. System.Text.Encoding encoding The encoding. Properties Count Gets number of lines that have been written, including the headings line Declaration public ulong Count { get; } Property Value Type Description System.UInt64 EscapeCharacter Gets or sets the escape character to use to escape field values Declaration public char EscapeCharacter { get; set; } Property Value Type Description System.Char IgnorePropertyNames Defines a list of properties to ignore when outputting CSV lines Declaration public List<string> IgnorePropertyNames { get; } Property Value Type Description System.Collections.Generic.List < System.String > NewLineSequence Gets or sets the new line character sequence to use when writing a line. Declaration public string NewLineSequence { get; set; } Property Value Type Description System.String SeparatorCharacter Gets or sets the field separator character. Declaration public char SeparatorCharacter { get; set; } Property Value Type Description System.Char Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Implements System.IDisposable.Dispose() Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposeAlsoManaged) Parameters Type Name Description System.Boolean disposeAlsoManaged true to release both managed and unmanaged resources; false to release only unmanaged resources. SaveRecords<T>(IEnumerable<T>, String) Saves the items to a CSV file. If the file exits, it overwrites it. If it does not, it creates it. It uses the Windows 1252 text encoding for output Declaration public static int SaveRecords<T>(IEnumerable<T> items, string filePath) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> items The items. System.String filePath The file path. Returns Type Description System.Int32 Type Parameters Name Description T WriteHeadings(IDictionary<String, Object>) Writes the headings. Declaration public void WriteHeadings(IDictionary<string, object> dictionary) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.Object > dictionary The dictionary. Exceptions Type Condition System.ArgumentNullException dictionary WriteHeadings(IDictionary) Writes the headings. Declaration public void WriteHeadings(IDictionary dictionary) Parameters Type Name Description System.Collections.IDictionary dictionary The dictionary. Exceptions Type Condition System.ArgumentNullException dictionary WriteHeadings(Type) Writes the headings. Declaration public void WriteHeadings(Type type) Parameters Type Name Description System.Type type The type. Exceptions Type Condition System.ArgumentNullException type WriteHeadings<T>() Writes the headings. Declaration public void WriteHeadings<T>() Type Parameters Name Description T WriteLine(Object[]) Writes a line of CSV text. Items are converted to strings. If items are found to be null, empty strings are written out. If items are not string, the ToStringInvariant() method is called on them Declaration public void WriteLine(params object[] items) Parameters Type Name Description System.Object [] items The items. WriteObject(Object) Writes a row of CSV text. It handles the special cases where the object is a dynamic object or and array. It also handles non-collection objects fine. If you do not like the way the output is handled, you can simply write an extension method of this class and use the WriteLine method instead. Declaration public void WriteObject(object item) Parameters Type Name Description System.Object item The item. Exceptions Type Condition System.ArgumentNullException item WriteObject<T>(T) Writes a row of CSV text. It handles the special cases where the object is a dynamic object or and array. It also handles non-collection objects fine. If you do not like the way the output is handled, you can simply write an extension method of this class and use the WriteLine method instead. Declaration public void WriteObject<T>(T item) Parameters Type Name Description T item The item. Type Parameters Name Description T WriteObjects<T>(IEnumerable<T>) Writes a set of items, one per line and atomically by repeatedly calling the WriteObject method. For more info check out the description of the WriteObject method. Declaration public void WriteObjects<T>(IEnumerable<T> items) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> items The items. Type Parameters Name Description T"
  },
  "api/Unosquare.Swan.Formatters.Json.html": {
    "href": "api/Unosquare.Swan.Formatters.Json.html",
    "title": "Class Json | Unosquare SWAN",
    "keywords": "Class Json A very simple, light-weight JSON library written by Mario to teach Geo how things are done This is an useful helper for small tasks but it doesn't represent a full-featured serializer such as the beloved Json.NET Inheritance System.Object Json Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Formatters Assembly : cs.temp.dll.dll Syntax public static class Json Methods Deserialize(String) Deserializes the specified json string as either a Dictionary[string, object] or as a List[object] depending on the syntax of the JSON string Declaration public static object Deserialize(string json) Parameters Type Name Description System.String json The json. Returns Type Description System.Object Deserialize(String, Type, Boolean) Deserializes the specified json string and converts it to the specified object type. Declaration public static object Deserialize(string json, Type resultType, bool includeNonPublic) Parameters Type Name Description System.String json The json. System.Type resultType Type of the result. System.Boolean includeNonPublic if set to true, it also uses the non-public constructors and property setters. Returns Type Description System.Object Deserialize<T>(String) Deserializes the specified json string and converts it to the specified object type. Non-public constructors and property setters are ignored. Declaration public static T Deserialize<T>(string json) Parameters Type Name Description System.String json The json. Returns Type Description T Type Parameters Name Description T Deserialize<T>(String, Boolean) Deserializes the specified json string and converts it to the specified object type. Declaration public static T Deserialize<T>(string json, bool includeNonPublic) Parameters Type Name Description System.String json The json. System.Boolean includeNonPublic if set to true, it also uses the non-public constructors and property setters. Returns Type Description T Type Parameters Name Description T Serialize(Object, Boolean, String, Boolean, String[], String[]) Serializes the specified object into a JSON string. Declaration public static string Serialize(object obj, bool format = false, string typeSpecifier = null, bool includeNonPublic = false, string[] includedNames = null, string[] excludedNames = null) Parameters Type Name Description System.Object obj The object. System.Boolean format if set to true it formats and indents the output. System.String typeSpecifier The type specifier. Leave null or empty to avoid setting. System.Boolean includeNonPublic if set to true non-public getters will be also read. System.String [] includedNames The included property names. System.String [] excludedNames The excluded property names. Returns Type Description System.String SerializeExcluding(Object, Boolean, String[]) Serializes the specified object excluding the specified property names. Declaration public static string SerializeExcluding(object obj, bool format, params string[] excludeNames) Parameters Type Name Description System.Object obj The object. System.Boolean format if set to true it formats and indents the output. System.String [] excludeNames The exclude names. Returns Type Description System.String SerializeOnly(Object, Boolean, String[]) Serializes the specified object only including the specified property names. Declaration public static string SerializeOnly(object obj, bool format, params string[] includeNames) Parameters Type Name Description System.Object obj The object. System.Boolean format if set to true it formats and indents the output. System.String [] includeNames The include names. Returns Type Description System.String"
  },
  "api/Unosquare.Swan.Formatters.html": {
    "href": "api/Unosquare.Swan.Formatters.html",
    "title": "Namespace Unosquare.Swan.Formatters | Unosquare SWAN",
    "keywords": "Namespace Unosquare.Swan.Formatters Classes CsvReader Represents a reader designed for CSV text. It is capable of deserializing objects from individual lines of CSV text, transforming CSV lines of text into objects, or simply reading the lines of CSV as an array of strings CsvWriter A CSV writer useful for exporting a set of objects Json A very simple, light-weight JSON library written by Mario to teach Geo how things are done This is an useful helper for small tasks but it doesn't represent a full-featured serializer such as the beloved Json.NET"
  },
  "api/Unosquare.Swan.JsonPropertyAttribute.html": {
    "href": "api/Unosquare.Swan.JsonPropertyAttribute.html",
    "title": "Class JsonPropertyAttribute | Unosquare SWAN",
    "keywords": "Class JsonPropertyAttribute An attribute used to help setup a property behavior when serialize/deserialize JSON. Inheritance System.Object System.Attribute JsonPropertyAttribute Inherited Members System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class JsonPropertyAttribute : Attribute, _Attribute Constructors JsonPropertyAttribute(String, Boolean) Initializes a new instance of the JsonPropertyAttribute class. Declaration public JsonPropertyAttribute(string propertyName, bool ignored = false) Parameters Type Name Description System.String propertyName Name of the property. System.Boolean ignored if set to true [ignored]. Properties Ignored Gets or sets a value indicating whether this JsonPropertyAttribute is ignored. Declaration public bool Ignored { get; set; } Property Value Type Description System.Boolean PropertyName Gets or sets the name of the property. Declaration public string PropertyName { get; set; } Property Value Type Description System.String See Also System.Attribute"
  },
  "api/Unosquare.Swan.Network.html": {
    "href": "api/Unosquare.Swan.Network.html",
    "title": "Class Network | Unosquare SWAN",
    "keywords": "Class Network Provides miscellaneous network utilities such as a Public IP finder, a DNS client to query DNS records of any kind, and an NTP client. Inheritance System.Object Network Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public static class Network Properties DomainName Gets the name of the domain. Declaration public static string DomainName { get; } Property Value Type Description System.String HostName Gets the name of the host. Declaration public static string HostName { get; } Property Value Type Description System.String Methods GetDnsHostEntry(String) Gets the DNS host entry (a list of IP addresses) for the domain name. Declaration public static IPAddress[] GetDnsHostEntry(string fqdn) Parameters Type Name Description System.String fqdn The FQDN. Returns Type Description IPAddress [] GetDnsHostEntry(String, IPAddress, Int32) Gets the DNS host entry (a list of IP addresses) for the domain name. Declaration public static IPAddress[] GetDnsHostEntry(string fqdn, IPAddress dnsServer, int port) Parameters Type Name Description System.String fqdn The FQDN. IPAddress dnsServer The DNS server. System.Int32 port The port. Returns Type Description IPAddress [] GetDnsHostEntryAsync(String, IPAddress, Int32, CancellationToken) Gets the DNS host entry (a list of IP addresses) for the domain name. Declaration public static Task<IPAddress[]> GetDnsHostEntryAsync(string fqdn, IPAddress dnsServer, int port, CancellationToken ct) Parameters Type Name Description System.String fqdn The FQDN. IPAddress dnsServer The DNS server. System.Int32 port The port. System.Threading.CancellationToken ct The cancellation token. Returns Type Description System.Threading.Tasks.Task < IPAddress []> GetDnsHostEntryAsync(String, CancellationToken) Gets the DNS host entry (a list of IP addresses) for the domain name. Declaration public static Task<IPAddress[]> GetDnsHostEntryAsync(string fqdn, CancellationToken ct) Parameters Type Name Description System.String fqdn The FQDN. System.Threading.CancellationToken ct The ct. Returns Type Description System.Threading.Tasks.Task < IPAddress []> GetDnsPointerEntry(IPAddress) Gets the reverse lookup FQDN of the given IP Address. Declaration public static string GetDnsPointerEntry(IPAddress query) Parameters Type Name Description IPAddress query The query. Returns Type Description System.String GetDnsPointerEntry(IPAddress, IPAddress, Int32) Gets the reverse lookup FQDN of the given IP Address. Declaration public static string GetDnsPointerEntry(IPAddress query, IPAddress dnsServer, int port) Parameters Type Name Description IPAddress query The query. IPAddress dnsServer The DNS server. System.Int32 port The port. Returns Type Description System.String GetDnsPointerEntryAsync(IPAddress, IPAddress, Int32, CancellationToken) Gets the reverse lookup FQDN of the given IP Address. Declaration public static Task<string> GetDnsPointerEntryAsync(IPAddress query, IPAddress dnsServer, int port, CancellationToken ct = null) Parameters Type Name Description IPAddress query The query. IPAddress dnsServer The DNS server. System.Int32 port The port. System.Threading.CancellationToken ct The ct. Returns Type Description System.Threading.Tasks.Task < System.String > GetDnsPointerEntryAsync(IPAddress, CancellationToken) Gets the reverse lookup FQDN of the given IP Address. Declaration public static Task<string> GetDnsPointerEntryAsync(IPAddress query, CancellationToken ct = null) Parameters Type Name Description IPAddress query The query. System.Threading.CancellationToken ct The ct. Returns Type Description System.Threading.Tasks.Task < System.String > GetIPv4Addresses(NetworkInterfaceType) Retrieves the local IP addresses. Declaration public static IPAddress[] GetIPv4Addresses(NetworkInterfaceType interfaceType) Parameters Type Name Description NetworkInterfaceType interfaceType Type of the interface. Returns Type Description IPAddress [] GetIPv4Addresses(Boolean) Retrieves the local ip addresses. Declaration public static IPAddress[] GetIPv4Addresses(bool includeLoopback = true) Parameters Type Name Description System.Boolean includeLoopback if set to true [include loopback]. Returns Type Description IPAddress [] GetIPv4DnsServers() Gets the configured IPv4 DNS servers for the active network interfaces. Declaration public static IPAddress[] GetIPv4DnsServers() Returns Type Description IPAddress [] GetIPv4Interfaces() Gets the active IPv4 interfaces. Only those interfaces with a valid unicast address and a valid gateway will be returned in the collection Declaration public static Dictionary<NetworkInterface, IPInterfaceProperties> GetIPv4Interfaces() Returns Type Description System.Collections.Generic.Dictionary < NetworkInterface , IPInterfaceProperties > GetNetworkTimeUtc(IPAddress, Int32) Gets the UTC time by querying from an NTP server Declaration public static DateTime GetNetworkTimeUtc(IPAddress ntpServerAddress, int port = 123) Parameters Type Name Description IPAddress ntpServerAddress The NTP server address. System.Int32 port The port. Returns Type Description System.DateTime GetNetworkTimeUtc(String, Int32) Gets the UTC time by querying from an NTP server Declaration public static DateTime GetNetworkTimeUtc(string ntpServerName = \"pool.ntp.org\", int port = 123) Parameters Type Name Description System.String ntpServerName The NTP server, by default pool.ntp.org. System.Int32 port The port, by default NTP 123. Returns Type Description System.DateTime GetNetworkTimeUtcAsync(IPAddress, Int32, CancellationToken) Gets the UTC time by querying from an NTP server Declaration public static Task<DateTime> GetNetworkTimeUtcAsync(IPAddress ntpServerAddress, int port = 123, CancellationToken ct = null) Parameters Type Name Description IPAddress ntpServerAddress The NTP server address. System.Int32 port The port. System.Threading.CancellationToken ct The cancellation token. Returns Type Description System.Threading.Tasks.Task < System.DateTime > GetNetworkTimeUtcAsync(String, Int32, CancellationToken) Gets the UTC time by querying from an NTP server Declaration public static Task<DateTime> GetNetworkTimeUtcAsync(string ntpServerName, int port = 123, CancellationToken ct = null) Parameters Type Name Description System.String ntpServerName Name of the NTP server. System.Int32 port The port. System.Threading.CancellationToken ct The cancellation token. Returns Type Description System.Threading.Tasks.Task < System.DateTime > GetPublicIPAddress() Gets the public IP address using ipify.org. Declaration public static IPAddress GetPublicIPAddress() Returns Type Description IPAddress GetPublicIPAddressAsync(CancellationToken) Gets the public IP address using ipify.org. Declaration public static Task<IPAddress> GetPublicIPAddressAsync(CancellationToken ct = null) Parameters Type Name Description System.Threading.CancellationToken ct Returns Type Description System.Threading.Tasks.Task < IPAddress > QueryDns(String, DnsRecordType) Queries the DNS server for the specified record type. Declaration public static DnsQueryResult QueryDns(string query, DnsRecordType recordType) Parameters Type Name Description System.String query The query. DnsRecordType recordType Type of the record. Returns Type Description DnsQueryResult QueryDns(String, DnsRecordType, IPAddress, Int32) Queries the DNS server for the specified record type. Declaration public static DnsQueryResult QueryDns(string query, DnsRecordType recordType, IPAddress dnsServer, int port) Parameters Type Name Description System.String query The query. DnsRecordType recordType Type of the record. IPAddress dnsServer The DNS server. System.Int32 port The port. Returns Type Description DnsQueryResult QueryDnsAsync(String, DnsRecordType, IPAddress, Int32, CancellationToken) Queries the DNS server for the specified record type. Declaration public static Task<DnsQueryResult> QueryDnsAsync(string query, DnsRecordType recordType, IPAddress dnsServer, int port, CancellationToken ct = null) Parameters Type Name Description System.String query The query. DnsRecordType recordType Type of the record. IPAddress dnsServer The DNS server. System.Int32 port The port. System.Threading.CancellationToken ct The ct. Returns Type Description System.Threading.Tasks.Task < DnsQueryResult > QueryDnsAsync(String, DnsRecordType, CancellationToken) Queries the DNS server for the specified record type. Declaration public static Task<DnsQueryResult> QueryDnsAsync(string query, DnsRecordType recordType, CancellationToken ct = null) Parameters Type Name Description System.String query The query. DnsRecordType recordType Type of the record. System.Threading.CancellationToken ct The cancellation token. Returns Type Description System.Threading.Tasks.Task < DnsQueryResult >"
  },
  "api/Unosquare.Swan.Networking.Connection.html": {
    "href": "api/Unosquare.Swan.Networking.Connection.html",
    "title": "Class Connection | Unosquare SWAN",
    "keywords": "Class Connection Represents a network connection either on the server or on the client. It wraps a TcpClient and its corresponding network streams. It is capable of working in 2 modes. Typically on the server side you will need to enable continuous reading and events. On the client side you may want to disable continuous reading and use the Read methods available. In continuous reading mode Read methods are not available and will throw an invalid operation exceptions if they are used. Continuous Reading Mode: Subscribe to data reception events, it runs a background thread, don't use Read methods Manual Reading Mode: Data reception events are NEVER fired. No background threads are used. Use Read methods to receive data Inheritance System.Object Connection Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Networking Assembly : cs.temp.dll.dll Syntax public sealed class Connection : IDisposable Constructors Connection(TcpClient) Initializes a new instance of the Connection class in continuous reading mode. It uses UTF8 encoding, CRLF as a new line sequence and disables a protocol block size Declaration public Connection(TcpClient client) Parameters Type Name Description TcpClient client The client. Connection(TcpClient, Int32) Initializes a new instance of the Connection class in continuous reading mode. It uses UTF8 encoding, disables line sequences, and uses a protocol block size instead Declaration public Connection(TcpClient client, int blockSize) Parameters Type Name Description TcpClient client The client. System.Int32 blockSize Size of the block. Connection(TcpClient, Encoding, String, Boolean, Int32) Initializes a new instance of the Connection class. Declaration public Connection(TcpClient client, Encoding textEncoding, string newLineSequence, bool disableContinuousReading, int blockSize) Parameters Type Name Description TcpClient client The client. System.Text.Encoding textEncoding The text encoding. System.String newLineSequence The new line sequence used for read and write operations. System.Boolean disableContinuousReading if set to true [disable continuous reading]. System.Int32 blockSize Size of the block. -- set to 0 or less to disable Properties ActiveStream Gets the active stream. Returns an SSL stream if the connection is secure, otherwise returns the underlying NetworkStream Declaration public Stream ActiveStream { get; } Property Value Type Description System.IO.Stream ConnectionDuration Gets the duration of the connection. Declaration public TimeSpan ConnectionDuration { get; } Property Value Type Description System.TimeSpan ConnectionStartTime Gets the start time at which the connection was started in local time. Declaration public DateTime ConnectionStartTime { get; } Property Value Type Description System.DateTime ConnectionStartTimeUtc Gets the start time at which the connection was started in UTC. Declaration public DateTime ConnectionStartTimeUtc { get; } Property Value Type Description System.DateTime DataReceivedIdleDuration Gets how long has elapsed since data was last received. Declaration public TimeSpan DataReceivedIdleDuration { get; } Property Value Type Description System.TimeSpan DataReceivedLastTimeUtc Gets the last time data was received at in UTC. Declaration public DateTime DataReceivedLastTimeUtc { get; } Property Value Type Description System.DateTime DataSentIdleDuration Gets how long has elapsed since data was last sent Declaration public TimeSpan DataSentIdleDuration { get; } Property Value Type Description System.TimeSpan DataSentLastTimeUtc Gets the last time at which data was sent in UTC. Declaration public DateTime DataSentLastTimeUtc { get; } Property Value Type Description System.DateTime Id Gets the unique identifier of this connection. This field is filled out upon instantiation of this class Declaration public Guid Id { get; } Property Value Type Description System.Guid IsActiveStreamSecure Gets a value indicating whether the current connection stream is an SSL stream. Declaration public bool IsActiveStreamSecure { get; } Property Value Type Description System.Boolean IsConnected Gets a value indicating whether this connection is connected. Remarks: This property polls the socket internally and checks if it is available to read data from it. If disconnect has been called, then this property will return false. Declaration public bool IsConnected { get; } Property Value Type Description System.Boolean IsContinuousReadingEnabled Gets a value indicating whether this connection is in continuous reading mode. Remark: Whenever a disconnect event occurs, the background thread is terminated and this property will return false whenever the reading thread is not active. Therefore, even if continuous reading was not disabled in the constructor, this property might return false. Declaration public bool IsContinuousReadingEnabled { get; } Property Value Type Description System.Boolean LocalEndPoint Gets the local end point of this TCP connection. Declaration public IPEndPoint LocalEndPoint { get; } Property Value Type Description IPEndPoint ProtocolBlockSize When in continuous reading mode, and if set to greater than 0, a Data reception event will be fired whenever the amount of bytes determined by this property has been received. Useful for fixed-length message protocols. Declaration public int ProtocolBlockSize { get; } Property Value Type Description System.Int32 RemoteClient Gets the remote client of this TCP connection. Declaration public TcpClient RemoteClient { get; } Property Value Type Description TcpClient RemoteEndPoint Gets the remote end point of this TCP connection. Declaration public IPEndPoint RemoteEndPoint { get; } Property Value Type Description IPEndPoint TextEncoding Gets the text encoding for send and receive operations. Declaration public Encoding TextEncoding { get; } Property Value Type Description System.Text.Encoding Methods Disconnect() Disconnects this connection. Declaration public void Disconnect() Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Implements System.IDisposable.Dispose() ReadDataAsync() Reads data asynchronously from the remote stream with a 5000 millisecond timeout. Declaration public Task<byte[]> ReadDataAsync() Returns Type Description System.Threading.Tasks.Task < System.Byte []> ReadDataAsync(TimeSpan) Reads data from the remote client asynchronously and with the given timeout. Declaration public Task<byte[]> ReadDataAsync(TimeSpan timeout) Parameters Type Name Description System.TimeSpan timeout The timeout. Returns Type Description System.Threading.Tasks.Task < System.Byte []> Exceptions Type Condition System.InvalidOperationException Read methods have been disabled because continuous reading is enabled. System.TimeoutException Reading data from {ActiveStream} timed out in {timeout.TotalMilliseconds} m ReadLineAsync() Performs the same task as this method's overload but it defaults to a read timeout of 30 seconds. Declaration public Task<string> ReadLineAsync() Returns Type Description System.Threading.Tasks.Task < System.String > ReadLineAsync(TimeSpan) Reads the next available line of text in queue. Return null when no text is read. This method differs from the rest of the read methods because it keeps an internal queue of lines that are read from the stream and only returns the one line next in the queue. It is only recommended to use this method when you are working with text-based protocols and the rest of the read methods are not called. Declaration public Task<string> ReadLineAsync(TimeSpan timeout) Parameters Type Name Description System.TimeSpan timeout Returns Type Description System.Threading.Tasks.Task < System.String > Exceptions Type Condition System.InvalidOperationException Read methods have been disabled because continuous reading is enabled. ReadTextAsync() Asynchronously reads data as text with a 5000 millisecond timeout. Declaration public Task<string> ReadTextAsync() Returns Type Description System.Threading.Tasks.Task < System.String > ReadTextAsync(TimeSpan) Asynchronously reads data as text with the given timeout. Declaration public Task<string> ReadTextAsync(TimeSpan timeout) Parameters Type Name Description System.TimeSpan timeout The timeout. Returns Type Description System.Threading.Tasks.Task < System.String > UpgradeToSecureAsClientAsync() Upgrades the active stream to an SSL stream if this connection object is hosted in the client. Remarks: DO NOT use this method in production. It accepts ALL server certificates without even checking them! Declaration public Task<bool> UpgradeToSecureAsClientAsync() Returns Type Description System.Threading.Tasks.Task < System.Boolean > UpgradeToSecureAsClientAsync(String, RemoteCertificateValidationCallback) Upgrades the active stream to an SSL stream if this connection object is hosted in the client. Declaration public Task<bool> UpgradeToSecureAsClientAsync(string hostname, RemoteCertificateValidationCallback callback) Parameters Type Name Description System.String hostname The hostname. RemoteCertificateValidationCallback callback The callback. Returns Type Description System.Threading.Tasks.Task < System.Boolean > UpgradeToSecureAsServerAsync(X509Certificate2) Upgrades the active stream to an SSL stream if this connection object is hosted in the server. Declaration public Task<bool> UpgradeToSecureAsServerAsync(X509Certificate2 serverCertificate) Parameters Type Name Description X509Certificate2 serverCertificate The server certificate. Returns Type Description System.Threading.Tasks.Task < System.Boolean > WriteDataAsync(Byte[], Boolean) Writes data asynchronously. Declaration public Task WriteDataAsync(byte[] buffer, bool forceFlush) Parameters Type Name Description System.Byte [] buffer The buffer. System.Boolean forceFlush if set to true [force flush]. Returns Type Description System.Threading.Tasks.Task WriteLineAsync(String) Writes a line of text asynchronously. The new line sequence is added automatically at the end of the line. Declaration public Task WriteLineAsync(string line) Parameters Type Name Description System.String line The line. Returns Type Description System.Threading.Tasks.Task WriteLineAsync(String, Encoding) Writes a line of text asynchronously. The new line sequence is added automatically at the end of the line. Declaration public Task WriteLineAsync(string line, Encoding encoding) Parameters Type Name Description System.String line The line. System.Text.Encoding encoding The encoding. Returns Type Description System.Threading.Tasks.Task WriteTextAsync(String) Writes text asynchronously. Declaration public Task WriteTextAsync(string text) Parameters Type Name Description System.String text The text. Returns Type Description System.Threading.Tasks.Task WriteTextAsync(String, Encoding) Writes text asynchronously. Declaration public Task WriteTextAsync(string text, Encoding encoding) Parameters Type Name Description System.String text The text. System.Text.Encoding encoding The encoding. Returns Type Description System.Threading.Tasks.Task Events ClientDisconnected Occurs when a client is disconnected Declaration public event EventHandler ClientDisconnected Event Type Type Description System.EventHandler ConnectionFailure Occurs when an error occurs while upgrading, sending, or receiving data in this client Declaration public event EventHandler<ConnectionFailureEventArgs> ConnectionFailure Event Type Type Description System.EventHandler < ConnectionFailureEventArgs > DataReceived Occurs when the receive buffer has encounters a new line sequence, the buffer is flushed or the buffer is full. Declaration public event EventHandler<ConnectionDataReceivedEventArgs> DataReceived Event Type Type Description System.EventHandler < ConnectionDataReceivedEventArgs > See Also System.IDisposable"
  },
  "api/Unosquare.Swan.Networking.ConnectionListener.html": {
    "href": "api/Unosquare.Swan.Networking.ConnectionListener.html",
    "title": "Class ConnectionListener | Unosquare SWAN",
    "keywords": "Class ConnectionListener TCP Listener manager with built-in events and asynchronous functionality. This networking component is typically used when writing server software Inheritance System.Object ConnectionListener Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Networking Assembly : cs.temp.dll.dll Syntax public sealed class ConnectionListener : IDisposable Constructors ConnectionListener(IPAddress, Int32) Initializes a new instance of the ConnectionListener class. Declaration public ConnectionListener(IPAddress listenAddress, int listenPort) Parameters Type Name Description IPAddress listenAddress The listen address. System.Int32 listenPort The listen port. ConnectionListener(IPEndPoint) Initializes a new instance of the ConnectionListener class. Declaration public ConnectionListener(IPEndPoint listenEndPoint) Parameters Type Name Description IPEndPoint listenEndPoint The listen end point. ConnectionListener(Int32) Initializes a new instance of the ConnectionListener class. It uses the loopback address for listening Declaration public ConnectionListener(int listenPort) Parameters Type Name Description System.Int32 listenPort The listen port. Properties Id Gets a unique identifier that gets automatically assigned upon instantiation of this class. Declaration public Guid Id { get; } Property Value Type Description System.Guid IsListening Gets a value indicating whether this listener is active Declaration public bool IsListening { get; } Property Value Type Description System.Boolean LocalEndPoint Gets the local end point on which we are listening. Declaration public IPEndPoint LocalEndPoint { get; } Property Value Type Description IPEndPoint Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Implements System.IDisposable.Dispose() Finalize() Finalizes an instance of the ConnectionListener class. Declaration protected void Finalize() Start() Starts the listener in an asynchronous, non-blocking fashion. Subscribe to the events of this class to gain access to connected client sockets. Declaration public void Start() Exceptions Type Condition System.InvalidOperationException Cancellation has already been requested. This listener is not reusable. Stop() Stops the listener from receiving new connections. This does not prevent the listener from Declaration public void Stop() ToString() Returns a System.String that represents this instance. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.Object.ToString() Events OnConnectionAccepted Occurs when a new connection is accepted. Declaration public event EventHandler<ConnectionAcceptedEventArgs> OnConnectionAccepted Event Type Type Description System.EventHandler < ConnectionAcceptedEventArgs > OnConnectionAccepting Occurs when a new connection requests a socket from the listener. Set Cancel = true to prevent the TCP client from being accepted. Declaration public event EventHandler<ConnectionAcceptingEventArgs> OnConnectionAccepting Event Type Type Description System.EventHandler < ConnectionAcceptingEventArgs > OnConnectionFailure Occurs when a connection fails to get accepted Declaration public event EventHandler<ConnectionFailureEventArgs> OnConnectionFailure Event Type Type Description System.EventHandler < ConnectionFailureEventArgs > OnListenerStopped Occurs when the listener stops. Declaration public event EventHandler<ConnectionListenerStoppedEventArgs> OnListenerStopped Event Type Type Description System.EventHandler < ConnectionListenerStoppedEventArgs > See Also System.IDisposable"
  },
  "api/Unosquare.Swan.Networking.DnsQueryResult.html": {
    "href": "api/Unosquare.Swan.Networking.DnsQueryResult.html",
    "title": "Class DnsQueryResult | Unosquare SWAN",
    "keywords": "Class DnsQueryResult Represents a response from a DNS server Inheritance System.Object DnsQueryResult Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Networking Assembly : cs.temp.dll.dll Syntax public class DnsQueryResult Properties AdditionalRecords Gets the additional records. Declaration public IList<DnsRecord> AdditionalRecords { get; } Property Value Type Description System.Collections.Generic.IList < DnsRecord > The additional records. AnswerRecords Gets the answer records. Declaration public IList<DnsRecord> AnswerRecords { get; } Property Value Type Description System.Collections.Generic.IList < DnsRecord > The answer records. AuthorityRecords Gets the authority records. Declaration public IList<DnsRecord> AuthorityRecords { get; } Property Value Type Description System.Collections.Generic.IList < DnsRecord > The authority records. Id Gets the identifier. Declaration public int Id { get; } Property Value Type Description System.Int32 The identifier. IsAuthoritativeServer Gets a value indicating whether this instance is authoritative server. Declaration public bool IsAuthoritativeServer { get; } Property Value Type Description System.Boolean true if this instance is authoritative server; otherwise, false . IsRecursionAvailable Gets a value indicating whether this instance is recursion available. Declaration public bool IsRecursionAvailable { get; } Property Value Type Description System.Boolean true if this instance is recursion available; otherwise, false . IsTruncated Gets a value indicating whether this instance is truncated. Declaration public bool IsTruncated { get; } Property Value Type Description System.Boolean true if this instance is truncated; otherwise, false . OperationCode Gets the operation code. Declaration public DnsOperationCode OperationCode { get; } Property Value Type Description DnsOperationCode The operation code. ResponseCode Gets the response code. Declaration public DnsResponseCode ResponseCode { get; } Property Value Type Description DnsResponseCode The response code."
  },
  "api/Unosquare.Swan.Networking.DnsRecord.html": {
    "href": "api/Unosquare.Swan.Networking.DnsRecord.html",
    "title": "Class DnsRecord | Unosquare SWAN",
    "keywords": "Class DnsRecord Represents a DNS record entry Inheritance System.Object DnsRecord Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Networking Assembly : cs.temp.dll.dll Syntax public class DnsRecord Properties CanonicalDomainName Gets the name of the canonical domain. Declaration public string CanonicalDomainName { get; } Property Value Type Description System.String The name of the canonical domain. Class Gets the class. Declaration public DnsRecordClass Class { get; } Property Value Type Description DnsRecordClass The class. Data Gets the raw data of the record. Declaration public byte[] Data { get; } Property Value Type Description System.Byte [] DataText Gets the data text bytes in ASCII encoding. Declaration public string DataText { get; } Property Value Type Description System.String IPAddress Gets the ip address. Declaration public IPAddress IPAddress { get; } Property Value Type Description IPAddress The ip address. MailExchangerDomainName Gets the name of the mail exchanger domain. Declaration public string MailExchangerDomainName { get; } Property Value Type Description System.String The name of the mail exchanger domain. MailExchangerPreference Gets the mail exchanger preference. Declaration public int ? MailExchangerPreference { get; } Property Value Type Description System.Nullable < System.Int32 > The mail exchanger preference. Name Gets the name. Declaration public string Name { get; } Property Value Type Description System.String The name. NameServerDomainName Gets the name of the name server domain. Declaration public string NameServerDomainName { get; } Property Value Type Description System.String The name of the name server domain. PointerDomainName Gets the name of the pointer domain. Declaration public string PointerDomainName { get; } Property Value Type Description System.String The name of the pointer domain. SoaExpireInterval Gets the soa expire interval. Declaration public TimeSpan? SoaExpireInterval { get; } Property Value Type Description System.Nullable < System.TimeSpan > The soa expire interval. SoaMasterDomainName Gets the name of the soa master domain. Declaration public string SoaMasterDomainName { get; } Property Value Type Description System.String The name of the soa master domain. SoaMinimumTimeToLive Gets the soa minimum time to live. Declaration public TimeSpan? SoaMinimumTimeToLive { get; } Property Value Type Description System.Nullable < System.TimeSpan > The soa minimum time to live. SoaRefreshInterval Gets the soa refresh interval. Declaration public TimeSpan? SoaRefreshInterval { get; } Property Value Type Description System.Nullable < System.TimeSpan > The soa refresh interval. SoaResponsibleDomainName Gets the name of the soa responsible domain. Declaration public string SoaResponsibleDomainName { get; } Property Value Type Description System.String The name of the soa responsible domain. SoaRetryInterval Gets the soa retry interval. Declaration public TimeSpan? SoaRetryInterval { get; } Property Value Type Description System.Nullable < System.TimeSpan > The soa retry interval. SoaSerialNumber Gets the soa serial number. Declaration public long ? SoaSerialNumber { get; } Property Value Type Description System.Nullable < System.Int64 > The soa serial number. TimeToLive Gets the time to live. Declaration public TimeSpan TimeToLive { get; } Property Value Type Description System.TimeSpan The time to live. Type Gets the type. Declaration public DnsRecordType Type { get; } Property Value Type Description DnsRecordType The type."
  },
  "api/Unosquare.Swan.Networking.JsonClient.html": {
    "href": "api/Unosquare.Swan.Networking.JsonClient.html",
    "title": "Class JsonClient | Unosquare SWAN",
    "keywords": "Class JsonClient Represents a HttpClient with extended methods to use with JSON payloads and bearer tokens authentication Inheritance System.Object JsonClient Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Networking Assembly : cs.temp.dll.dll Syntax public class JsonClient Methods Authenticate(String, String, String, CancellationToken) Authenticate Declaration public static Task<IDictionary<string, object>> Authenticate(string url, string username, string password, CancellationToken ct = null) Parameters Type Name Description System.String url The URL. System.String username The username. System.String password The password. System.Threading.CancellationToken ct The cancellation token. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IDictionary < System.String , System.Object >> Exceptions Type Condition System.Exception Get<T>(String, String, CancellationToken) Gets the specified URL and return the JSON data as object with optional authorization token. Declaration public static Task<T> Get<T>(string url, string authorization = null, CancellationToken ct = null) Parameters Type Name Description System.String url The URL. System.String authorization The authorization. System.Threading.CancellationToken ct The cancellation token. Returns Type Description System.Threading.Tasks.Task <T> Type Parameters Name Description T Exceptions Type Condition System.Exception GetBinary(String, String, CancellationToken) Gets the binary. Declaration public static Task<byte[]> GetBinary(string url, string authorization = null, CancellationToken ct = null) Parameters Type Name Description System.String url The URL. System.String authorization The authorization. System.Threading.CancellationToken ct The cancellation token. Returns Type Description System.Threading.Tasks.Task < System.Byte []> Exceptions Type Condition System.Exception GetString(String, String, CancellationToken) Gets as string. Declaration public static Task<string> GetString(string url, string authorization = null, CancellationToken ct = null) Parameters Type Name Description System.String url The URL. System.String authorization The authorization. System.Threading.CancellationToken ct The cancellation token. Returns Type Description System.Threading.Tasks.Task < System.String > Exceptions Type Condition System.Exception Post(String, Object, String, CancellationToken) Posts the specified URL. Declaration public static Task<IDictionary<string, object>> Post(string url, object payload, string authorization = null, CancellationToken ct = null) Parameters Type Name Description System.String url The URL. System.Object payload The payload. System.String authorization The authorization. System.Threading.CancellationToken ct The cancellation token. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IDictionary < System.String , System.Object >> Post<T>(String, Object, String, CancellationToken) Post a object as JSON with optional authorization token. Declaration public static Task<T> Post<T>(string url, object payload, string authorization = null, CancellationToken ct = null) Parameters Type Name Description System.String url The URL. System.Object payload The payload. System.String authorization The authorization. System.Threading.CancellationToken ct The cancellation token. Returns Type Description System.Threading.Tasks.Task <T> Type Parameters Name Description T Exceptions Type Condition System.Exception PostFile<T>(String, Byte[], String, String) Posts the file. Declaration public static Task<T> PostFile<T>(string url, byte[] buffer, string fileName, string authorization = null) Parameters Type Name Description System.String url The URL. System.Byte [] buffer The buffer. System.String fileName Name of the file. System.String authorization The authorization. Returns Type Description System.Threading.Tasks.Task <T> Type Parameters Name Description T PostFileString(String, Byte[], String, String) Posts the file. Declaration public static Task<string> PostFileString(string url, byte[] buffer, string fileName, string authorization = null) Parameters Type Name Description System.String url The URL. System.Byte [] buffer The buffer. System.String fileName Name of the file. System.String authorization The authorization. Returns Type Description System.Threading.Tasks.Task < System.String > PostString(String, Object, String, CancellationToken) Posts the specified URL. Declaration public static Task<string> PostString(string url, object payload, string authorization = null, CancellationToken ct = null) Parameters Type Name Description System.String url The URL. System.Object payload The payload. System.String authorization The authorization. System.Threading.CancellationToken ct The cancellation token. Returns Type Description System.Threading.Tasks.Task < System.String > Exceptions Type Condition System.Exception Put(String, Object, String, CancellationToken) Puts the specified URL. Declaration public static Task<IDictionary<string, object>> Put(string url, object payload, string authorization = null, CancellationToken ct = null) Parameters Type Name Description System.String url The URL. System.Object payload The payload. System.String authorization The authorization. System.Threading.CancellationToken ct The cancellation token. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IDictionary < System.String , System.Object >> Put<T>(String, Object, String, CancellationToken) Puts the specified URL. Declaration public static Task<T> Put<T>(string url, object payload, string authorization = null, CancellationToken ct = null) Parameters Type Name Description System.String url The URL. System.Object payload The payload. System.String authorization The authorization. System.Threading.CancellationToken ct The cancellation token. Returns Type Description System.Threading.Tasks.Task <T> Type Parameters Name Description T PutString(String, Object, String, CancellationToken) Puts as string. Declaration public static Task<string> PutString(string url, object payload, string authorization = null, CancellationToken ct = null) Parameters Type Name Description System.String url The URL. System.Object payload The payload. System.String authorization The authorization. System.Threading.CancellationToken ct The cancellation token. Returns Type Description System.Threading.Tasks.Task < System.String > Exceptions Type Condition System.Exception"
  },
  "api/Unosquare.Swan.Networking.SmtpClient.html": {
    "href": "api/Unosquare.Swan.Networking.SmtpClient.html",
    "title": "Class SmtpClient | Unosquare SWAN",
    "keywords": "Class SmtpClient Represents a basic SMTP client that is capable of submitting messages to an SMTP server. Inheritance System.Object SmtpClient Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Networking Assembly : cs.temp.dll.dll Syntax public class SmtpClient Constructors SmtpClient(String, Int32) Initializes a new instance of the SmtpClient class. Declaration public SmtpClient(string host, int port) Parameters Type Name Description System.String host The host. System.Int32 port The port. Properties ClientHostname Gets or sets the name of the client that gets announced to the server. Declaration public string ClientHostname { get; set; } Property Value Type Description System.String Credentials Gets or sets the credentials. No credentials will be used if set to null. Declaration public NetworkCredential Credentials { get; set; } Property Value Type Description NetworkCredential EnableSsl Gets or sets a value indicating whether the SSL is enabled. If set to false, communication between client and server will not be secured. Declaration public bool EnableSsl { get; set; } Property Value Type Description System.Boolean Host Gets or sets the hostname to connect to. Declaration public string Host { get; set; } Property Value Type Description System.String Port Gets or sets the port on which the server expects the connection. Declaration public int Port { get; set; } Property Value Type Description System.Int32 Methods SendMailAsync(IEnumerable<SmtpSessionState>, String) Sends an array of email messages using a session state object. Credentials, Enable SSL and Client Hostname are NOT taken from the state object but rather from the properties of this class. Declaration public Task SendMailAsync(IEnumerable<SmtpSessionState> sessionStates, string sessionId = null) Parameters Type Name Description System.Collections.Generic.IEnumerable < SmtpSessionState > sessionStates The session states. System.String sessionId The session identifier. Returns Type Description System.Threading.Tasks.Task Exceptions Type Condition System.Security.SecurityException Could not upgrade the channel to SSL. SmtpException SendMailAsync(SmtpSessionState, String) Sends an email message using a session state object. Credentials, Enable SSL and Client Hostname are NOT taken from the state object but rather from the properties of this class. Declaration public Task SendMailAsync(SmtpSessionState sessionState, string sessionId = null) Parameters Type Name Description SmtpSessionState sessionState The state. System.String sessionId The session identifier. Returns Type Description System.Threading.Tasks.Task"
  },
  "README.html": {
    "href": "README.html",
    "title": "SWAN: Stuff We All Need | Unosquare SWAN",
    "keywords": "SWAN: Stuff We All Need ⭐ Please star this project if you find it useful! SWAN stands for Stuff We All Need Repeating code and reinventing the wheel is generally considered bad practice. At Unosquare we are committed to beautiful code and great software. Swan is a collection of classes and extension methods that we and other good developers have developed and evolved over the years. We found ourselves copying and pasting the same code for every project every time we started it. We decide to kill that cycle once and for all. This is the result of that idea. Our philosophy is that SWAN should have no external dependencies, it should be cross-platform, and it should be useful. NuGet Installation: PM> Install-Package Unosquare.Swan We have a nuget including helpful providers for AspNetCore at: PM> Install-Package Unosquare.Swan.AspNetCore What's in the library In this section we present the different components that are available in the SWAN library. Please keep in mind that everything in the library is opt-in. SWAN won't force you to use any of its components, classes or methods. The Runtime Runtime provides properties and methods that provide information about the application environment (including Assemblies and OS) and access to singleton instance of other components inside Swan as ObjectMapper . The Terminal Many times we find ourselves implementing Console output code as some NLog or Log4Net logger or adapter, especially when writing console applications, daemons and windows services. We also tend to write Console code for reading user input because it can't be some logger or adapter. And then you have the System.Diagnostics.Debug class to write to the debugger output. And finally, all your Console user interaction looks primitive and unprofessional. In other words, you end up with 3 things you are unsure of how to put together in the different configurations and runtime environments: Console , Debug and some logging mechanism. In return you have placed unintended logging code, Console code, and Debug code everywhere in your application and it makes it look silly, bloated and written by an amateur. The Swan Terminal is all of the following: Console Standard Output Writer Console Standard Error Writer Debug Writer Console Standard Input Reader Log message forwarder It is also very easy to use, it's thread-safe, and it does not rquire you to learn anything new. In fact it simplifies logging messages and diplaying Console messages by providing string extension methods. Example 1: Writing to the Terminal This only writes messages out to the TerminalWriters if they are avialble. In practice, we typically DO NOT use the Write and WriteLine methods but they are provided for convenience, extensibility and customization. Please note that these methods do not forward messages as logging events and therefore whatever is written via these methods will not show up in you logging subsystem. // The simplest way of writing a line of text -- equivalent to `Console.WriteLine`: Terminal.WriteLine($\"Hello, today is {DateTime.Today}\"); // A slightly better way using extension methods: $\"Hello, today is {DateTime.Today}\".WriteLine(); // Now, let's add some color: $\"Hello, today is {DateTime.Today}\".WriteLine(ConsoleColor.Green); // Write it out to the debugger as well! $\"Hello, today is {DateTime.Today}\".WriteLine(ConsoleColor.Green, TerminalWriters.StandardOutput | TerminalWriters.Diagnostics); // You could have also set the color argument to null and just use the configured default $\"Hello, today is {DateTime.Today}\".WriteLine(null, TerminalWriters.StandardOutput | TerminalWriters.Diagnostics); Example 2: Basic Logging This is where Terminal really shines. Instead of using the Write and WriteLine methods, you can use the methods that are intended for logging. These methods have different purposes and distinct functionality. Please refer to the example below and its comments. $\"Hello, today is {DateTime.Today}\".Info(); Example 3: Forwarding Logging Messages Suppose you have various calls to Terminal 's logging methods such as Info() , Warn() , Error() , Trace() and Debug() . You wish to forward those messages to a logging subsystem in addition to using the Console 's standard output and standard error, and the built-in diagnostics output. All you have to do is subscribe to the Terminal's OnLogMessageReceived event. The event arguments of this event provide useful properties that you can piece together to send your logging messages directly to the Logging subsystem in your application. Example 4: Configuring Output Swan's Terminal provides both, flexibility and consistency for all of its output. While it will pick the most common defaults for a given build or runtime scenario, you are able to modify such defaults and adjust them to your liking. You can change the output colors, Example 5: User Interaction The Swan Terminal would not be complete without a way to read user input. The good news is that Terminal can create decent-looking user prompts if a very convenient way. // TODO: These examples need work. var lineResult = Terminal.ReadLine(); var numberResult = Terminal.ReadNumber(); var promptResult = Terminal.ReadPrompt(); var keyResult = Terminal.ReadKey(); Example 6: Other Useful Functions Swan's Terminal also provides additional methods to accomplish very specific tasks. Given the fact that Terminal is an asynchronous, thread-safe output queue, we might under certain situations require all of the output queue to be written out to the Console before the program exits. For example, when we write a console application that requires its usage to be fully printed out before the process is terminated. In these scenarios we use Terminal.Flush which blocks the current thread until the entire output queue becomes empty."
  },
  "api/Unosquare.Swan.Abstractions.SettingsProvider-1.html": {
    "href": "api/Unosquare.Swan.Abstractions.SettingsProvider-1.html",
    "title": "Class SettingsProvider<T> | Unosquare SWAN",
    "keywords": "Class SettingsProvider<T> Represents a provider to save and load settings using a plain JSON file Inheritance System.Object SingletonBase < SettingsProvider <T>> SettingsProvider<T> Inherited Members SingletonBase<SettingsProvider<T>>.LazyInstance SingletonBase<SettingsProvider<T>>.Dispose() SingletonBase<SettingsProvider<T>>.Dispose(Boolean) SingletonBase<SettingsProvider<T>>.Instance System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Abstractions Assembly : cs.temp.dll.dll Syntax public class SettingsProvider<T> : SingletonBase<SettingsProvider<T>>, IDisposable Type Parameters Name Description T Fields SyncRoot A synchronization root that is commonly used for cross-thread operations. Declaration protected readonly object SyncRoot Field Value Type Description System.Object Properties ConfigurationFilePath Gets or sets the configuration file path. By default the entry assembly directory is used and the filename is appsettings.json. Declaration public virtual string ConfigurationFilePath { get; set; } Property Value Type Description System.String Global Gets the global settings object Declaration public T Global { get; } Property Value Type Description T Methods GetJsonData() Gets the json data. Declaration public string GetJsonData() Returns Type Description System.String GetList() Gets the list. Declaration public List<ExtendedPropertyInfo<T>> GetList() Returns Type Description System.Collections.Generic.List < ExtendedPropertyInfo <T>> PersistGlobalSettings() Persists the global settings. Declaration public void PersistGlobalSettings() RefreshFromList(List<ExtendedPropertyInfo<T>>) Updates settings from list. Declaration public List<string> RefreshFromList(List<ExtendedPropertyInfo<T>> propertyList) Parameters Type Name Description System.Collections.Generic.List < ExtendedPropertyInfo <T>> propertyList The list. Returns Type Description System.Collections.Generic.List < System.String > ReloadGlobalSettings() Reloads the global settings. Declaration public void ReloadGlobalSettings() ResetGlobalSettings() Resets the global settings. Declaration public void ResetGlobalSettings()"
  },
  "api/Unosquare.Swan.AppWorkerState.html": {
    "href": "api/Unosquare.Swan.AppWorkerState.html",
    "title": "Enum AppWorkerState | Unosquare SWAN",
    "keywords": "Enum AppWorkerState Enumerates the different Application Worker States Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public enum AppWorkerState Fields Name Description Running The running Stopped The stopped"
  },
  "api/Unosquare.Swan.AppWorkerStateChangedEventArgs.html": {
    "href": "api/Unosquare.Swan.AppWorkerStateChangedEventArgs.html",
    "title": "Class AppWorkerStateChangedEventArgs | Unosquare SWAN",
    "keywords": "Class AppWorkerStateChangedEventArgs Represents event arguments whenever the state of an application service changes Inheritance System.Object System.EventArgs AppWorkerStateChangedEventArgs Inherited Members System.EventArgs.Empty System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public class AppWorkerStateChangedEventArgs : EventArgs Constructors AppWorkerStateChangedEventArgs(AppWorkerState, AppWorkerState) Initializes a new instance of the AppWorkerStateChangedEventArgs class. Declaration public AppWorkerStateChangedEventArgs(AppWorkerState oldState, AppWorkerState newState) Parameters Type Name Description AppWorkerState oldState The old state. AppWorkerState newState The new state. Properties NewState Gets the state to which the application service changed. Declaration public AppWorkerState NewState { get; } Property Value Type Description AppWorkerState OldState Gets the old state. Declaration public AppWorkerState OldState { get; } Property Value Type Description AppWorkerState"
  },
  "api/Unosquare.Swan.AspNetCore.ActionFlags.html": {
    "href": "api/Unosquare.Swan.AspNetCore.ActionFlags.html",
    "title": "Enum ActionFlags | Unosquare SWAN",
    "keywords": "Enum ActionFlags defines a combination of actions in a CRUD pattern Namespace : Unosquare.Swan.AspNetCore Assembly : cs.temp.dll.dll Syntax [Flags] public enum ActionFlags Fields Name Description Create Create action Delete Delete Action None None action Update Update action"
  },
  "api/Unosquare.Swan.AspNetCore.BasicRoleStore.html": {
    "href": "api/Unosquare.Swan.AspNetCore.BasicRoleStore.html",
    "title": "Class BasicRoleStore | Unosquare SWAN",
    "keywords": "Class BasicRoleStore Represents a basic RoleStore for AspNetCore Identity Inheritance System.Object BasicRoleStore Namespace : Unosquare.Swan.AspNetCore Assembly : cs.temp.dll.dll Syntax public class BasicRoleStore : IRoleStore<ApplicationRole> Constructors BasicRoleStore() Initializes a new instance of the BasicRoleStore class. Declaration public BasicRoleStore() Methods CreateAsync(ApplicationRole, CancellationToken) Creates a new role in a store as an asynchronous operation. Declaration public Task<IdentityResult> CreateAsync(ApplicationRole role, CancellationToken cancellationToken) Parameters Type Name Description ApplicationRole role The role to create in the store. System.Threading.CancellationToken cancellationToken The System.Threading.CancellationToken used to propagate notifications that the operation should be canceled. Returns Type Description System.Threading.Tasks.Task < IdentityResult > A System.Threading.Tasks.Task<TResult> that represents the Microsoft.AspNetCore.Identity.IdentityResult of the asynchronous query. DeleteAsync(ApplicationRole, CancellationToken) Deletes a role from the store as an asynchronous operation. Declaration public Task<IdentityResult> DeleteAsync(ApplicationRole role, CancellationToken cancellationToken) Parameters Type Name Description ApplicationRole role The role to delete from the store. System.Threading.CancellationToken cancellationToken The System.Threading.CancellationToken used to propagate notifications that the operation should be canceled. Returns Type Description System.Threading.Tasks.Task < IdentityResult > A System.Threading.Tasks.Task<TResult> that represents the Microsoft.AspNetCore.Identity.IdentityResult of the asynchronous query. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() FindByIdAsync(String, CancellationToken) Finds the role who has the specified ID as an asynchronous operation. Declaration public Task<ApplicationRole> FindByIdAsync(string roleId, CancellationToken cancellationToken) Parameters Type Name Description System.String roleId The role ID to look for. System.Threading.CancellationToken cancellationToken The System.Threading.CancellationToken used to propagate notifications that the operation should be canceled. Returns Type Description System.Threading.Tasks.Task < ApplicationRole > A System.Threading.Tasks.Task<TResult> that result of the look up. FindByNameAsync(String, CancellationToken) Finds the role who has the specified normalized name as an asynchronous operation. Declaration public Task<ApplicationRole> FindByNameAsync(string normalizedRoleName, CancellationToken cancellationToken) Parameters Type Name Description System.String normalizedRoleName The normalized role name to look for. System.Threading.CancellationToken cancellationToken The System.Threading.CancellationToken used to propagate notifications that the operation should be canceled. Returns Type Description System.Threading.Tasks.Task < ApplicationRole > A System.Threading.Tasks.Task<TResult> that result of the look up. GetNormalizedRoleNameAsync(ApplicationRole, CancellationToken) Get a role's normalized name as an asynchronous operation. Declaration public Task<string> GetNormalizedRoleNameAsync(ApplicationRole role, CancellationToken cancellationToken) Parameters Type Name Description ApplicationRole role The role whose normalized name should be retrieved. System.Threading.CancellationToken cancellationToken The System.Threading.CancellationToken used to propagate notifications that the operation should be canceled. Returns Type Description System.Threading.Tasks.Task < System.String > A System.Threading.Tasks.Task<TResult> that contains the name of the role. GetRoleIdAsync(ApplicationRole, CancellationToken) Gets the ID for a role from the store as an asynchronous operation. Declaration public Task<string> GetRoleIdAsync(ApplicationRole role, CancellationToken cancellationToken) Parameters Type Name Description ApplicationRole role The role whose ID should be returned. System.Threading.CancellationToken cancellationToken The System.Threading.CancellationToken used to propagate notifications that the operation should be canceled. Returns Type Description System.Threading.Tasks.Task < System.String > A System.Threading.Tasks.Task<TResult> that contains the ID of the role. GetRoleNameAsync(ApplicationRole, CancellationToken) Gets the name of a role from the store as an asynchronous operation. Declaration public Task<string> GetRoleNameAsync(ApplicationRole role, CancellationToken cancellationToken) Parameters Type Name Description ApplicationRole role The role whose name should be returned. System.Threading.CancellationToken cancellationToken The System.Threading.CancellationToken used to propagate notifications that the operation should be canceled. Returns Type Description System.Threading.Tasks.Task < System.String > A System.Threading.Tasks.Task<TResult> that contains the name of the role. SetNormalizedRoleNameAsync(ApplicationRole, String, CancellationToken) Set a role's normalized name as an asynchronous operation. Declaration public Task SetNormalizedRoleNameAsync(ApplicationRole role, string normalizedName, CancellationToken cancellationToken) Parameters Type Name Description ApplicationRole role The role whose normalized name should be set. System.String normalizedName The normalized name to set System.Threading.CancellationToken cancellationToken The System.Threading.CancellationToken used to propagate notifications that the operation should be canceled. Returns Type Description System.Threading.Tasks.Task The System.Threading.Tasks.Task that represents the asynchronous operation. SetRoleNameAsync(ApplicationRole, String, CancellationToken) Sets the name of a role in the store as an asynchronous operation. Declaration public Task SetRoleNameAsync(ApplicationRole role, string roleName, CancellationToken cancellationToken) Parameters Type Name Description ApplicationRole role The role whose name should be set. System.String roleName The name of the role. System.Threading.CancellationToken cancellationToken The System.Threading.CancellationToken used to propagate notifications that the operation should be canceled. Returns Type Description System.Threading.Tasks.Task The System.Threading.Tasks.Task that represents the asynchronous operation. UpdateAsync(ApplicationRole, CancellationToken) Updates a role in a store as an asynchronous operation. Declaration public Task<IdentityResult> UpdateAsync(ApplicationRole role, CancellationToken cancellationToken) Parameters Type Name Description ApplicationRole role The role to update in the store. System.Threading.CancellationToken cancellationToken The System.Threading.CancellationToken used to propagate notifications that the operation should be canceled. Returns Type Description System.Threading.Tasks.Task < IdentityResult > A System.Threading.Tasks.Task<TResult> that represents the Microsoft.AspNetCore.Identity.IdentityResult of the asynchronous query."
  },
  "api/Unosquare.Swan.AspNetCore.BusinessDbContext.html": {
    "href": "api/Unosquare.Swan.AspNetCore.BusinessDbContext.html",
    "title": "Class BusinessDbContext | Unosquare SWAN",
    "keywords": "Class BusinessDbContext Represents a abstract class to create DbContext using Business Rules Inheritance System.Object BusinessDbContext Namespace : Unosquare.Swan.AspNetCore Assembly : cs.temp.dll.dll Syntax public abstract class BusinessDbContext : DbContext, IBusinessDbContext Constructors BusinessDbContext(DbContextOptions) Initializes a new instance of the BusinessDbContext class. Declaration protected BusinessDbContext(DbContextOptions dbConnection) Parameters Type Name Description DbContextOptions dbConnection The database connection. Methods AddController(IBusinessRulesController) Adds the controller. Declaration public void AddController(IBusinessRulesController controller) Parameters Type Name Description IBusinessRulesController controller The controller. Implements IBusinessDbContext.AddController(IBusinessRulesController) ContainsController(IBusinessRulesController) Determines whether the specified controller contains controller. Declaration public bool ContainsController(IBusinessRulesController controller) Parameters Type Name Description IBusinessRulesController controller The controller. Returns Type Description System.Boolean true if the specified controller contains controller; otherwise, false . Implements IBusinessDbContext.ContainsController(IBusinessRulesController) RemoveController(IBusinessRulesController) Removes the controller. Declaration public void RemoveController(IBusinessRulesController controller) Parameters Type Name Description IBusinessRulesController controller The controller. Implements IBusinessDbContext.RemoveController(IBusinessRulesController) RunBusinessRules() Runs the business rules. Declaration public void RunBusinessRules() SaveChanges() Saves all changes made in this context to the database. Declaration public override int SaveChanges() Returns Type Description System.Int32 The number of state entries written to the database. Remarks This method will automatically call Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges to discover any changes to entity instances before saving to the underlying database. This can be disabled via Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled . SaveChangesAsync(CancellationToken) Asynchronously saves all changes made in this context to the database. Declaration public override Task<int> SaveChangesAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken A System.Threading.CancellationToken to observe while waiting for the task to complete. Returns Type Description Task < System.Int32 > A task that represents the asynchronous save operation. The task result contains the number of state entries written to the database. Remarks This method will automatically call Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges to discover any changes to entity instances before saving to the underlying database. This can be disabled via Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled . Multiple active operations on the same context instance are not supported. Use 'await' to ensure that any asynchronous operations have completed before calling another method on this context. See Also IBusinessDbContext"
  },
  "api/Unosquare.Swan.AspNetCore.BusinessRulesController-1.html": {
    "href": "api/Unosquare.Swan.AspNetCore.BusinessRulesController-1.html",
    "title": "Class BusinessRulesController<T> | Unosquare SWAN",
    "keywords": "Class BusinessRulesController<T> Inheritance System.Object BusinessRulesController<T> AuditTrailController<T, TEntity> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.AspNetCore Assembly : cs.temp.dll.dll Syntax public abstract class BusinessRulesController<T> : IBusinessRulesController where T : DbContext Type Parameters Name Description T Constructors BusinessRulesController(T) Initializes a new instance of the BusinessRulesController<T> class. Declaration protected BusinessRulesController(T context) Parameters Type Name Description T context The context. Properties Context Gets or sets the context. Declaration public T Context { get; protected set; } Property Value Type Description T The context. Methods GetEntityType(Object) Gets the type of the entity. Declaration public Type GetEntityType(object entity) Parameters Type Name Description System.Object entity The entity. Returns Type Description System.Type RunBusinessRules() Runs the business rules. Declaration public void RunBusinessRules() Implements IBusinessRulesController.RunBusinessRules() See Also IBusinessRulesController"
  },
  "api/Unosquare.Swan.AspNetCore.IBusinessDbContext.html": {
    "href": "api/Unosquare.Swan.AspNetCore.IBusinessDbContext.html",
    "title": "Interface IBusinessDbContext | Unosquare SWAN",
    "keywords": "Interface IBusinessDbContext Creates a new DbContext with support to run BusinessControllers Namespace : Unosquare.Swan.AspNetCore Assembly : cs.temp.dll.dll Syntax public interface IBusinessDbContext Methods AddController(IBusinessRulesController) Adds the controller. Declaration void AddController(IBusinessRulesController controller) Parameters Type Name Description IBusinessRulesController controller The controller. ContainsController(IBusinessRulesController) Determines whether the specified controller contains controller. Declaration bool ContainsController(IBusinessRulesController controller) Parameters Type Name Description IBusinessRulesController controller The controller. Returns Type Description System.Boolean true if the specified controller contains controller; otherwise, false . RemoveController(IBusinessRulesController) Removes the controller. Declaration void RemoveController(IBusinessRulesController controller) Parameters Type Name Description IBusinessRulesController controller The controller."
  },
  "api/Unosquare.Swan.AspNetCore.IBusinessRulesController.html": {
    "href": "api/Unosquare.Swan.AspNetCore.IBusinessRulesController.html",
    "title": "Interface IBusinessRulesController | Unosquare SWAN",
    "keywords": "Interface IBusinessRulesController Represents a Business Rules Controller Namespace : Unosquare.Swan.AspNetCore Assembly : cs.temp.dll.dll Syntax public interface IBusinessRulesController Methods RunBusinessRules() Runs the business rules. Declaration void RunBusinessRules()"
  },
  "api/Unosquare.Swan.AspNetCore.Models.IAuditTrailEntry.html": {
    "href": "api/Unosquare.Swan.AspNetCore.Models.IAuditTrailEntry.html",
    "title": "Interface IAuditTrailEntry | Unosquare SWAN",
    "keywords": "Interface IAuditTrailEntry Represents an AuditTrail Entry Namespace : Unosquare.Swan.AspNetCore.Models Assembly : cs.temp.dll.dll Syntax public interface IAuditTrailEntry Properties Action Gets or sets the action. Declaration int Action { get; set; } Property Value Type Description System.Int32 The action. DateCreated Gets or sets the date created. Declaration DateTime DateCreated { get; set; } Property Value Type Description System.DateTime The date created. JsonBody Gets or sets the json body. Declaration string JsonBody { get; set; } Property Value Type Description System.String The json body. TableName Gets or sets the name of the table. Declaration string TableName { get; set; } Property Value Type Description System.String The name of the table. UserId Gets or sets the user identifier. Declaration string UserId { get; set; } Property Value Type Description System.String The user identifier."
  },
  "api/Unosquare.Swan.AspNetCore.Models.LogEntry.html": {
    "href": "api/Unosquare.Swan.AspNetCore.Models.LogEntry.html",
    "title": "Class LogEntry | Unosquare SWAN",
    "keywords": "Class LogEntry Represents a common Log Entry to use with the EF Logger Inheritance System.Object LogEntry Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.AspNetCore.Models Assembly : cs.temp.dll.dll Syntax public class LogEntry Fields MaximumExceptionLength The maximum exception length Declaration public const int MaximumExceptionLength = 2000 Field Value Type Description System.Int32 MaximumMessageLength The maximum message length Declaration public const int MaximumMessageLength = 4000 Field Value Type Description System.Int32 Properties Browser Gets or sets the browser. Declaration public string Browser { get; set; } Property Value Type Description System.String Date Gets or sets the date. Declaration public DateTime Date { get; set; } Property Value Type Description System.DateTime Exception Gets or sets the exception. Declaration public string Exception { get; set; } Property Value Type Description System.String HostAddress Gets or sets the host address. Declaration public string HostAddress { get; set; } Property Value Type Description System.String Id Gets or sets the identifier. Declaration public int Id { get; set; } Property Value Type Description System.Int32 Level Gets or sets the level. Declaration public string Level { get; set; } Property Value Type Description System.String Logger Gets or sets the logger. Declaration public string Logger { get; set; } Property Value Type Description System.String Message Gets or sets the message. Declaration public string Message { get; set; } Property Value Type Description System.String Thread Gets or sets the thread. Declaration public string Thread { get; set; } Property Value Type Description System.String Url Gets or sets the URL. Declaration public string Url { get; set; } Property Value Type Description System.String Username Gets or sets the username. Declaration public string Username { get; set; } Property Value Type Description System.String"
  },
  "api/Unosquare.Swan.Components.ArgumentParser.html": {
    "href": "api/Unosquare.Swan.Components.ArgumentParser.html",
    "title": "Class ArgumentParser | Unosquare SWAN",
    "keywords": "Class ArgumentParser Provides methods to parse command line arguments. Based on CommandLine (Copyright 2005-2015 Giacomo Stelluti Scala and Contributors.) Inheritance System.Object ArgumentParser Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Components Assembly : cs.temp.dll.dll Syntax public class ArgumentParser Constructors ArgumentParser() Initializes a new instance of the ArgumentParser class. Declaration public ArgumentParser() ArgumentParser(ArgumentParserSettings) Initializes a new instance of the ArgumentParser class, configurable with ArgumentParserSettings using a delegate. Declaration public ArgumentParser(ArgumentParserSettings parseSettings) Parameters Type Name Description ArgumentParserSettings parseSettings The parse settings. Properties Settings Gets the instance that implements ArgumentParserSettings in use. Declaration public ArgumentParserSettings Settings { get; } Property Value Type Description ArgumentParserSettings Methods ParseArguments<T>(IEnumerable<String>, T) Parses a string array of command line arguments constructing values in an instance of type T . Declaration public bool ParseArguments<T>(IEnumerable<string> args, T instance) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > args The arguments. T instance The instance. Returns Type Description System.Boolean Type Parameters Name Description T Exceptions Type Condition System.ArgumentNullException args System.InvalidOperationException"
  },
  "api/Unosquare.Swan.Components.ArgumentParserSettings.html": {
    "href": "api/Unosquare.Swan.Components.ArgumentParserSettings.html",
    "title": "Class ArgumentParserSettings | Unosquare SWAN",
    "keywords": "Class ArgumentParserSettings Provides settings for ArgumentParser . Based on CommandLine (Copyright 2005-2015 Giacomo Stelluti Scala and Contributors.) Inheritance System.Object ArgumentParserSettings Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Components Assembly : cs.temp.dll.dll Syntax public class ArgumentParserSettings Properties CaseInsensitiveEnumValues Gets or sets a value indicating whether perform case sensitive comparisons of values . Note that case insensitivity only applies to values , not the parameters. Declaration public bool CaseInsensitiveEnumValues { get; set; } Property Value Type Description System.Boolean CaseSensitive Gets or sets a value indicating whether perform case sensitive comparisons. Note that case insensitivity only applies to parameters , not the values assigned to them (for example, enum parsing). Declaration public bool CaseSensitive { get; set; } Property Value Type Description System.Boolean IgnoreUnknownArguments Gets or sets a value indicating whether the parser shall move on to the next argument and ignore the given argument if it encounter an unknown arguments Declaration public bool IgnoreUnknownArguments { get; set; } Property Value Type Description System.Boolean true to allow parsing the arguments with different class options that do not have all the arguments. Remarks This allows fragmented version class parsing, useful for project with add-on where add-ons also requires command line arguments but when these are unknown by the main program at build time. WriteBanner Gets or sets a value indicating whether [write banner]. Declaration public bool WriteBanner { get; set; } Property Value Type Description System.Boolean true if [write banner]; otherwise, false ."
  },
  "api/Unosquare.Swan.Components.DependencyContainer.MultiRegisterOptions.html": {
    "href": "api/Unosquare.Swan.Components.DependencyContainer.MultiRegisterOptions.html",
    "title": "Class DependencyContainer.MultiRegisterOptions | Unosquare SWAN",
    "keywords": "Class DependencyContainer.MultiRegisterOptions Registration options for \"fluent\" API when registering multiple implementations Inheritance System.Object DependencyContainer.MultiRegisterOptions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Components Assembly : cs.temp.dll.dll Syntax public sealed class MultiRegisterOptions Constructors MultiRegisterOptions(IEnumerable<DependencyContainer.RegisterOptions>) Initializes a new instance of the MultiRegisterOptions class. Declaration public MultiRegisterOptions(IEnumerable<DependencyContainer.RegisterOptions> registerOptions) Parameters Type Name Description System.Collections.Generic.IEnumerable < DependencyContainer.RegisterOptions > registerOptions Registration options Methods AsMultiInstance() Make registration multi-instance if possible Declaration public DependencyContainer.MultiRegisterOptions AsMultiInstance() Returns Type Description DependencyContainer.MultiRegisterOptions MultiRegisterOptions Exceptions Type Condition DependencyContainerRegistrationException AsSingleton() Make registration a singleton (single instance) if possible Declaration public DependencyContainer.MultiRegisterOptions AsSingleton() Returns Type Description DependencyContainer.MultiRegisterOptions RegisterOptions Exceptions Type Condition DependencyContainerRegistrationException ToCustomLifetimeManager(DependencyContainer.MultiRegisterOptions, DependencyContainer.ITinyIoCObjectLifetimeProvider, String) Switches to a custom lifetime manager factory if possible. Usually used for RegisterOptions \"To*\" extension methods such as the ASP.Net per-request one. Declaration public static DependencyContainer.MultiRegisterOptions ToCustomLifetimeManager(DependencyContainer.MultiRegisterOptions instance, DependencyContainer.ITinyIoCObjectLifetimeProvider lifetimeProvider, string errorString) Parameters Type Name Description DependencyContainer.MultiRegisterOptions instance MultiRegisterOptions instance DependencyContainer.ITinyIoCObjectLifetimeProvider lifetimeProvider Custom lifetime manager System.String errorString Error string to display if switch fails Returns Type Description DependencyContainer.MultiRegisterOptions MultiRegisterOptions"
  },
  "api/Unosquare.Swan.Components.DependencyContainer.RegisterOptions.html": {
    "href": "api/Unosquare.Swan.Components.DependencyContainer.RegisterOptions.html",
    "title": "Class DependencyContainer.RegisterOptions | Unosquare SWAN",
    "keywords": "Class DependencyContainer.RegisterOptions Registration options for \"fluent\" API Inheritance System.Object DependencyContainer.RegisterOptions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Components Assembly : cs.temp.dll.dll Syntax public sealed class RegisterOptions Constructors RegisterOptions(DependencyContainer, DependencyContainer.TypeRegistration) Initializes a new instance of the DependencyContainer.RegisterOptions class. Declaration public RegisterOptions(DependencyContainer container, DependencyContainer.TypeRegistration registration) Parameters Type Name Description DependencyContainer container The container. DependencyContainer.TypeRegistration registration The registration. Methods AsMultiInstance() Make registration multi-instance if possible Declaration public DependencyContainer.RegisterOptions AsMultiInstance() Returns Type Description DependencyContainer.RegisterOptions RegisterOptions Exceptions Type Condition DependencyContainerRegistrationException AsSingleton() Make registration a singleton (single instance) if possible Declaration public DependencyContainer.RegisterOptions AsSingleton() Returns Type Description DependencyContainer.RegisterOptions RegisterOptions Exceptions Type Condition DependencyContainerRegistrationException ToCustomLifetimeManager(DependencyContainer.RegisterOptions, DependencyContainer.ITinyIoCObjectLifetimeProvider, String) Switches to a custom lifetime manager factory if possible. Usually used for RegisterOptions \"To*\" extension methods such as the ASP.Net per-request one. Declaration public static DependencyContainer.RegisterOptions ToCustomLifetimeManager(DependencyContainer.RegisterOptions instance, DependencyContainer.ITinyIoCObjectLifetimeProvider lifetimeProvider, string errorString) Parameters Type Name Description DependencyContainer.RegisterOptions instance RegisterOptions instance DependencyContainer.ITinyIoCObjectLifetimeProvider lifetimeProvider Custom lifetime manager System.String errorString Error string to display if switch fails Returns Type Description DependencyContainer.RegisterOptions RegisterOptions UsingConstructor<RegisterType>(Expression<Func<RegisterType>>) Sets the constructor to use Declaration public DependencyContainer.RegisterOptions UsingConstructor<RegisterType>(Expression<Func<RegisterType>> constructor) Parameters Type Name Description Expression < System.Func <RegisterType>> constructor The constructor. Returns Type Description DependencyContainer.RegisterOptions Type Parameters Name Description RegisterType The type of the register type. Exceptions Type Condition DependencyContainerConstructorResolutionException WithStrongReference() Make registration hold a strong reference if possible Declaration public DependencyContainer.RegisterOptions WithStrongReference() Returns Type Description DependencyContainer.RegisterOptions RegisterOptions Exceptions Type Condition DependencyContainerRegistrationException WithWeakReference() Make registration hold a weak reference if possible Declaration public DependencyContainer.RegisterOptions WithWeakReference() Returns Type Description DependencyContainer.RegisterOptions RegisterOptions Exceptions Type Condition DependencyContainerRegistrationException"
  },
  "api/Unosquare.Swan.Components.DependencyContainerNamedResolutionFailureActions.html": {
    "href": "api/Unosquare.Swan.Components.DependencyContainerNamedResolutionFailureActions.html",
    "title": "Enum DependencyContainerNamedResolutionFailureActions | Unosquare SWAN",
    "keywords": "Enum DependencyContainerNamedResolutionFailureActions Enumerates failure actions Namespace : Unosquare.Swan.Components Assembly : cs.temp.dll.dll Syntax public enum DependencyContainerNamedResolutionFailureActions Fields Name Description AttemptUnnamedResolution The attempt unnamed resolution Fail The fail"
  },
  "api/Unosquare.Swan.Components.DependencyContainerResolveOptions.html": {
    "href": "api/Unosquare.Swan.Components.DependencyContainerResolveOptions.html",
    "title": "Class DependencyContainerResolveOptions | Unosquare SWAN",
    "keywords": "Class DependencyContainerResolveOptions Resolution settings Inheritance System.Object DependencyContainerResolveOptions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Components Assembly : cs.temp.dll.dll Syntax public sealed class DependencyContainerResolveOptions Properties Default Gets the default options (attempt resolution of unregistered types, fail on named resolution if name not found) Declaration public static DependencyContainerResolveOptions Default { get; } Property Value Type Description DependencyContainerResolveOptions FailNameNotFoundOnly Preconfigured option for attempting resolution of unregistered types and failing on named resolution if name not found Declaration public static DependencyContainerResolveOptions FailNameNotFoundOnly { get; } Property Value Type Description DependencyContainerResolveOptions FailUnregisteredAndNameNotFound Preconfigured option for failing on resolving unregistered types and on named resolution if name not found Declaration public static DependencyContainerResolveOptions FailUnregisteredAndNameNotFound { get; } Property Value Type Description DependencyContainerResolveOptions FailUnregisteredOnly Preconfigured option for failing on resolving unregistered types, but attempting unnamed resolution if name not found Declaration public static DependencyContainerResolveOptions FailUnregisteredOnly { get; } Property Value Type Description DependencyContainerResolveOptions NamedResolutionFailureAction Gets or sets the named resolution failure action. Declaration public DependencyContainerNamedResolutionFailureActions NamedResolutionFailureAction { get; set; } Property Value Type Description DependencyContainerNamedResolutionFailureActions The named resolution failure action. UnregisteredResolutionAction Gets or sets the unregistered resolution action. Declaration public DependencyContainerUnregisteredResolutionActions UnregisteredResolutionAction { get; set; } Property Value Type Description DependencyContainerUnregisteredResolutionActions The unregistered resolution action."
  },
  "api/Unosquare.Swan.Components.IMessageHubSubscription.html": {
    "href": "api/Unosquare.Swan.Components.IMessageHubSubscription.html",
    "title": "Interface IMessageHubSubscription | Unosquare SWAN",
    "keywords": "Interface IMessageHubSubscription Represents a message subscription Namespace : Unosquare.Swan.Components Assembly : cs.temp.dll.dll Syntax public interface IMessageHubSubscription Properties SubscriptionToken Token returned to the subscribed to reference this subscription Declaration MessageHubSubscriptionToken SubscriptionToken { get; } Property Value Type Description MessageHubSubscriptionToken Methods Deliver(IMessageHubMessage) Deliver the message Declaration void Deliver(IMessageHubMessage message) Parameters Type Name Description IMessageHubMessage message Message to deliver ShouldAttemptDelivery(IMessageHubMessage) Whether delivery should be attempted. Declaration bool ShouldAttemptDelivery(IMessageHubMessage message) Parameters Type Name Description IMessageHubMessage message Message that may potentially be delivered. Returns Type Description System.Boolean True - ok to send, False - should not attempt to send"
  },
  "api/Unosquare.Swan.Components.IObjectMap.html": {
    "href": "api/Unosquare.Swan.Components.IObjectMap.html",
    "title": "Interface IObjectMap | Unosquare SWAN",
    "keywords": "Interface IObjectMap Interface object map Namespace : Unosquare.Swan.Components Assembly : cs.temp.dll.dll Syntax public interface IObjectMap Properties DestinationType Gets or sets the type of the destination. Declaration Type DestinationType { get; } Property Value Type Description System.Type Map Gets or sets the map. Declaration Dictionary<PropertyInfo, List<PropertyInfo>> Map { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.Reflection.PropertyInfo , System.Collections.Generic.List < System.Reflection.PropertyInfo >> SourceType Gets or sets the type of the source. Declaration Type SourceType { get; } Property Value Type Description System.Type"
  },
  "api/Unosquare.Swan.Components.MessageHubMessageBase.html": {
    "href": "api/Unosquare.Swan.Components.MessageHubMessageBase.html",
    "title": "Class MessageHubMessageBase | Unosquare SWAN",
    "keywords": "Class MessageHubMessageBase Base class for messages that provides weak reference storage of the sender Inheritance System.Object MessageHubMessageBase MessageHubCancellableGenericMessage<TContent> MessageHubGenericMessage<TContent> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Components Assembly : cs.temp.dll.dll Syntax public abstract class MessageHubMessageBase : IMessageHubMessage Constructors MessageHubMessageBase(Object) Initializes a new instance of the MessageBase class. Declaration protected MessageHubMessageBase(object sender) Parameters Type Name Description System.Object sender Message sender (usually \"this\") Properties Sender The sender of the message, or null if not supported by the message implementation. Declaration public object Sender { get; } Property Value Type Description System.Object Implements IMessageHubMessage.Sender"
  },
  "api/Unosquare.Swan.Components.MessageHubSubscriptionToken.html": {
    "href": "api/Unosquare.Swan.Components.MessageHubSubscriptionToken.html",
    "title": "Class MessageHubSubscriptionToken | Unosquare SWAN",
    "keywords": "Class MessageHubSubscriptionToken Represents an active subscription to a message Inheritance System.Object MessageHubSubscriptionToken Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Components Assembly : cs.temp.dll.dll Syntax public sealed class MessageHubSubscriptionToken : IDisposable Constructors MessageHubSubscriptionToken(IMessageHub, Type) Initializes a new instance of the TinyMessageSubscriptionToken class. Declaration public MessageHubSubscriptionToken(IMessageHub hub, Type messageType) Parameters Type Name Description IMessageHub hub System.Type messageType Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Implements System.IDisposable.Dispose()"
  },
  "api/Unosquare.Swan.Components.ProcessRunner.html": {
    "href": "api/Unosquare.Swan.Components.ProcessRunner.html",
    "title": "Class ProcessRunner | Unosquare SWAN",
    "keywords": "Class ProcessRunner Provides methods to help create external processes, and efficiently capture the standard error and standard output streams. Inheritance System.Object ProcessRunner Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Components Assembly : cs.temp.dll.dll Syntax public static class ProcessRunner Methods GetProcessOutputAsync(String, String, CancellationToken) Runs the process asynchronously and if the exit code is 0, returns all of the standard output text. If the exit code is something other than 0 it returns the contents of standard error. This method is meant to be used for programs that output a relatively small amount of text. Declaration public static Task<string> GetProcessOutputAsync(string filename, string arguments = \"\", CancellationToken ct = null) Parameters Type Name Description System.String filename The filename. System.String arguments The arguments. System.Threading.CancellationToken ct The cancellation token. Returns Type Description System.Threading.Tasks.Task < System.String > GetProcessResultAsync(String, String, CancellationToken) Executes a process asynchronously and returns the text of the standard output and standard error streams along with the exit code. This method is meant to be used for programs that output a relatively small amount of text. Declaration public static Task<ProcessResult> GetProcessResultAsync(string filename, string arguments = \"\", CancellationToken ct = null) Parameters Type Name Description System.String filename The filename. System.String arguments The arguments. System.Threading.CancellationToken ct The ct. Returns Type Description System.Threading.Tasks.Task < ProcessResult > RunProcessAsync(String, String, ProcessRunner.ProcessDataReceivedCallback, ProcessRunner.ProcessDataReceivedCallback, Boolean, CancellationToken) Runs an external process asynchronously, providing callbacks to capture binary data from the standard error and standard output streams. The callbacks contain a reference to the process so you can respond to output or error streams by writing to the process' input stream. The exit code (return value) will be -1 for forceful termination of the process Declaration public static Task<int> RunProcessAsync(string filename, string arguments, ProcessRunner.ProcessDataReceivedCallback onOutputData, ProcessRunner.ProcessDataReceivedCallback onErrorData, bool syncEvents, CancellationToken ct) Parameters Type Name Description System.String filename The filename. System.String arguments The arguments. ProcessRunner.ProcessDataReceivedCallback onOutputData The on output data. ProcessRunner.ProcessDataReceivedCallback onErrorData The on error data. System.Boolean syncEvents if set to true the next data callback will wait until the current one completes. System.Threading.CancellationToken ct The ct. Returns Type Description System.Threading.Tasks.Task < System.Int32 >"
  },
  "api/Unosquare.Swan.Components.html": {
    "href": "api/Unosquare.Swan.Components.html",
    "title": "Namespace Unosquare.Swan.Components | Unosquare SWAN",
    "keywords": "Namespace Unosquare.Swan.Components Classes ArgumentParser Provides methods to parse command line arguments. Based on CommandLine (Copyright 2005-2015 Giacomo Stelluti Scala and Contributors.) ArgumentParserSettings Provides settings for ArgumentParser . Based on CommandLine (Copyright 2005-2015 Giacomo Stelluti Scala and Contributors.) CircularBuffer A fixed-size buffer that acts as an infinite length one. This buffer is backed by unmanaged, very fast memory so ensure you call the dispose method when you are done using it. Only for Windows. DependencyContainer The concrete implementation of a simple IoC container based largely on TinyIoC DependencyContainer.MultiRegisterOptions Registration options for \"fluent\" API when registering multiple implementations DependencyContainer.RegisterOptions Registration options for \"fluent\" API DependencyContainer.TypeRegistration Represents a Type Registration within the IoC Container DependencyContainerNamedParameterOverloads Define overload on named parameters DependencyContainerResolveOptions Resolution settings MessageHub Messenger hub responsible for taking subscriptions/publications and delivering of messages. MessageHubCancellableGenericMessage<TContent> Basic \"cancellable\" generic message MessageHubDefaultProxy Default \"pass through\" proxy. Does nothing other than deliver the message. MessageHubGenericMessage<TContent> Generic message with user specified content MessageHubMessageBase Base class for messages that provides weak reference storage of the sender MessageHubSubscriptionToken Represents an active subscription to a message ObjectMap<TSource, TDestination> Represents an object map ObjectMapper Represents an AutoMapper-like object to map from one object type to another ProcessResult Represents the text of the standard output and standard error of a process, including its exit code. ProcessRunner Provides methods to help create external processes, and efficiently capture the standard error and standard output streams. Interfaces DependencyContainer.ITinyIoCObjectLifetimeProvider Provides custom lifetime management for ASP.Net per-request lifetimes etc. IMessageHub Messenger hub responsible for taking subscriptions/publications and delivering of messages. IMessageHubMessage A TinyMessage to be published/delivered by TinyMessenger IMessageHubProxy Message proxy definition. A message proxy can be used to intercept/alter messages and/or marshal delivery actions onto a particular thread. IMessageHubSubscription Represents a message subscription IObjectMap Interface object map Enums DependencyContainerDuplicateImplementationActions Enumerates duplicate definition actions DependencyContainerNamedResolutionFailureActions Enumerates failure actions DependencyContainerUnregisteredResolutionActions Defines Resolution actions Delegates ProcessRunner.ProcessDataReceivedCallback Defines a delegate to handle binary data reception from the standard output or standard error streams from a process"
  },
  "api/Unosquare.Swan.ConnectionFailureEventArgs.html": {
    "href": "api/Unosquare.Swan.ConnectionFailureEventArgs.html",
    "title": "Class ConnectionFailureEventArgs | Unosquare SWAN",
    "keywords": "Class ConnectionFailureEventArgs The event arguments for connection failure events Inheritance System.Object System.EventArgs ConnectionFailureEventArgs Inherited Members System.EventArgs.Empty System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public class ConnectionFailureEventArgs : EventArgs Constructors ConnectionFailureEventArgs(Exception) Initializes a new instance of the ConnectionFailureEventArgs class. Declaration public ConnectionFailureEventArgs(Exception ex) Parameters Type Name Description System.Exception ex The ex. Properties Error Gets the error. Declaration public Exception Error { get; } Property Value Type Description System.Exception See Also System.EventArgs"
  },
  "api/Unosquare.Swan.ConnectionListenerFailedEventArgs.html": {
    "href": "api/Unosquare.Swan.ConnectionListenerFailedEventArgs.html",
    "title": "Class ConnectionListenerFailedEventArgs | Unosquare SWAN",
    "keywords": "Class ConnectionListenerFailedEventArgs Event arguments for when a server listener fails to start Inheritance System.Object System.EventArgs ConnectionListenerFailedEventArgs Inherited Members System.EventArgs.Empty System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public class ConnectionListenerFailedEventArgs : EventArgs Constructors ConnectionListenerFailedEventArgs(IPEndPoint, Exception) Initializes a new instance of the ConnectionListenerFailedEventArgs class. Declaration public ConnectionListenerFailedEventArgs(IPEndPoint listenerEndPoint, Exception ex) Parameters Type Name Description IPEndPoint listenerEndPoint The listener end point. System.Exception ex The ex. Properties EndPoint Gets the end point. Declaration public IPEndPoint EndPoint { get; } Property Value Type Description IPEndPoint Error Gets the error. Declaration public Exception Error { get; } Property Value Type Description System.Exception See Also System.EventArgs"
  },
  "api/Unosquare.Swan.ConnectionListenerStartedEventArgs.html": {
    "href": "api/Unosquare.Swan.ConnectionListenerStartedEventArgs.html",
    "title": "Class ConnectionListenerStartedEventArgs | Unosquare SWAN",
    "keywords": "Class ConnectionListenerStartedEventArgs Event arguments for when a server listener is started Inheritance System.Object System.EventArgs ConnectionListenerStartedEventArgs Inherited Members System.EventArgs.Empty System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public class ConnectionListenerStartedEventArgs : EventArgs Constructors ConnectionListenerStartedEventArgs(IPEndPoint) Initializes a new instance of the ConnectionListenerStartedEventArgs class. Declaration public ConnectionListenerStartedEventArgs(IPEndPoint listenerEndPoint) Parameters Type Name Description IPEndPoint listenerEndPoint The listener end point. Properties EndPoint Gets the end point. Declaration public IPEndPoint EndPoint { get; } Property Value Type Description IPEndPoint See Also System.EventArgs"
  },
  "api/Unosquare.Swan.ConnectionListenerStoppedEventArgs.html": {
    "href": "api/Unosquare.Swan.ConnectionListenerStoppedEventArgs.html",
    "title": "Class ConnectionListenerStoppedEventArgs | Unosquare SWAN",
    "keywords": "Class ConnectionListenerStoppedEventArgs Event arguments for when a server listener stopped Inheritance System.Object System.EventArgs ConnectionListenerStoppedEventArgs Inherited Members System.EventArgs.Empty System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public class ConnectionListenerStoppedEventArgs : EventArgs Constructors ConnectionListenerStoppedEventArgs(IPEndPoint, Exception) Initializes a new instance of the ConnectionListenerFailedEventArgs class. Declaration public ConnectionListenerStoppedEventArgs(IPEndPoint listenerEndPoint, Exception ex = null) Parameters Type Name Description IPEndPoint listenerEndPoint The listener end point. System.Exception ex The ex. Properties EndPoint Gets the end point. Declaration public IPEndPoint EndPoint { get; } Property Value Type Description IPEndPoint Error Gets the error. Declaration public Exception Error { get; } Property Value Type Description System.Exception See Also System.EventArgs"
  },
  "api/Unosquare.Swan.DnsOperationCode.html": {
    "href": "api/Unosquare.Swan.DnsOperationCode.html",
    "title": "Enum DnsOperationCode | Unosquare SWAN",
    "keywords": "Enum DnsOperationCode Enumerates the different DNS operation codes Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public enum DnsOperationCode Fields Name Description IQuery IQuery operation Notify Notify operation Query Query operation Status Status operation Update Update operation"
  },
  "api/Unosquare.Swan.DnsQueryException.html": {
    "href": "api/Unosquare.Swan.DnsQueryException.html",
    "title": "Class DnsQueryException | Unosquare SWAN",
    "keywords": "Class DnsQueryException An exception thrown when the DNS query fails. Inheritance System.Object System.Exception DnsQueryException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public class DnsQueryException : Exception, ISerializable, _Exception See Also System.Exception"
  },
  "api/Unosquare.Swan.DnsRecordClass.html": {
    "href": "api/Unosquare.Swan.DnsRecordClass.html",
    "title": "Enum DnsRecordClass | Unosquare SWAN",
    "keywords": "Enum DnsRecordClass Enumerates the different DNS record classes Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public enum DnsRecordClass Fields Name Description ANY ANY records IN IN records"
  },
  "api/Unosquare.Swan.DnsRecordType.html": {
    "href": "api/Unosquare.Swan.DnsRecordType.html",
    "title": "Enum DnsRecordType | Unosquare SWAN",
    "keywords": "Enum DnsRecordType Enumerates the different DNS record types Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public enum DnsRecordType Fields Name Description A A records AAAA A records fot IPv6 ANY ANY records CNAME CNAME records MX MX records NS Nameserver records PTR PTR records SOA SOA records SRV SRV records TXT TXT records WKS WKS records"
  },
  "api/Unosquare.Swan.LogMessageDisplayingEventArgs.html": {
    "href": "api/Unosquare.Swan.LogMessageDisplayingEventArgs.html",
    "title": "Class LogMessageDisplayingEventArgs | Unosquare SWAN",
    "keywords": "Class LogMessageDisplayingEventArgs Event arguments representing a message logged and about to be displayed on the terminal (console). Set the CancelOutput property in the event handler to prevent the terminal from displaying the message. Inheritance System.Object System.EventArgs LogMessageReceivedEventArgs LogMessageDisplayingEventArgs Inherited Members LogMessageReceivedEventArgs.Sequence LogMessageReceivedEventArgs.MessageType LogMessageReceivedEventArgs.UtcDate LogMessageReceivedEventArgs.Source LogMessageReceivedEventArgs.Message LogMessageReceivedEventArgs.CallerMemberName LogMessageReceivedEventArgs.CallerFilePath LogMessageReceivedEventArgs.CallerLineNumber LogMessageReceivedEventArgs.ExtendedData LogMessageReceivedEventArgs.Exception System.EventArgs.Empty System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public class LogMessageDisplayingEventArgs : LogMessageReceivedEventArgs Constructors LogMessageDisplayingEventArgs(LogMessageReceivedEventArgs) Initializes a new instance of the LogMessageDisplayingEventArgs class. Declaration public LogMessageDisplayingEventArgs(LogMessageReceivedEventArgs data) Parameters Type Name Description LogMessageReceivedEventArgs data The LogMessageReceivedEventArgs instance containing the event data. Properties CancelOutput Gets or sets a value indicating whether the displaying of the logging message should be canceled. Declaration public bool CancelOutput { get; set; } Property Value Type Description System.Boolean See Also LogMessageReceivedEventArgs"
  },
  "api/Unosquare.Swan.LogMessageReceivedEventArgs.html": {
    "href": "api/Unosquare.Swan.LogMessageReceivedEventArgs.html",
    "title": "Class LogMessageReceivedEventArgs | Unosquare SWAN",
    "keywords": "Class LogMessageReceivedEventArgs Event arguments representing the message that is logged on to the terminal. Use the properties to forward the data to your logger of choice. Inheritance System.Object System.EventArgs LogMessageReceivedEventArgs LogMessageDisplayingEventArgs Inherited Members System.EventArgs.Empty System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public class LogMessageReceivedEventArgs : EventArgs Constructors LogMessageReceivedEventArgs(UInt64, LogMessageType, DateTime, String, String, Object, String, String, Int32) Initializes a new instance of the LogMessageReceivedEventArgs class. Declaration public LogMessageReceivedEventArgs(ulong sequence, LogMessageType messageType, DateTime utcDate, string source, string message, object extendedData, string callerMemberName, string callerFilePath, int callerLineNumber) Parameters Type Name Description System.UInt64 sequence The sequence. LogMessageType messageType Type of the message. System.DateTime utcDate The UTC date. System.String source The source. System.String message The message. System.Object extendedData The extended data. System.String callerMemberName Name of the caller member. System.String callerFilePath The caller file path. System.Int32 callerLineNumber The caller line number. Properties CallerFilePath Gets the caller file path. Declaration public string CallerFilePath { get; } Property Value Type Description System.String CallerLineNumber Gets the caller line number. Declaration public int CallerLineNumber { get; } Property Value Type Description System.Int32 CallerMemberName Gets the name of the caller member. Declaration public string CallerMemberName { get; } Property Value Type Description System.String Exception Gets the Extended Data properties cast as an Exception (if possible) Otherwise, it return null Declaration public Exception Exception { get; } Property Value Type Description System.Exception ExtendedData Gets an object representing extended data. It could be an exception or anything else Declaration public object ExtendedData { get; } Property Value Type Description System.Object Message Gets the body of the message. Declaration public string Message { get; } Property Value Type Description System.String MessageType Gets the type of the message. It can be a combination as the enumeration is a set of bitwise flags Declaration public LogMessageType MessageType { get; } Property Value Type Description LogMessageType Sequence Gets logging message sequence. Declaration public ulong Sequence { get; } Property Value Type Description System.UInt64 Source Gets the name of the source where the logging message came from. This can come empty if the logger did not set it. Declaration public string Source { get; } Property Value Type Description System.String UtcDate Gets the UTC date at which the event at which the message was logged. Declaration public DateTime UtcDate { get; } Property Value Type Description System.DateTime See Also System.EventArgs"
  },
  "api/Unosquare.Swan.LogMessageType.html": {
    "href": "api/Unosquare.Swan.LogMessageType.html",
    "title": "Enum LogMessageType | Unosquare SWAN",
    "keywords": "Enum LogMessageType Defines the bitwise flags to determine which types of messages get printed on the current console Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax [Flags] public enum LogMessageType Fields Name Description Debug The debug message type Error The error message type Info The information message type None The none message type Trace The trace message type Warning The warning message type"
  },
  "api/Unosquare.Swan.MessageHubSubscriptionException.html": {
    "href": "api/Unosquare.Swan.MessageHubSubscriptionException.html",
    "title": "Class MessageHubSubscriptionException | Unosquare SWAN",
    "keywords": "Class MessageHubSubscriptionException Thrown when an exceptions occurs while subscribing to a message type Inheritance System.Object System.Exception MessageHubSubscriptionException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public class MessageHubSubscriptionException : Exception, ISerializable, _Exception Constructors MessageHubSubscriptionException(Type, String) Initializes a new instance of the MessageHubSubscriptionException class. Declaration public MessageHubSubscriptionException(Type messageType, string reason) Parameters Type Name Description System.Type messageType Type of the message. System.String reason The reason. MessageHubSubscriptionException(Type, String, Exception) Initializes a new instance of the MessageHubSubscriptionException class. Declaration public MessageHubSubscriptionException(Type messageType, string reason, Exception innerException) Parameters Type Name Description System.Type messageType Type of the message. System.String reason The reason. System.Exception innerException The inner exception."
  },
  "api/Unosquare.Swan.Networking.SmtpSessionState.html": {
    "href": "api/Unosquare.Swan.Networking.SmtpSessionState.html",
    "title": "Class SmtpSessionState | Unosquare SWAN",
    "keywords": "Class SmtpSessionState Represents the state of an SMTP session associated with a client Inheritance System.Object SmtpSessionState Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Networking Assembly : cs.temp.dll.dll Syntax public class SmtpSessionState Constructors SmtpSessionState() Initializes a new instance of the SmtpSessionState class. Declaration public SmtpSessionState() Fields m_Recipients The internally accessible list of recipients Declaration protected readonly List<string> m_Recipients Field Value Type Description System.Collections.Generic.List < System.String > Properties AuthMode Gets or sets the authentication mode. Declaration public string AuthMode { get; set; } Property Value Type Description System.String ClientHostname Gets or sets the client hostname. Declaration public string ClientHostname { get; set; } Property Value Type Description System.String DataBuffer Gets the contents of the data buffer. Declaration public List<byte> DataBuffer { get; protected set; } Property Value Type Description System.Collections.Generic.List < System.Byte > ExtendedData Gets or sets the extended data supporting any additional field for storage by a responder implementation. Declaration public object ExtendedData { get; set; } Property Value Type Description System.Object HasInitiated Gets or sets a value indicating whether this instance has initiated. Declaration public bool HasInitiated { get; set; } Property Value Type Description System.Boolean HasProvidedUsername Gets a value indicating whether this instance has provided username. Declaration public bool HasProvidedUsername { get; } Property Value Type Description System.Boolean IsAuthenticated Gets or sets a value indicating whether this instance is authenticated. Declaration public bool IsAuthenticated { get; set; } Property Value Type Description System.Boolean IsChannelSecure Gets or sets a value indicating whether this instance is channel secure. Declaration public bool IsChannelSecure { get; set; } Property Value Type Description System.Boolean IsInAuthMode Gets or sets a value indicating whether this instance is in authentication mode. Declaration public bool IsInAuthMode { get; set; } Property Value Type Description System.Boolean IsInDataMode Gets or sets a value indicating whether the session is currently receiving DATA Declaration public bool IsInDataMode { get; set; } Property Value Type Description System.Boolean Password Gets or sets the password. Declaration public string Password { get; set; } Property Value Type Description System.String Recipients Gets the recipients. Declaration public List<string> Recipients { get; } Property Value Type Description System.Collections.Generic.List < System.String > SenderAddress Gets or sets the sender address. Declaration public string SenderAddress { get; set; } Property Value Type Description System.String SupportsExtensions Gets or sets a value indicating whether the current session supports extensions. Declaration public bool SupportsExtensions { get; set; } Property Value Type Description System.Boolean Username Gets or sets the username. Declaration public string Username { get; set; } Property Value Type Description System.String Methods Clone() Creates a new object that is a copy of the current instance. Declaration public virtual SmtpSessionState Clone() Returns Type Description SmtpSessionState Reset(Boolean) Resets the state table entirely Declaration public void Reset(bool clearExtensionData) Parameters Type Name Description System.Boolean clearExtensionData if set to true [clear extension data]. ResetAuthentication() Resets the authentication state. Declaration public void ResetAuthentication() ResetEmail() Resets the data mode to false, clears the recipients, the sender address and the data buffer Declaration public void ResetEmail()"
  },
  "api/Unosquare.Swan.Networking.SnmpClient.html": {
    "href": "api/Unosquare.Swan.Networking.SnmpClient.html",
    "title": "Class SnmpClient | Unosquare SWAN",
    "keywords": "Class SnmpClient Represents a little SNMP client based on http://www.java2s.com/Code/CSharp/Network/SimpleSNMP.htm Inheritance System.Object SnmpClient Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Networking Assembly : cs.temp.dll.dll Syntax public class SnmpClient Methods Discover(Int32) Discovers the specified SNMP time out. Declaration public static IPEndPoint[] Discover(int snmpTimeOut = 6000) Parameters Type Name Description System.Int32 snmpTimeOut The SNMP time out. Returns Type Description IPEndPoint [] Get(IPEndPoint, String) Gets the specified host. Declaration public static byte[] Get(IPEndPoint host, string mibstring) Parameters Type Name Description IPEndPoint host The host. System.String mibstring The mibstring. Returns Type Description System.Byte [] Get(String, IPEndPoint, String, String) Gets the specified request. Declaration public static byte[] Get(string request, IPEndPoint host, string community, string mibstring) Parameters Type Name Description System.String request The request. IPEndPoint host The host. System.String community The community. System.String mibstring The mibstring. Returns Type Description System.Byte [] GetPublicName(IPEndPoint) Gets the name of the public. Declaration public static string GetPublicName(IPEndPoint host) Parameters Type Name Description IPEndPoint host The host. Returns Type Description System.String GetString(IPEndPoint, String) Gets the string. Declaration public static string GetString(IPEndPoint host, string mibstring) Parameters Type Name Description IPEndPoint host The host. System.String mibstring The mibstring. Returns Type Description System.String GetUptime(IPEndPoint, String) Gets the uptime. Declaration public static TimeSpan GetUptime(IPEndPoint host, string mibstring = \"1.3.6.1.2.1.1.3.0\") Parameters Type Name Description IPEndPoint host The host. System.String mibstring The mibstring. Returns Type Description System.TimeSpan"
  },
  "api/Unosquare.Swan.Networking.html": {
    "href": "api/Unosquare.Swan.Networking.html",
    "title": "Namespace Unosquare.Swan.Networking | Unosquare SWAN",
    "keywords": "Namespace Unosquare.Swan.Networking Classes Connection Represents a network connection either on the server or on the client. It wraps a TcpClient and its corresponding network streams. It is capable of working in 2 modes. Typically on the server side you will need to enable continuous reading and events. On the client side you may want to disable continuous reading and use the Read methods available. In continuous reading mode Read methods are not available and will throw an invalid operation exceptions if they are used. Continuous Reading Mode: Subscribe to data reception events, it runs a background thread, don't use Read methods Manual Reading Mode: Data reception events are NEVER fired. No background threads are used. Use Read methods to receive data ConnectionListener TCP Listener manager with built-in events and asynchronous functionality. This networking component is typically used when writing server software DnsQueryResult Represents a response from a DNS server DnsRecord Represents a DNS record entry JsonClient Represents a HttpClient with extended methods to use with JSON payloads and bearer tokens authentication SmtpClient Represents a basic SMTP client that is capable of submitting messages to an SMTP server. SmtpServerReply Represents an SMTP server response object SmtpSessionState Represents the state of an SMTP session associated with a client SnmpClient Represents a little SNMP client based on http://www.java2s.com/Code/CSharp/Network/SimpleSNMP.htm"
  },
  "api/Unosquare.Swan.OperatingSystem.html": {
    "href": "api/Unosquare.Swan.OperatingSystem.html",
    "title": "Enum OperatingSystem | Unosquare SWAN",
    "keywords": "Enum OperatingSystem Enumeration of Operating Systems Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public enum OperatingSystem Fields Name Description Osx Mac OSX Unix UNIX/Linux Unknown Unknown OS Windows Windows"
  },
  "api/Unosquare.Swan.SmtpCommandNames.html": {
    "href": "api/Unosquare.Swan.SmtpCommandNames.html",
    "title": "Enum SmtpCommandNames | Unosquare SWAN",
    "keywords": "Enum SmtpCommandNames Enumerates all of the well-known SMTP command names. Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public enum SmtpCommandNames Fields Name Description AUTH The authentication command DATA The data command EHLO The ehlo command EXPN The expn command HELO The helo command HELP The help command MAIL The mail command NOOP The noop command QUIT The quit command RCPT The RCPT command RSET The rset command SAML The saml command SEND The send command SOML The soml command STARTTLS The starttls command Unknown An unknown command VRFY The vrfy command"
  },
  "api/Unosquare.Swan.SmtpException.html": {
    "href": "api/Unosquare.Swan.SmtpException.html",
    "title": "Class SmtpException | Unosquare SWAN",
    "keywords": "Class SmtpException Defines an SMTP Exceptions class Inheritance System.Object System.Exception SmtpException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public class SmtpException : Exception, ISerializable, _Exception Constructors SmtpException(String) Initializes a new instance of the SmtpException class with a message. Declaration public SmtpException(string message) Parameters Type Name Description System.String message SmtpException(SmtpStatusCode, String) Initializes a new instance of the SmtpException class. Declaration public SmtpException(SmtpStatusCode replyCode, string message) Parameters Type Name Description SmtpStatusCode replyCode System.String message"
  },
  "api/Unosquare.Swan.SmtpReplyCodeCategories.html": {
    "href": "api/Unosquare.Swan.SmtpReplyCodeCategories.html",
    "title": "Enum SmtpReplyCodeCategories | Unosquare SWAN",
    "keywords": "Enum SmtpReplyCodeCategories Enumerates the reply code categories Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public enum SmtpReplyCodeCategories Fields Name Description Connections The connections category Information The information category Syntax The syntax category System The system category Unknown The unknown category UnspecifiedA The unspecified a category UnspecifiedB The unspecified b category"
  },
  "api/Unosquare.Swan.SmtpReplyCodeSeverities.html": {
    "href": "api/Unosquare.Swan.SmtpReplyCodeSeverities.html",
    "title": "Enum SmtpReplyCodeSeverities | Unosquare SWAN",
    "keywords": "Enum SmtpReplyCodeSeverities Enumerates the reply code severities Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public enum SmtpReplyCodeSeverities Fields Name Description PermanentNegative The permanent negative severity PositiveCompletion The positive completion severity PositiveIntermediate The positive intermediate severity TransientNegative The transient negative severity Unknown The unknown severity"
  },
  "api/Unosquare.Swan.Abstractions.AppWorkerBase.html": {
    "href": "api/Unosquare.Swan.Abstractions.AppWorkerBase.html",
    "title": "Class AppWorkerBase | Unosquare SWAN",
    "keywords": "Class AppWorkerBase A base implementation of an Application service containing a worker task that performs background processing. Inheritance System.Object AppWorkerBase Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Abstractions Assembly : cs.temp.dll.dll Syntax public abstract class AppWorkerBase Constructors AppWorkerBase() Initializes a new instance of the AppWorkerBase class. Declaration protected AppWorkerBase() Properties CancellationPending Gets a value indicating whether the user loop is pending cancellation. Declaration [Obsolete(\"Use the CancellationToken property\")] public bool CancellationPending { get; } Property Value Type Description System.Boolean CancellationToken Gets the cancellation token. Declaration public CancellationToken CancellationToken { get; } Property Value Type Description System.Threading.CancellationToken IsBusy Gets a value indicating whether the thread is busy Declaration public bool IsBusy { get; } Property Value Type Description System.Boolean State Gets the state of the application service. In other words, useful to know whether the service is running. Declaration public AppWorkerState State { get; } Property Value Type Description AppWorkerState Methods Initialize() Performs internal service initialization tasks required before starting the service. Declaration public virtual void Initialize() Exceptions Type Condition System.InvalidOperationException Service cannot be initialized because it seems to be currently running OnWorkerThreadExit() This method is called when the user loop has exited Declaration protected virtual void OnWorkerThreadExit() OnWorkerThreadLoopException(Exception) Called when an unhandled exception is thrown. Declaration protected virtual void OnWorkerThreadLoopException(Exception ex) Parameters Type Name Description System.Exception ex The ex. Start() Starts the application service. This call must not block the calling thread and must run on its own resources. Declaration public virtual void Start() Exceptions Type Condition System.InvalidOperationException Service cannot be started because it seems to be currently running Stop() Stops and disposes service resources. Declaration public virtual void Stop() Exceptions Type Condition System.InvalidOperationException Service cannot be stopped because it is not running. WorkerThreadLoop() Implement this method as a loop that checks whether CancellationPending has been set to true If so, immediately exit the loop. Declaration protected abstract void WorkerThreadLoop() Events StateChanged Occurs when [state changed]. Declaration public event EventHandler<AppWorkerStateChangedEventArgs> StateChanged Event Type Type Description System.EventHandler < AppWorkerStateChangedEventArgs >"
  },
  "api/Unosquare.Swan.Abstractions.SingletonBase-1.html": {
    "href": "api/Unosquare.Swan.Abstractions.SingletonBase-1.html",
    "title": "Class SingletonBase<T> | Unosquare SWAN",
    "keywords": "Class SingletonBase<T> Represents a singleton pattern abstract class Inheritance System.Object SingletonBase<T> SettingsProvider<T> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Abstractions Assembly : cs.temp.dll.dll Syntax public abstract class SingletonBase<T> : IDisposable where T : class Type Parameters Name Description T Fields LazyInstance The static, singleton instance reference. Declaration protected static readonly Lazy<T> LazyInstance Field Value Type Description System.Lazy <T> Properties Instance Gets the instance that this singleton represents. If the instance is null, it is constructed and assigned when this member is accessed. Declaration public static T Instance { get; } Property Value Type Description T Methods Dispose() Disposes the internal singleton instance. Declaration public void Dispose() Implements System.IDisposable.Dispose() Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Call the GC.SuppressFinalize if you override this method and use a non-default class finalizer (destructor) Declaration protected virtual void Dispose(bool disposeManaged) Parameters Type Name Description System.Boolean disposeManaged true to release both managed and unmanaged resources; false to release only unmanaged resources."
  },
  "api/Unosquare.Swan.Abstractions.html": {
    "href": "api/Unosquare.Swan.Abstractions.html",
    "title": "Namespace Unosquare.Swan.Abstractions | Unosquare SWAN",
    "keywords": "Namespace Unosquare.Swan.Abstractions Classes AppWorkerBase A base implementation of an Application service containing a worker task that performs background processing. SettingsProvider<T> Represents a provider to save and load settings using a plain JSON file SingletonBase<T> Represents a singleton pattern abstract class"
  },
  "api/Unosquare.Swan.ArgumentOptionAttribute.html": {
    "href": "api/Unosquare.Swan.ArgumentOptionAttribute.html",
    "title": "Class ArgumentOptionAttribute | Unosquare SWAN",
    "keywords": "Class ArgumentOptionAttribute Models an option specification. Based on CommandLine (Copyright 2005-2015 Giacomo Stelluti Scala and Contributors.) Inheritance System.Object System.Attribute ArgumentOptionAttribute Inherited Members System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class ArgumentOptionAttribute : Attribute, _Attribute Constructors ArgumentOptionAttribute() Initializes a new instance of the ArgumentOptionAttribute class. The default long name will be inferred from target property. Declaration public ArgumentOptionAttribute() ArgumentOptionAttribute(Char) Initializes a new instance of the ArgumentOptionAttribute class. Declaration public ArgumentOptionAttribute(char shortName) Parameters Type Name Description System.Char shortName The short name of the option.. ArgumentOptionAttribute(Char, String) Initializes a new instance of the ArgumentOptionAttribute class. Declaration public ArgumentOptionAttribute(char shortName, string longName) Parameters Type Name Description System.Char shortName The short name of the option. System.String longName The long name of the option or null if not used. ArgumentOptionAttribute(String) Initializes a new instance of the ArgumentOptionAttribute class. Declaration public ArgumentOptionAttribute(string longName) Parameters Type Name Description System.String longName The long name of the option. Properties DefaultValue Gets or sets mapped property default value. Declaration public object DefaultValue { get; set; } Property Value Type Description System.Object HelpText Gets or sets a short description of this command line option. Usually a sentence summary. Declaration public string HelpText { get; set; } Property Value Type Description System.String LongName Gets long name of this command line option. This name is usually a single English word. Declaration public string LongName { get; } Property Value Type Description System.String Required Gets or sets a value indicating whether a command line option is required. Declaration public bool Required { get; set; } Property Value Type Description System.Boolean Separator When applying attribute to System.Collections.Generic.IEnumerable<T> target properties, it allows you to split an argument and consume its content as a sequence. Declaration public char Separator { get; set; } Property Value Type Description System.Char SetName Gets or sets the option's mutually exclusive set name. Declaration public string SetName { get; set; } Property Value Type Description System.String ShortName Gets a short name of this command line option, made of one character. Declaration public string ShortName { get; } Property Value Type Description System.String"
  },
  "api/Unosquare.Swan.AspNetCore.AuditTrailController-2.html": {
    "href": "api/Unosquare.Swan.AspNetCore.AuditTrailController-2.html",
    "title": "Class AuditTrailController<T, TEntity> | Unosquare SWAN",
    "keywords": "Class AuditTrailController<T, TEntity> Represents an AuditTrail controller to use with BusinessDbContext Inheritance System.Object BusinessRulesController <T> AuditTrailController<T, TEntity> Inherited Members BusinessRulesController<T>.Context BusinessRulesController<T>.RunBusinessRules() BusinessRulesController<T>.GetEntityType(Object) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.AspNetCore Assembly : cs.temp.dll.dll Syntax public class AuditTrailController<T, TEntity> : BusinessRulesController<T>, IBusinessRulesController where T : DbContext Type Parameters Name Description T TEntity The type of the entity. Constructors AuditTrailController(T, String) Initializes a new instance of the AuditTrailController<T, TEntity> class. Declaration public AuditTrailController(T context, string currentUserId) Parameters Type Name Description T context The context. System.String currentUserId The current user identifier. Methods AddTypes(ActionFlags, Type[]) Adds the types. Declaration public void AddTypes(ActionFlags action, Type[] types) Parameters Type Name Description ActionFlags action The action. System.Type [] types The types. OnDeleteCreated(Object) Called when [delete created]. Declaration [BusinessRule(ActionFlags.Create | ActionFlags.Update | ActionFlags.Delete)] public virtual void OnDeleteCreated(object entity) Parameters Type Name Description System.Object entity The entity. OnEntityCreated(Object) Called when [entity created]. Declaration [BusinessRule(ActionFlags.Create)] public virtual void OnEntityCreated(object entity) Parameters Type Name Description System.Object entity The entity. OnEntityUpdated(Object) Called when [entity updated]. Declaration [BusinessRule(ActionFlags.Update)] public virtual void OnEntityUpdated(object entity) Parameters Type Name Description System.Object entity The entity."
  },
  "api/Unosquare.Swan.AspNetCore.BasicUserStore.html": {
    "href": "api/Unosquare.Swan.AspNetCore.BasicUserStore.html",
    "title": "Class BasicUserStore | Unosquare SWAN",
    "keywords": "Class BasicUserStore Represents a basic UserStore for AspNetCore Identity Inheritance System.Object BasicUserStore Namespace : Unosquare.Swan.AspNetCore Assembly : cs.temp.dll.dll Syntax public class BasicUserStore : IUserPasswordStore<ApplicationUser>, IUserLoginStore<ApplicationUser>, IUserPhoneNumberStore<ApplicationUser>, IUserTwoFactorStore<ApplicationUser> Constructors BasicUserStore() Initializes a new instance of the BasicUserStore class. Declaration public BasicUserStore() Methods AddLoginAsync(ApplicationUser, UserLoginInfo, CancellationToken) Adds an external Microsoft.AspNetCore.Identity.UserLoginInfo to the specified user . Declaration public Task AddLoginAsync(ApplicationUser user, UserLoginInfo login, CancellationToken cancellationToken) Parameters Type Name Description ApplicationUser user The user to add the login to. UserLoginInfo login The external Microsoft.AspNetCore.Identity.UserLoginInfo to add to the specified user . System.Threading.CancellationToken cancellationToken The System.Threading.CancellationToken used to propagate notifications that the operation should be canceled. Returns Type Description System.Threading.Tasks.Task The System.Threading.Tasks.Task that represents the asynchronous operation. Exceptions Type Condition System.NotImplementedException CreateAsync(ApplicationUser, CancellationToken) Creates the specified user in the user store. Declaration public Task<IdentityResult> CreateAsync(ApplicationUser user, CancellationToken cancellationToken) Parameters Type Name Description ApplicationUser user The user to create. System.Threading.CancellationToken cancellationToken The System.Threading.CancellationToken used to propagate notifications that the operation should be canceled. Returns Type Description System.Threading.Tasks.Task < IdentityResult > The System.Threading.Tasks.Task that represents the asynchronous operation, containing the Microsoft.AspNetCore.Identity.IdentityResult of the creation operation. DeleteAsync(ApplicationUser, CancellationToken) Deletes the specified user from the user store. Declaration public Task<IdentityResult> DeleteAsync(ApplicationUser user, CancellationToken cancellationToken) Parameters Type Name Description ApplicationUser user The user to delete. System.Threading.CancellationToken cancellationToken The System.Threading.CancellationToken used to propagate notifications that the operation should be canceled. Returns Type Description System.Threading.Tasks.Task < IdentityResult > The System.Threading.Tasks.Task that represents the asynchronous operation, containing the Microsoft.AspNetCore.Identity.IdentityResult of the update operation. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() FindByIdAsync(String, CancellationToken) Finds and returns a user, if any, who has the specified userId . Declaration public Task<ApplicationUser> FindByIdAsync(string userId, CancellationToken cancellationToken) Parameters Type Name Description System.String userId The user ID to search for. System.Threading.CancellationToken cancellationToken The System.Threading.CancellationToken used to propagate notifications that the operation should be canceled. Returns Type Description System.Threading.Tasks.Task < ApplicationUser > The System.Threading.Tasks.Task that represents the asynchronous operation, containing the user matching the specified userId if it exists. FindByLoginAsync(String, String, CancellationToken) Retrieves the user associated with the specified login provider and login provider key.. Declaration public Task<ApplicationUser> FindByLoginAsync(string loginProvider, string providerKey, CancellationToken cancellationToken) Parameters Type Name Description System.String loginProvider The login provider who provided the providerKey . System.String providerKey The key provided by the loginProvider to identify a user. System.Threading.CancellationToken cancellationToken The System.Threading.CancellationToken used to propagate notifications that the operation should be canceled. Returns Type Description System.Threading.Tasks.Task < ApplicationUser > The System.Threading.Tasks.Task for the asynchronous operation, containing the user, if any which matched the specified login provider and key. Exceptions Type Condition System.NotImplementedException FindByNameAsync(String, CancellationToken) Finds and returns a user, if any, who has the specified normalized user name. Declaration public Task<ApplicationUser> FindByNameAsync(string normalizedUserName, CancellationToken cancellationToken) Parameters Type Name Description System.String normalizedUserName The normalized user name to search for. System.Threading.CancellationToken cancellationToken The System.Threading.CancellationToken used to propagate notifications that the operation should be canceled. Returns Type Description System.Threading.Tasks.Task < ApplicationUser > The System.Threading.Tasks.Task that represents the asynchronous operation, containing the user matching the specified normalizedUserName if it exists. GetLoginsAsync(ApplicationUser, CancellationToken) Retrieves the associated logins for the specified . Declaration public Task<IList<UserLoginInfo>> GetLoginsAsync(ApplicationUser user, CancellationToken cancellationToken) Parameters Type Name Description ApplicationUser user The user whose associated logins to retrieve. System.Threading.CancellationToken cancellationToken The System.Threading.CancellationToken used to propagate notifications that the operation should be canceled. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IList < UserLoginInfo >> The System.Threading.Tasks.Task for the asynchronous operation, containing a list of Microsoft.AspNetCore.Identity.UserLoginInfo for the specified user , if any. GetNormalizedUserNameAsync(ApplicationUser, CancellationToken) Gets the normalized user name for the specified user . Declaration public Task<string> GetNormalizedUserNameAsync(ApplicationUser user, CancellationToken cancellationToken) Parameters Type Name Description ApplicationUser user The user whose normalized name should be retrieved. System.Threading.CancellationToken cancellationToken The System.Threading.CancellationToken used to propagate notifications that the operation should be canceled. Returns Type Description System.Threading.Tasks.Task < System.String > The System.Threading.Tasks.Task that represents the asynchronous operation, containing the normalized user name for the specified user . GetPasswordHashAsync(ApplicationUser, CancellationToken) Gets the password hash for the specified user . Declaration public Task<string> GetPasswordHashAsync(ApplicationUser user, CancellationToken cancellationToken) Parameters Type Name Description ApplicationUser user The user whose password hash to retrieve. System.Threading.CancellationToken cancellationToken The System.Threading.CancellationToken used to propagate notifications that the operation should be canceled. Returns Type Description System.Threading.Tasks.Task < System.String > The System.Threading.Tasks.Task that represents the asynchronous operation, returning the password hash for the specified user . GetPhoneNumberAsync(ApplicationUser, CancellationToken) Gets the telephone number, if any, for the specified user . Declaration public Task<string> GetPhoneNumberAsync(ApplicationUser user, CancellationToken cancellationToken) Parameters Type Name Description ApplicationUser user The user whose telephone number should be retrieved. System.Threading.CancellationToken cancellationToken The System.Threading.CancellationToken used to propagate notifications that the operation should be canceled. Returns Type Description System.Threading.Tasks.Task < System.String > The System.Threading.Tasks.Task that represents the asynchronous operation, containing the user's telephone number, if any. GetPhoneNumberConfirmedAsync(ApplicationUser, CancellationToken) Gets a flag indicating whether the specified user 's telephone number has been confirmed. Declaration public Task<bool> GetPhoneNumberConfirmedAsync(ApplicationUser user, CancellationToken cancellationToken) Parameters Type Name Description ApplicationUser user The user to return a flag for, indicating whether their telephone number is confirmed. System.Threading.CancellationToken cancellationToken The System.Threading.CancellationToken used to propagate notifications that the operation should be canceled. Returns Type Description System.Threading.Tasks.Task < System.Boolean > The System.Threading.Tasks.Task that represents the asynchronous operation, returning true if the specified user has a confirmed telephone number otherwise false. GetTwoFactorEnabledAsync(ApplicationUser, CancellationToken) Returns a flag indicating whether the specified user has two factor authentication enabled or not, as an asynchronous operation. Declaration public Task<bool> GetTwoFactorEnabledAsync(ApplicationUser user, CancellationToken cancellationToken) Parameters Type Name Description ApplicationUser user The user whose two factor authentication enabled status should be set. System.Threading.CancellationToken cancellationToken The System.Threading.CancellationToken used to propagate notifications that the operation should be canceled. Returns Type Description System.Threading.Tasks.Task < System.Boolean > The System.Threading.Tasks.Task that represents the asynchronous operation, containing a flag indicating whether the specified user has two factor authentication enabled or not. GetUserIdAsync(ApplicationUser, CancellationToken) Gets the user identifier for the specified user . Declaration public Task<string> GetUserIdAsync(ApplicationUser user, CancellationToken cancellationToken) Parameters Type Name Description ApplicationUser user The user whose identifier should be retrieved. System.Threading.CancellationToken cancellationToken The System.Threading.CancellationToken used to propagate notifications that the operation should be canceled. Returns Type Description System.Threading.Tasks.Task < System.String > The System.Threading.Tasks.Task that represents the asynchronous operation, containing the identifier for the specified user . GetUserNameAsync(ApplicationUser, CancellationToken) Gets the user name for the specified user . Declaration public Task<string> GetUserNameAsync(ApplicationUser user, CancellationToken cancellationToken) Parameters Type Name Description ApplicationUser user The user whose name should be retrieved. System.Threading.CancellationToken cancellationToken The System.Threading.CancellationToken used to propagate notifications that the operation should be canceled. Returns Type Description System.Threading.Tasks.Task < System.String > The System.Threading.Tasks.Task that represents the asynchronous operation, containing the name for the specified user . HasPasswordAsync(ApplicationUser, CancellationToken) Gets a flag indicating whether the specified user has a password. Declaration public Task<bool> HasPasswordAsync(ApplicationUser user, CancellationToken cancellationToken) Parameters Type Name Description ApplicationUser user The user to return a flag for, indicating whether they have a password or not. System.Threading.CancellationToken cancellationToken The System.Threading.CancellationToken used to propagate notifications that the operation should be canceled. Returns Type Description System.Threading.Tasks.Task < System.Boolean > The System.Threading.Tasks.Task that represents the asynchronous operation, returning true if the specified user has a password otherwise false. RemoveLoginAsync(ApplicationUser, String, String, CancellationToken) Attempts to remove the provided login information from the specified user . and returns a flag indicating whether the removal succeed or not. Declaration public Task RemoveLoginAsync(ApplicationUser user, string loginProvider, string providerKey, CancellationToken cancellationToken) Parameters Type Name Description ApplicationUser user The user to remove the login information from. System.String loginProvider The login provide whose information should be removed. System.String providerKey The key given by the external login provider for the specified user. System.Threading.CancellationToken cancellationToken The System.Threading.CancellationToken used to propagate notifications that the operation should be canceled. Returns Type Description System.Threading.Tasks.Task The System.Threading.Tasks.Task that represents the asynchronous operation. Exceptions Type Condition System.NotImplementedException SetNormalizedUserNameAsync(ApplicationUser, String, CancellationToken) Sets the given normalized name for the specified user . Declaration public Task SetNormalizedUserNameAsync(ApplicationUser user, string normalizedName, CancellationToken cancellationToken) Parameters Type Name Description ApplicationUser user The user whose name should be set. System.String normalizedName The normalized name to set. System.Threading.CancellationToken cancellationToken The System.Threading.CancellationToken used to propagate notifications that the operation should be canceled. Returns Type Description System.Threading.Tasks.Task The System.Threading.Tasks.Task that represents the asynchronous operation. SetPasswordHashAsync(ApplicationUser, String, CancellationToken) Sets the password hash for the specified user . Declaration public Task SetPasswordHashAsync(ApplicationUser user, string passwordHash, CancellationToken cancellationToken) Parameters Type Name Description ApplicationUser user The user whose password hash to set. System.String passwordHash The password hash to set. System.Threading.CancellationToken cancellationToken The System.Threading.CancellationToken used to propagate notifications that the operation should be canceled. Returns Type Description System.Threading.Tasks.Task The System.Threading.Tasks.Task that represents the asynchronous operation. SetPhoneNumberAsync(ApplicationUser, String, CancellationToken) Sets the telephone number for the specified user . Declaration public Task SetPhoneNumberAsync(ApplicationUser user, string phoneNumber, CancellationToken cancellationToken) Parameters Type Name Description ApplicationUser user The user whose telephone number should be set. System.String phoneNumber The telephone number to set. System.Threading.CancellationToken cancellationToken The System.Threading.CancellationToken used to propagate notifications that the operation should be canceled. Returns Type Description System.Threading.Tasks.Task The System.Threading.Tasks.Task that represents the asynchronous operation. SetPhoneNumberConfirmedAsync(ApplicationUser, Boolean, CancellationToken) Sets a flag indicating if the specified user 's phone number has been confirmed.. Declaration public Task SetPhoneNumberConfirmedAsync(ApplicationUser user, bool confirmed, CancellationToken cancellationToken) Parameters Type Name Description ApplicationUser user The user whose telephone number confirmation status should be set. System.Boolean confirmed A flag indicating whether the user's telephone number has been confirmed. System.Threading.CancellationToken cancellationToken The System.Threading.CancellationToken used to propagate notifications that the operation should be canceled. Returns Type Description System.Threading.Tasks.Task The System.Threading.Tasks.Task that represents the asynchronous operation. SetTwoFactorEnabledAsync(ApplicationUser, Boolean, CancellationToken) Sets a flag indicating whether the specified user has two factor authentication enabled or not, as an asynchronous operation. Declaration public Task SetTwoFactorEnabledAsync(ApplicationUser user, bool enabled, CancellationToken cancellationToken) Parameters Type Name Description ApplicationUser user The user whose two factor authentication enabled status should be set. System.Boolean enabled A flag indicating whether the specified user has two factor authentication enabled. System.Threading.CancellationToken cancellationToken The System.Threading.CancellationToken used to propagate notifications that the operation should be canceled. Returns Type Description System.Threading.Tasks.Task The System.Threading.Tasks.Task that represents the asynchronous operation. SetUserNameAsync(ApplicationUser, String, CancellationToken) Sets the given userName for the specified user . Declaration public Task SetUserNameAsync(ApplicationUser user, string userName, CancellationToken cancellationToken) Parameters Type Name Description ApplicationUser user The user whose name should be set. System.String userName The user name to set. System.Threading.CancellationToken cancellationToken The System.Threading.CancellationToken used to propagate notifications that the operation should be canceled. Returns Type Description System.Threading.Tasks.Task The System.Threading.Tasks.Task that represents the asynchronous operation. UpdateAsync(ApplicationUser, CancellationToken) Updates the specified user in the user store. Declaration public Task<IdentityResult> UpdateAsync(ApplicationUser user, CancellationToken cancellationToken) Parameters Type Name Description ApplicationUser user The user to update. System.Threading.CancellationToken cancellationToken The System.Threading.CancellationToken used to propagate notifications that the operation should be canceled. Returns Type Description System.Threading.Tasks.Task < IdentityResult > The System.Threading.Tasks.Task that represents the asynchronous operation, containing the Microsoft.AspNetCore.Identity.IdentityResult of the update operation."
  },
  "api/Unosquare.Swan.AspNetCore.BusinessRuleAttribute.html": {
    "href": "api/Unosquare.Swan.AspNetCore.BusinessRuleAttribute.html",
    "title": "Class BusinessRuleAttribute | Unosquare SWAN",
    "keywords": "Class BusinessRuleAttribute Decorate methods with this attribute to execute business rules that match the following signature: public void MethodName(T entity) Inheritance System.Object System.Attribute BusinessRuleAttribute Inherited Members System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.AspNetCore Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)] public class BusinessRuleAttribute : Attribute, _Attribute Constructors BusinessRuleAttribute(Type, ActionFlags) Initializes a new instance of the BusinessRuleAttribute class. Declaration public BusinessRuleAttribute(Type entityType, ActionFlags actionFlags) Parameters Type Name Description System.Type entityType Type of the entity. ActionFlags actionFlags The action flags. BusinessRuleAttribute(Type[], ActionFlags) Initializes a new instance of the BusinessRuleAttribute class. Declaration public BusinessRuleAttribute(Type[] entityTypes, ActionFlags actionFlags) Parameters Type Name Description System.Type [] entityTypes The entity types. ActionFlags actionFlags The action flags. BusinessRuleAttribute(ActionFlags) Initializes a new instance of the BusinessRuleAttribute class. Declaration public BusinessRuleAttribute(ActionFlags actionFlags) Parameters Type Name Description ActionFlags actionFlags The action flags. Properties Action Gets or sets the action. Declaration public ActionFlags Action { get; protected set; } Property Value Type Description ActionFlags The action. EntityTypes Gets or sets the entity types. Declaration public Type[] EntityTypes { get; protected set; } Property Value Type Description System.Type [] The entity types. See Also System.Attribute"
  },
  "api/Unosquare.Swan.AspNetCore.Extensions.html": {
    "href": "api/Unosquare.Swan.AspNetCore.Extensions.html",
    "title": "Class Extensions | Unosquare SWAN",
    "keywords": "Class Extensions Extensions methods to implement SWAN providers Inheritance System.Object Extensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.AspNetCore Assembly : cs.temp.dll.dll Syntax public static class Extensions Fields JsonMimeType The JSON MIME type Declaration public const string JsonMimeType = \"application/json\" Field Value Type Description System.String Methods AddEntityFramework<TDbContext, TLog>(ILoggerFactory, IServiceProvider, Func<String, LogLevel, Boolean>) Adds the entity framework logger. Declaration public static ILoggerFactory AddEntityFramework<TDbContext, TLog>(this ILoggerFactory factory, IServiceProvider serviceProvider, Func<string, LogLevel, bool> filter = null)where TDbContext : DbContext where TLog : LogEntry, new () Parameters Type Name Description ILoggerFactory factory The factory. System.IServiceProvider serviceProvider The service provider. System.Func < System.String , System.LogLevel , System.Boolean > filter The filter. Returns Type Description ILoggerFactory Type Parameters Name Description TDbContext The type of the database context. TLog The type of the log. Exceptions Type Condition System.ArgumentNullException factory SetupCookies(IdentityOptions) Setups the cookies. Declaration public static void SetupCookies(this IdentityOptions identityOptions) Parameters Type Name Description IdentityOptions identityOptions The identity options. UseAuditTrail<T, TEntity>(IBusinessDbContext, String) Extension method to add AuditTrail to a DbContext Declaration public static IBusinessDbContext UseAuditTrail<T, TEntity>(this IBusinessDbContext context, string currentUserId)where T : DbContext Parameters Type Name Description IBusinessDbContext context System.String currentUserId Returns Type Description IBusinessDbContext Type Parameters Name Description T TEntity UseBearerTokenProvider(IApplicationBuilder, TokenValidationParameters, Func<String, String, String, String, Task<ClaimsIdentity>>, Func<ClaimsIdentity, Dictionary<String, Object>, Task<Dictionary<String, Object>>>, TimeSpan, Boolean) Uses the bearer token provider. Declaration public static IApplicationBuilder UseBearerTokenProvider(this IApplicationBuilder app, TokenValidationParameters validationParameter, Func<string, string, string, string, Task<ClaimsIdentity>> identityResolver, Func<ClaimsIdentity, Dictionary<string, object>, Task<Dictionary<string, object>>> bearerTokenResolver = null, TimeSpan expiration = null, bool forceHttps = true) Parameters Type Name Description IApplicationBuilder app The application. TokenValidationParameters validationParameter The validation parameter. System.Func < System.String , System.String , System.String , System.String , System.Threading.Tasks.Task < System.Security.Claims.ClaimsIdentity >> identityResolver The identity resolver. System.Func < System.Security.Claims.ClaimsIdentity , System.Collections.Generic.Dictionary < System.String , System.Object >, System.Threading.Tasks.Task < System.Collections.Generic.Dictionary < System.String , System.Object >>> bearerTokenResolver The bearer token resolver. System.TimeSpan expiration The expiration. System.Boolean forceHttps if set to true [force HTTPS]. Returns Type Description IApplicationBuilder UseFallback(IApplicationBuilder, String, Func<PathString, Boolean>) Uses the fallback to redirect everything without extension. Declaration public static IApplicationBuilder UseFallback(this IApplicationBuilder app, string fallbackPath = \"/index.html\", Func<PathString, bool> ignoreCheck = null) Parameters Type Name Description IApplicationBuilder app The application. System.String fallbackPath The fallback path. System.Func < PathString , System.Boolean > ignoreCheck The ignore check. Returns Type Description IApplicationBuilder UseJsonExceptionHandler(IApplicationBuilder) Uses the json exception handler. Declaration public static IApplicationBuilder UseJsonExceptionHandler(this IApplicationBuilder app) Parameters Type Name Description IApplicationBuilder app The application. Returns Type Description IApplicationBuilder"
  },
  "api/Unosquare.Swan.AspNetCore.Logger.EntityFrameworkLogger-2.html": {
    "href": "api/Unosquare.Swan.AspNetCore.Logger.EntityFrameworkLogger-2.html",
    "title": "Class EntityFrameworkLogger<TDbContext, TLog> | Unosquare SWAN",
    "keywords": "Class EntityFrameworkLogger<TDbContext, TLog> Represents a Logger using EntityFramework Based on https://github.com/staff0rd/entityframework-logging Inheritance System.Object EntityFrameworkLogger<TDbContext, TLog> Namespace : Unosquare.Swan.AspNetCore.Logger Assembly : cs.temp.dll.dll Syntax public class EntityFrameworkLogger<TDbContext, TLog> : ILogger where TDbContext : DbContext where TLog : LogEntry, new () Type Parameters Name Description TDbContext The type of the database context. TLog The type of the log. Constructors EntityFrameworkLogger(String, Func<String, LogLevel, Boolean>, IServiceProvider) Initializes a new instance of the EntityFrameworkLogger<TDbContext, TLog> class. Declaration public EntityFrameworkLogger(string name, Func<string, LogLevel, bool> filter, IServiceProvider serviceProvider) Parameters Type Name Description System.String name The name. System.Func < System.String , System.LogLevel , System.Boolean > filter The filter. System.IServiceProvider serviceProvider The service provider. Methods BeginScope<TState>(TState) Begins a logical operation scope. Declaration public IDisposable BeginScope<TState>(TState state) Parameters Type Name Description TState state The identifier for the scope. Returns Type Description System.IDisposable An IDisposable that ends the logical operation scope on dispose. Type Parameters Name Description TState IsEnabled(LogLevel) Checks if the given logLevel is enabled. Declaration public bool IsEnabled(LogLevel logLevel) Parameters Type Name Description System.LogLevel logLevel level to be checked. Returns Type Description System.Boolean true if enabled. Log<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, String>) Writes a log entry. Declaration public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter) Parameters Type Name Description System.LogLevel logLevel Entry will be written on this level. EventId eventId Id of the event. TState state The entry to be written. Can be also an object. System.Exception exception The exception related to this entry. System.Func <TState, System.Exception , System.String > formatter Function to create a string message of the state and exception . Type Parameters Name Description TState"
  },
  "api/Unosquare.Swan.AspNetCore.Logger.EntityFrameworkLoggerOptions.html": {
    "href": "api/Unosquare.Swan.AspNetCore.Logger.EntityFrameworkLoggerOptions.html",
    "title": "Class EntityFrameworkLoggerOptions | Unosquare SWAN",
    "keywords": "Class EntityFrameworkLoggerOptions Represents the EF Logger options Inheritance System.Object EntityFrameworkLoggerOptions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.AspNetCore.Logger Assembly : cs.temp.dll.dll Syntax public class EntityFrameworkLoggerOptions Properties Filters Gets or sets the filters. Declaration public Dictionary<string, LogLevel> Filters { get; set; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , System.LogLevel >"
  },
  "api/Unosquare.Swan.AspNetCore.Logger.EntityFrameworkLoggerProvider-2.html": {
    "href": "api/Unosquare.Swan.AspNetCore.Logger.EntityFrameworkLoggerProvider-2.html",
    "title": "Class EntityFrameworkLoggerProvider<TDbContext, TLog> | Unosquare SWAN",
    "keywords": "Class EntityFrameworkLoggerProvider<TDbContext, TLog> Represents a EF logger provider Inheritance System.Object EntityFrameworkLoggerProvider<TDbContext, TLog> Namespace : Unosquare.Swan.AspNetCore.Logger Assembly : cs.temp.dll.dll Syntax public class EntityFrameworkLoggerProvider<TDbContext, TLog> : ILoggerProvider where TDbContext : DbContext where TLog : LogEntry, new () Type Parameters Name Description TDbContext The type of the database context. TLog The type of the log. Constructors EntityFrameworkLoggerProvider(IServiceProvider, Func<String, LogLevel, Boolean>) Initializes a new instance of the EntityFrameworkLoggerProvider<TDbContext, TLog> class. Declaration public EntityFrameworkLoggerProvider(IServiceProvider serviceProvider, Func<string, LogLevel, bool> filter) Parameters Type Name Description System.IServiceProvider serviceProvider The service provider. System.Func < System.String , System.LogLevel , System.Boolean > filter The filter. Methods CreateLogger(String) Creates the logger. Declaration public ILogger CreateLogger(string name) Parameters Type Name Description System.String name The name. Returns Type Description ILogger Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose()"
  },
  "api/Unosquare.Swan.AspNetCore.Logger.html": {
    "href": "api/Unosquare.Swan.AspNetCore.Logger.html",
    "title": "Namespace Unosquare.Swan.AspNetCore.Logger | Unosquare SWAN",
    "keywords": "Namespace Unosquare.Swan.AspNetCore.Logger Classes EntityFrameworkLogger<TDbContext, TLog> Represents a Logger using EntityFramework Based on https://github.com/staff0rd/entityframework-logging EntityFrameworkLoggerOptions Represents the EF Logger options EntityFrameworkLoggerProvider<TDbContext, TLog> Represents a EF logger provider"
  },
  "api/Unosquare.Swan.AspNetCore.Models.ApplicationRole.html": {
    "href": "api/Unosquare.Swan.AspNetCore.Models.ApplicationRole.html",
    "title": "Class ApplicationRole | Unosquare SWAN",
    "keywords": "Class ApplicationRole Represents a Role Inheritance System.Object ApplicationRole Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.AspNetCore.Models Assembly : cs.temp.dll.dll Syntax public class ApplicationRole Properties RoleId Gets or sets the role identifier. Declaration public string RoleId { get; set; } Property Value Type Description System.String RoleName Gets or sets the name of the role. Declaration public string RoleName { get; set; } Property Value Type Description System.String"
  },
  "api/Unosquare.Swan.AspNetCore.Models.ApplicationUser.html": {
    "href": "api/Unosquare.Swan.AspNetCore.Models.ApplicationUser.html",
    "title": "Class ApplicationUser | Unosquare SWAN",
    "keywords": "Class ApplicationUser Represents an User Inheritance System.Object System.Security.Claims.ClaimsIdentity ApplicationUser Inherited Members System.Security.Claims.ClaimsIdentity.DefaultIssuer System.Security.Claims.ClaimsIdentity.DefaultNameClaimType System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType System.Security.Claims.ClaimsIdentity.Clone() System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim) System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>) System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim) System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim) System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate<System.Security.Claims.Claim>) System.Security.Claims.ClaimsIdentity.FindAll(System.String) System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate<System.Security.Claims.Claim>) System.Security.Claims.ClaimsIdentity.HasClaim(System.String, System.String) System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate<System.Security.Claims.Claim>) System.Security.Claims.ClaimsIdentity.FindFirst(System.String) System.Security.Claims.ClaimsIdentity.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader) System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter) System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter, System.Byte[]) System.Security.Claims.ClaimsIdentity.AuthenticationType System.Security.Claims.ClaimsIdentity.IsAuthenticated System.Security.Claims.ClaimsIdentity.Actor System.Security.Claims.ClaimsIdentity.BootstrapContext System.Security.Claims.ClaimsIdentity.Claims System.Security.Claims.ClaimsIdentity.CustomSerializationData System.Security.Claims.ClaimsIdentity.Label System.Security.Claims.ClaimsIdentity.Name System.Security.Claims.ClaimsIdentity.NameClaimType System.Security.Claims.ClaimsIdentity.RoleClaimType System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.AspNetCore.Models Assembly : cs.temp.dll.dll Syntax public class ApplicationUser : ClaimsIdentity, IIdentity Properties Email Gets or sets the email. Declaration public string Email { get; set; } Property Value Type Description System.String PasswordHash Gets or sets the password hash. Declaration public string PasswordHash { get; set; } Property Value Type Description System.String PhoneNumber Gets or sets the phone number. Declaration public string PhoneNumber { get; set; } Property Value Type Description System.String PhoneNumberConfirmed Gets or sets a value indicating whether [phone number confirmed]. Declaration public bool PhoneNumberConfirmed { get; set; } Property Value Type Description System.Boolean TwoFactorEnabled Gets or sets a value indicating whether [two factor enabled]. Declaration public bool TwoFactorEnabled { get; set; } Property Value Type Description System.Boolean UserId Gets or sets the user identifier. Declaration public string UserId { get; set; } Property Value Type Description System.String UserName Gets or sets the name of the user. Declaration public string UserName { get; set; } Property Value Type Description System.String See Also System.Security.Claims.ClaimsIdentity"
  },
  "api/Unosquare.Swan.AspNetCore.Models.html": {
    "href": "api/Unosquare.Swan.AspNetCore.Models.html",
    "title": "Namespace Unosquare.Swan.AspNetCore.Models | Unosquare SWAN",
    "keywords": "Namespace Unosquare.Swan.AspNetCore.Models Classes ApplicationRole Represents a Role ApplicationUser Represents an User LogEntry Represents a common Log Entry to use with the EF Logger Interfaces IAuditTrailEntry Represents an AuditTrail Entry"
  },
  "api/Unosquare.Swan.AspNetCore.TokenProviderMiddleware.html": {
    "href": "api/Unosquare.Swan.AspNetCore.TokenProviderMiddleware.html",
    "title": "Class TokenProviderMiddleware | Unosquare SWAN",
    "keywords": "Class TokenProviderMiddleware Token generator middleware component which is added to an HTTP pipeline. Inheritance System.Object TokenProviderMiddleware Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.AspNetCore Assembly : cs.temp.dll.dll Syntax public class TokenProviderMiddleware Constructors TokenProviderMiddleware(RequestDelegate, IOptions<TokenProviderOptions>, ILoggerFactory) Initializes a new instance of the TokenProviderMiddleware class. Declaration public TokenProviderMiddleware(RequestDelegate next, IOptions<TokenProviderOptions> options, ILoggerFactory loggerFactory) Parameters Type Name Description RequestDelegate next The next. IOptions < TokenProviderOptions > options The options. ILoggerFactory loggerFactory The logger factory. Methods Invoke(HttpContext) Invokes the specified context. Declaration public Task Invoke(HttpContext context) Parameters Type Name Description HttpContext context The context. Returns Type Description System.Threading.Tasks.Task"
  },
  "api/Unosquare.Swan.Networking.SmtpServerReply.html": {
    "href": "api/Unosquare.Swan.Networking.SmtpServerReply.html",
    "title": "Class SmtpServerReply | Unosquare SWAN",
    "keywords": "Class SmtpServerReply Represents an SMTP server response object Inheritance System.Object SmtpServerReply Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Networking Assembly : cs.temp.dll.dll Syntax public class SmtpServerReply Constructors SmtpServerReply() Initializes a new instance of the SmtpServerReply class. Declaration public SmtpServerReply() SmtpServerReply(Int32, String) Initializes a new instance of the SmtpServerReply class. Declaration public SmtpServerReply(int responseCode, string content) Parameters Type Name Description System.Int32 responseCode The response code. System.String content The content. SmtpServerReply(Int32, String, String) Initializes a new instance of the SmtpServerReply class. Declaration public SmtpServerReply(int responseCode, string statusCode, string content) Parameters Type Name Description System.Int32 responseCode The response code. System.String statusCode The status code. System.String content The content. SmtpServerReply(Int32, String, String[]) Initializes a new instance of the SmtpServerReply class. Declaration public SmtpServerReply(int responseCode, string statusCode, params string[] content) Parameters Type Name Description System.Int32 responseCode The response code. System.String statusCode The status code. System.String [] content The content. Properties AuthorizationRequired Gets the authorization required reply. Declaration public static SmtpServerReply AuthorizationRequired { get; } Property Value Type Description SmtpServerReply BadSequenceOfCommands Gets the bad sequence of commands reply. Declaration public static SmtpServerReply BadSequenceOfCommands { get; } Property Value Type Description SmtpServerReply BadSyntaxCommandEmpty Gets the bad syntax command empty reply. Declaration public static SmtpServerReply BadSyntaxCommandEmpty { get; } Property Value Type Description SmtpServerReply CommandNotImplemented Gets the command not implemented reply. Declaration public static SmtpServerReply CommandNotImplemented { get; } Property Value Type Description SmtpServerReply CommandUnrecognized Gets the command unrecognized reply. Declaration public static SmtpServerReply CommandUnrecognized { get; } Property Value Type Description SmtpServerReply Content Gets the content. Declaration public List<string> Content { get; } Property Value Type Description System.Collections.Generic.List < System.String > EnhancedStatusCode Gets the enhanced status code. Declaration public string EnhancedStatusCode { get; } Property Value Type Description System.String IsPositive Gets a value indicating whether this instance is positive. Declaration public bool IsPositive { get; } Property Value Type Description System.Boolean IsValid Returns true if the response code is between 200 and 599 Declaration public bool IsValid { get; } Property Value Type Description System.Boolean Ok Gets the OK reply. Declaration public static SmtpServerReply Ok { get; } Property Value Type Description SmtpServerReply ProtocolViolation Gets the protocol violation reply. Declaration public static SmtpServerReply ProtocolViolation { get; } Property Value Type Description SmtpServerReply ReplyCode Gets the numeric response code. Declaration public int ReplyCode { get; } Property Value Type Description System.Int32 ReplyCodeCategory Gets the response category. Declaration public SmtpReplyCodeCategories ReplyCodeCategory { get; } Property Value Type Description SmtpReplyCodeCategories ReplyCodeSeverity Gets the response severity. Declaration public SmtpReplyCodeSeverities ReplyCodeSeverity { get; } Property Value Type Description SmtpReplyCodeSeverities SyntaxErrorArguments Gets the syntax error arguments reply. Declaration public static SmtpServerReply SyntaxErrorArguments { get; } Property Value Type Description SmtpServerReply SystemStatusBye Gets the system status bye reply. Declaration public static SmtpServerReply SystemStatusBye { get; } Property Value Type Description SmtpServerReply SystemStatusHelp Gets the system status help reply. Declaration public static SmtpServerReply SystemStatusHelp { get; } Property Value Type Description SmtpServerReply Methods Parse(String) Parses the specified text into a Server Reply for thorough analysis. Declaration public static SmtpServerReply Parse(string text) Parameters Type Name Description System.String text The text. Returns Type Description SmtpServerReply ToString() Returns a System.String that represents this instance. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.Object.ToString()"
  },
  "api/Unosquare.Swan.PropertyDisplayAttribute.html": {
    "href": "api/Unosquare.Swan.PropertyDisplayAttribute.html",
    "title": "Class PropertyDisplayAttribute | Unosquare SWAN",
    "keywords": "Class PropertyDisplayAttribute An attribute used to include additional information to a Property for serialization. Previously we used DisplayAttribute from DataAnnotation Inheritance System.Object System.Attribute PropertyDisplayAttribute Inherited Members System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class PropertyDisplayAttribute : Attribute, _Attribute Properties DefaultValue Gets or sets the default value. Declaration public object DefaultValue { get; set; } Property Value Type Description System.Object Description Gets or sets the description. Declaration public string Description { get; set; } Property Value Type Description System.String GroupName Gets or sets the name of the group. Declaration public string GroupName { get; set; } Property Value Type Description System.String Name Gets or sets the name. Declaration public string Name { get; set; } Property Value Type Description System.String See Also System.Attribute"
  },
  "api/Unosquare.Swan.Reflection.ExtendedPropertyInfo-1.html": {
    "href": "api/Unosquare.Swan.Reflection.ExtendedPropertyInfo-1.html",
    "title": "Class ExtendedPropertyInfo<T> | Unosquare SWAN",
    "keywords": "Class ExtendedPropertyInfo<T> Represents a Property object from a Object Reflection Property with extended values Inheritance System.Object ExtendedPropertyInfo ExtendedPropertyInfo<T> Inherited Members ExtendedPropertyInfo.Property ExtendedPropertyInfo.DataType ExtendedPropertyInfo.Value ExtendedPropertyInfo.DefaultValue ExtendedPropertyInfo.Name ExtendedPropertyInfo.Description ExtendedPropertyInfo.GroupName System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Reflection Assembly : cs.temp.dll.dll Syntax public class ExtendedPropertyInfo<T> : ExtendedPropertyInfo Type Parameters Name Description T Constructors ExtendedPropertyInfo(String) Initializes a new instance of the ExtendedPropertyInfo<T> class. Declaration public ExtendedPropertyInfo(string property) Parameters Type Name Description System.String property The property."
  },
  "api/Unosquare.Swan.Reflection.ExtendedPropertyInfo.html": {
    "href": "api/Unosquare.Swan.Reflection.ExtendedPropertyInfo.html",
    "title": "Class ExtendedPropertyInfo | Unosquare SWAN",
    "keywords": "Class ExtendedPropertyInfo Represents a Property object from a Object Reflection Property with extended values Inheritance System.Object ExtendedPropertyInfo ExtendedPropertyInfo <T> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Reflection Assembly : cs.temp.dll.dll Syntax public class ExtendedPropertyInfo Constructors ExtendedPropertyInfo(PropertyInfo) Initializes a new instance of the ExtendedPropertyInfo<T> class. Declaration public ExtendedPropertyInfo(PropertyInfo propertyInfo) Parameters Type Name Description System.Reflection.PropertyInfo propertyInfo The property information. Properties DataType Gets or sets the type of the data. Declaration public string DataType { get; set; } Property Value Type Description System.String The type of the data. DefaultValue Gets or sets the default value. Declaration public object DefaultValue { get; set; } Property Value Type Description System.Object The default value. Description Gets or sets the description. Declaration public string Description { get; set; } Property Value Type Description System.String The description. GroupName Gets or sets the name of the group. Declaration public string GroupName { get; set; } Property Value Type Description System.String The name of the group. Name Gets or sets the name. Declaration public string Name { get; set; } Property Value Type Description System.String The name. Property Gets or sets the property. Declaration public string Property { get; set; } Property Value Type Description System.String The property. Value Gets or sets the value. Declaration public object Value { get; set; } Property Value Type Description System.Object The value."
  },
  "api/Unosquare.Swan.Reflection.ExtendedTypeInfo-1.html": {
    "href": "api/Unosquare.Swan.Reflection.ExtendedTypeInfo-1.html",
    "title": "Class ExtendedTypeInfo<T> | Unosquare SWAN",
    "keywords": "Class ExtendedTypeInfo<T> Provides extended information about a type This class is mainly used to define sets of types within the Constants class and it is not meant for other than querying the VasicTypesInfo dictionary. Inheritance System.Object ExtendedTypeInfo ExtendedTypeInfo<T> Inherited Members ExtendedTypeInfo.Type ExtendedTypeInfo.IsNullableValueType ExtendedTypeInfo.IsNumeric ExtendedTypeInfo.IsValueType ExtendedTypeInfo.UnderlyingType ExtendedTypeInfo.TryParseMethodInfo ExtendedTypeInfo.ToStringMethodInfo ExtendedTypeInfo.CanParseNatively ExtendedTypeInfo.GetDefault() ExtendedTypeInfo.TryParse(String, Object) ExtendedTypeInfo.ToStringInvariant(Object) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Reflection Assembly : cs.temp.dll.dll Syntax public class ExtendedTypeInfo<T> : ExtendedTypeInfo Type Parameters Name Description T Constructors ExtendedTypeInfo() Initializes a new instance of the ExtendedTypeInfo<T> class. Declaration public ExtendedTypeInfo() Methods ToStringInvariant(T) Converts this instance to its string representation, trying to use the CultureInfo.InvariantCulture IFormat provider if the overload is available Declaration public string ToStringInvariant(T instance) Parameters Type Name Description T instance Returns Type Description System.String TryParse(String, out T) Tries to parse the string into an object of the type this instance represents. Returns false when no suitable TryParse methods exists for the type or when parsing fails for any reason. When possible, this method uses CultureInfo.InvariantCulture and NumberStyles.Any Declaration public bool TryParse(string s, out T result) Parameters Type Name Description System.String s The s. T result The result. Returns Type Description System.Boolean"
  },
  "api/Unosquare.Swan.Reflection.ExtendedTypeInfo.html": {
    "href": "api/Unosquare.Swan.Reflection.ExtendedTypeInfo.html",
    "title": "Class ExtendedTypeInfo | Unosquare SWAN",
    "keywords": "Class ExtendedTypeInfo Provides extended information about a type This class is mainly used to define sets of types within the Constants class and it is not meant for other than querying the VasicTypesInfo dictionary. Inheritance System.Object ExtendedTypeInfo ExtendedTypeInfo<T> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Reflection Assembly : cs.temp.dll.dll Syntax public class ExtendedTypeInfo Constructors ExtendedTypeInfo(Type) Initializes a new instance of the ExtendedTypeInfo class. Declaration public ExtendedTypeInfo(Type t) Parameters Type Name Description System.Type t The t. Properties CanParseNatively Gets a value indicating whether the type contains a suitable TryParse method. Declaration public bool CanParseNatively { get; } Property Value Type Description System.Boolean IsNullableValueType Gets a value indicating whether the type is a nullable value type. Declaration public bool IsNullableValueType { get; } Property Value Type Description System.Boolean IsNumeric Gets a value indicating whether the type or underlying type is numeric. Declaration public bool IsNumeric { get; } Property Value Type Description System.Boolean IsValueType Gets a value indicating whether the type is value type. Nullable value types have this property set to False Declaration public bool IsValueType { get; } Property Value Type Description System.Boolean ToStringMethodInfo Gets the ToString method info It will prefer the overload containing the IFormatProvider argument Declaration public MethodInfo ToStringMethodInfo { get; } Property Value Type Description System.Reflection.MethodInfo TryParseMethodInfo Gets the try parse method information. If the type does not contain a suitable TryParse static method, it will return null. Declaration public MethodInfo TryParseMethodInfo { get; } Property Value Type Description System.Reflection.MethodInfo Type Gets the type this extended info class provides for. Declaration public Type Type { get; } Property Value Type Description System.Type UnderlyingType When dealing with nullable value types, this property will return the underlying value type of the nullable, Otherwise it will return the same type as the Type property Declaration public Type UnderlyingType { get; } Property Value Type Description System.Type Methods GetDefault() Gets the default value of this type. For reference types it return null. For value types it returns the default value. Declaration public object GetDefault() Returns Type Description System.Object ToStringInvariant(Object) Converts this instance to its string representation, trying to use the CultureInfo.InvariantCulture IFormat provider if the overload is available Declaration public string ToStringInvariant(object instance) Parameters Type Name Description System.Object instance The instance. Returns Type Description System.String TryParse(String, out Object) Tries to parse the string into an object of the type this instance represents. Returns false when no suitable TryParse methods exists for the type or when parsing fails for any reason. When possible, this method uses CultureInfo.InvariantCulture and NumberStyles.Any Declaration public bool TryParse(string s, out object result) Parameters Type Name Description System.String s The s. System.Object result The result. Returns Type Description System.Boolean"
  },
  "api/Unosquare.Swan.Reflection.PropertyTypeCache.html": {
    "href": "api/Unosquare.Swan.Reflection.PropertyTypeCache.html",
    "title": "Class PropertyTypeCache | Unosquare SWAN",
    "keywords": "Class PropertyTypeCache A thread-safe cache of properties belonging to a given type The Retrieve method is the most useful one in this class as it calls the retrieval process if the type is not contained in the cache. Inheritance System.Object PropertyTypeCache Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan.Reflection Assembly : cs.temp.dll.dll Syntax public class PropertyTypeCache Properties Item[Type] Gets or sets the System.Collections.Generic.IEnumerable<T> with the specified type. If the properties are not available, it returns null. Declaration public IEnumerable<PropertyInfo> this[Type type] { get; set; } Parameters Type Name Description System.Type type The type. Property Value Type Description System.Collections.Generic.IEnumerable < System.Reflection.PropertyInfo > The System.Collections.Generic.IEnumerable<T> . Methods Contains(Type) Determines whether the cache contains the specified type. Declaration public bool Contains(Type type) Parameters Type Name Description System.Type type The type. Returns Type Description System.Boolean Contains<T>() Determines whether the cache contains the specified type. Declaration public bool Contains<T>() Returns Type Description System.Boolean Type Parameters Name Description T Retrieve(Type, Func<IEnumerable<PropertyInfo>>) Retrieves the properties stored for the specified type. If the properties are not available, it calls the factory method to retrieve them and returns them as an array of PropertyInfo Declaration public PropertyInfo[] Retrieve(Type type, Func<IEnumerable<PropertyInfo>> factory) Parameters Type Name Description System.Type type The type. System.Func < System.Collections.Generic.IEnumerable < System.Reflection.PropertyInfo >> factory The factory. Returns Type Description System.Reflection.PropertyInfo [] Retrieve<T>(Func<IEnumerable<PropertyInfo>>) Retrieves the properties stored for the specified type. If the properties are not available, it calls the factory method to retrieve them and returns them as an array of PropertyInfo Declaration public PropertyInfo[] Retrieve<T>(Func<IEnumerable<PropertyInfo>> factory) Parameters Type Name Description System.Func < System.Collections.Generic.IEnumerable < System.Reflection.PropertyInfo >> factory The factory. Returns Type Description System.Reflection.PropertyInfo [] Type Parameters Name Description T"
  },
  "api/Unosquare.Swan.Reflection.html": {
    "href": "api/Unosquare.Swan.Reflection.html",
    "title": "Namespace Unosquare.Swan.Reflection | Unosquare SWAN",
    "keywords": "Namespace Unosquare.Swan.Reflection Classes ExtendedPropertyInfo Represents a Property object from a Object Reflection Property with extended values ExtendedPropertyInfo<T> Represents a Property object from a Object Reflection Property with extended values ExtendedTypeInfo Provides extended information about a type This class is mainly used to define sets of types within the Constants class and it is not meant for other than querying the VasicTypesInfo dictionary. ExtendedTypeInfo<T> Provides extended information about a type This class is mainly used to define sets of types within the Constants class and it is not meant for other than querying the VasicTypesInfo dictionary. PropertyTypeCache A thread-safe cache of properties belonging to a given type The Retrieve method is the most useful one in this class as it calls the retrieval process if the type is not contained in the cache."
  },
  "api/Unosquare.Swan.Runtime.html": {
    "href": "api/Unosquare.Swan.Runtime.html",
    "title": "Class Runtime | Unosquare SWAN",
    "keywords": "Class Runtime Provides utility methods to retrieve information about the current application Inheritance System.Object Runtime Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public static class Runtime Properties ArgumentParser Gets the singleton instance created with basic defaults. Declaration public static ArgumentParser ArgumentParser { get; } Property Value Type Description ArgumentParser CompanyName Gets the name of the company. Declaration public static string CompanyName { get; } Property Value Type Description System.String Container Provides a simple IoC Container based on TinyIoC Declaration public static DependencyContainer Container { get; } Property Value Type Description DependencyContainer EntryAssembly Gets the assembly that started the application. Declaration public static Assembly EntryAssembly { get; } Property Value Type Description System.Reflection.Assembly EntryAssemblyDirectory Gets the full path to the folder containing the assembly that started the application. Declaration public static string EntryAssemblyDirectory { get; } Property Value Type Description System.String EntryAssemblyName Gets the name of the entry assembly. Declaration public static AssemblyName EntryAssemblyName { get; } Property Value Type Description System.Reflection.AssemblyName EntryAssemblyVersion Gets the entry assembly version. Declaration public static Version EntryAssemblyVersion { get; } Property Value Type Description System.Version IsTheOnlyInstance Checks if this application (including version number) is the only instance currently running. Declaration public static bool IsTheOnlyInstance { get; } Property Value Type Description System.Boolean IsUsingMonoRuntime Gets a value indicating whether this application instance is using the Mono runtime. Declaration public static bool IsUsingMonoRuntime { get; } Property Value Type Description System.Boolean LocalStoragePath Gets a local storage path with a version Declaration public static string LocalStoragePath { get; } Property Value Type Description System.String Messages Provides a Message Hub with the Publish/Subscribe pattern The implementation is based on TinyIoC Messenger Declaration public static MessageHub Messages { get; } Property Value Type Description MessageHub ObjectMapper Gets the object mapper instance created with basic defaults. Declaration public static ObjectMapper ObjectMapper { get; } Property Value Type Description ObjectMapper OS Gets the current Operating System. Declaration public static OperatingSystem OS { get; } Property Value Type Description OperatingSystem Process Gets the process associated with the current application. Declaration public static Process Process { get; } Property Value Type Description Process ProductName Gets the name of the product. Declaration public static string ProductName { get; } Property Value Type Description System.String ProductTrademark Gets the trademark. Declaration public static string ProductTrademark { get; } Property Value Type Description System.String Methods GetAssemblies() Gets all the loaded assemblies in the current application domain. Declaration public static Assembly[] GetAssemblies() Returns Type Description System.Reflection.Assembly [] WriteWelcomeBanner(ConsoleColor) Writes a standard banner to the standard output containing the company name, product name, assembly version and trademark. Declaration public static void WriteWelcomeBanner(ConsoleColor color = ConsoleColor.Gray) Parameters Type Name Description System.ConsoleColor color The color."
  },
  "api/Unosquare.Swan.SmtpStatusCode.html": {
    "href": "api/Unosquare.Swan.SmtpStatusCode.html",
    "title": "Enum SmtpStatusCode | Unosquare SWAN",
    "keywords": "Enum SmtpStatusCode Defines the different SMTP status codes Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public enum SmtpStatusCode Fields Name Description BadCommandSequence CannotVerifyUserWillAttemptDelivery ClientNotPermitted CommandNotImplemented CommandParameterNotImplemented CommandUnrecognized ExceededStorageAllocation GeneralFailure HelpMessage InsufficientStorage LocalErrorInProcessing MailboxBusy MailboxNameNotAllowed MailboxUnavailable MustIssueStartTlsFirst Ok ServiceClosingTransmissionChannel ServiceNotAvailable ServiceReady StartMailInput SyntaxError SystemStatus TransactionFailed UserNotLocalTryAlternatePath UserNotLocalWillForward"
  },
  "api/Unosquare.Swan.StructEndiannessAttribute.html": {
    "href": "api/Unosquare.Swan.StructEndiannessAttribute.html",
    "title": "Class StructEndiannessAttribute | Unosquare SWAN",
    "keywords": "Class StructEndiannessAttribute An attribute used to help conversion structs back and forth into arrays of bytes via extension methods included in this library ToStruct and ToBytes. Inheritance System.Object System.Attribute StructEndiannessAttribute Inherited Members System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Struct | AttributeTargets.Field)] public class StructEndiannessAttribute : Attribute, _Attribute Constructors StructEndiannessAttribute(Endianness) Initializes a new instance of the StructEndiannessAttribute class. Declaration public StructEndiannessAttribute(Endianness endianness) Parameters Type Name Description Endianness endianness The endianness. Properties Endianness Gets the endianness. Declaration public Endianness Endianness { get; } Property Value Type Description Endianness See Also System.Attribute"
  },
  "api/Unosquare.Swan.Terminal.Settings.html": {
    "href": "api/Unosquare.Swan.Terminal.Settings.html",
    "title": "Class Terminal.Settings | Unosquare SWAN",
    "keywords": "Class Terminal.Settings Terminal global settings Inheritance System.Object Terminal.Settings Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public static class Settings Properties DebugColor Gets or sets the color of the debug output logging. Declaration public static ConsoleColor DebugColor { get; set; } Property Value Type Description System.ConsoleColor The color of the debug. DebugPrefix Gets or sets the debug logging prefix. Declaration public static string DebugPrefix { get; set; } Property Value Type Description System.String The debug prefix. DefaultColor Gets or sets the default output color. Declaration public static ConsoleColor DefaultColor { get; set; } Property Value Type Description System.ConsoleColor The default color. DisplayLoggingMessageType Gets or sets the logging message types (in a bitwise mask) to display in the console. Declaration public static LogMessageType DisplayLoggingMessageType { get; set; } Property Value Type Description LogMessageType The console options. ErrorColor Gets or sets the color of the error logging. Declaration public static ConsoleColor ErrorColor { get; set; } Property Value Type Description System.ConsoleColor The color of the error. ErrorPrefix Gets or sets the error logging prefix. Declaration public static string ErrorPrefix { get; set; } Property Value Type Description System.String The error prefix. InfoColor Gets or sets the color of the information output logging. Declaration public static ConsoleColor InfoColor { get; set; } Property Value Type Description System.ConsoleColor The color of the information. InfoPrefix Gets or sets the information logging prefix. Declaration public static string InfoPrefix { get; set; } Property Value Type Description System.String The information prefix. LoggingTimeFormat Gets or sets the logging time format. set to null or empty to prevent output Declaration public static string LoggingTimeFormat { get; set; } Property Value Type Description System.String The logging time format. TraceColor Gets or sets the color of the trace output logging. Declaration public static ConsoleColor TraceColor { get; set; } Property Value Type Description System.ConsoleColor The color of the trace. TracePrefix Gets or sets the trace logging prefix. Declaration public static string TracePrefix { get; set; } Property Value Type Description System.String The trace prefix. UserInputPrefix Gets or sets the user input prefix. Declaration public static string UserInputPrefix { get; set; } Property Value Type Description System.String The user input prefix. UserOptionText Gets or sets the user option text. Declaration public static string UserOptionText { get; set; } Property Value Type Description System.String The user option text. WarnColor Gets or sets the color of the warning logging. Declaration public static ConsoleColor WarnColor { get; set; } Property Value Type Description System.ConsoleColor The color of the warn. WarnPrefix Gets or sets the warning logging prefix. Declaration public static string WarnPrefix { get; set; } Property Value Type Description System.String The warn prefix."
  },
  "api/Unosquare.Swan.Terminal.html": {
    "href": "api/Unosquare.Swan.Terminal.html",
    "title": "Class Terminal | Unosquare SWAN",
    "keywords": "Class Terminal A console terminal helper to create nicer output and receive input from the user This class is thread-safe :) Inheritance System.Object Terminal Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax public static class Terminal Properties AvailableWriters Gets the available output writers in a bitwise mask. Declaration public static TerminalWriters AvailableWriters { get; } Property Value Type Description TerminalWriters CursorLeft Gets or sets the cursor left position. Declaration public static int CursorLeft { get; set; } Property Value Type Description System.Int32 The cursor left. CursorTop Gets or sets the cursor top position. Declaration public static int CursorTop { get; set; } Property Value Type Description System.Int32 The cursor top. IsConsolePresent Gets a value indicating whether the Console is present Declaration public static bool IsConsolePresent { get; } Property Value Type Description System.Boolean true if this instance is console present; otherwise, false . IsDebuggerAttached Gets a value indicating whether a debugger is attached. Declaration public static bool IsDebuggerAttached { get; } Property Value Type Description System.Boolean OutputEncoding Gets or sets the output encoding for the current console. Declaration public static Encoding OutputEncoding { get; set; } Property Value Type Description System.Text.Encoding The output encoding. Methods BacklineCursor() Moves the output cursor one line up starting at left position 0 Please note that backlining the cursor does not clear the contents of the previous line so you might need to clear it by writing an empty string the length of the console width Declaration public static void BacklineCursor() Debug(Exception, String, String, String, String, Int32) Logs a debug message to the console Declaration public static void Debug(this Exception extendedData, string source, string message, string callerMemberName = \"\", string callerFilePath = \"\", int callerLineNumber = 0) Parameters Type Name Description System.Exception extendedData The exception. System.String source The source. System.String message The message. System.String callerMemberName Name of the caller member. This is automatically populated. System.String callerFilePath The caller file path. This is automatically populated. System.Int32 callerLineNumber The caller line number. This is automatically populated. Debug(String, String, Object, String, String, Int32) Logs a debug message to the console Declaration public static void Debug(this string message, string source = null, object extendedData = null, string callerMemberName = \"\", string callerFilePath = \"\", int callerLineNumber = 0) Parameters Type Name Description System.String message The message. System.String source The source. System.Object extendedData The extended data. System.String callerMemberName Name of the caller member. This is automatically populated. System.String callerFilePath The caller file path. This is automatically populated. System.Int32 callerLineNumber The caller line number. This is automatically populated. Debug(String, Type, Object, String, String, Int32) Logs a debug message to the console Declaration public static void Debug(this string message, Type source, object extendedData = null, string callerMemberName = \"\", string callerFilePath = \"\", int callerLineNumber = 0) Parameters Type Name Description System.String message The message. System.Type source The source. System.Object extendedData The extended data. System.String callerMemberName Name of the caller member. System.String callerFilePath The caller file path. System.Int32 callerLineNumber The caller line number. Dump(Object, String, String, String, String, Int32) Logs a trace message showing all possible non-null properties of the given object This method is expensive as it uses Stringify internally Declaration public static void Dump(this object obj, string source, string text = \"Object Dump\", string callerMemberName = \"\", string callerFilePath = \"\", int callerLineNumber = 0) Parameters Type Name Description System.Object obj The object. System.String source The source. System.String text The title. System.String callerMemberName Name of the caller member. This is automatically populated. System.String callerFilePath The caller file path. This is automatically populated. System.Int32 callerLineNumber The caller line number. This is automatically populated. Dump(Object, Type, String, String, String, Int32) Logs a trace message showing all possible non-null properties of the given object This method is expensive as it uses Stringify internally Declaration public static void Dump(this object obj, Type source, string text = \"Object Dump\", string callerMemberName = \"\", string callerFilePath = \"\", int callerLineNumber = 0) Parameters Type Name Description System.Object obj The object. System.Type source The source. System.String text The text. System.String callerMemberName Name of the caller member. System.String callerFilePath The caller file path. System.Int32 callerLineNumber The caller line number. Error(Exception, String, String, String, String, Int32) Logs an error message to the console's standard error Declaration public static void Error(this Exception ex, string source, string message, string callerMemberName = \"\", string callerFilePath = \"\", int callerLineNumber = 0) Parameters Type Name Description System.Exception ex The exception. System.String source The source. System.String message The message. System.String callerMemberName Name of the caller member. This is automatically populated. System.String callerFilePath The caller file path. This is automatically populated. System.Int32 callerLineNumber The caller line number. This is automatically populated. Error(String, String, Object, String, String, Int32) Logs an error message to the console's standard error Declaration public static void Error(this string message, string source = null, object extendedData = null, string callerMemberName = \"\", string callerFilePath = \"\", int callerLineNumber = 0) Parameters Type Name Description System.String message The text. System.String source The source. System.Object extendedData The extended data. System.String callerMemberName Name of the caller member. This is automatically populated. System.String callerFilePath The caller file path. This is automatically populated. System.Int32 callerLineNumber The caller line number. This is automatically populated. Error(String, Type, Object, String, String, Int32) Logs an error message to the console's standard error Declaration public static void Error(this string message, Type source, object extendedData = null, string callerMemberName = \"\", string callerFilePath = \"\", int callerLineNumber = 0) Parameters Type Name Description System.String message The message. System.Type source The source. System.Object extendedData The extended data. System.String callerMemberName Name of the caller member. System.String callerFilePath The caller file path. System.Int32 callerLineNumber The caller line number. Flush(Nullable<TimeSpan>) Waits for all of the queued output messages to be written out to the console. Call this method if it is important to display console text before quitting the application such as showing usage or help. Set the timeout to null or TimeSpan.Zero to wait indefinitely. Declaration public static void Flush(TimeSpan? timeout = null) Parameters Type Name Description System.Nullable < System.TimeSpan > timeout The timeout. Set the amount of time to black before this method exits. Info(Exception, String, String, String, String, Int32) Logs an info message to the console Declaration public static void Info(this Exception extendedData, string source, string message, string callerMemberName = \"\", string callerFilePath = \"\", int callerLineNumber = 0) Parameters Type Name Description System.Exception extendedData The extended data. System.String source The source. System.String message The message. System.String callerMemberName Name of the caller member. This is automatically populated. System.String callerFilePath The caller file path. This is automatically populated. System.Int32 callerLineNumber The caller line number. This is automatically populated. Info(String, String, Object, String, String, Int32) Logs an info message to the console Declaration public static void Info(this string message, string source = null, object extendedData = null, string callerMemberName = \"\", string callerFilePath = \"\", int callerLineNumber = 0) Parameters Type Name Description System.String message The text. System.String source The source. System.Object extendedData The extended data. System.String callerMemberName Name of the caller member. This is automatically populated. System.String callerFilePath The caller file path. This is automatically populated. System.Int32 callerLineNumber The caller line number. This is automatically populated. Info(String, Type, Object, String, String, Int32) Logs an info message to the console Declaration public static void Info(this string message, Type source, object extendedData = null, string callerMemberName = \"\", string callerFilePath = \"\", int callerLineNumber = 0) Parameters Type Name Description System.String message The message. System.Type source The source. System.Object extendedData The extended data. System.String callerMemberName Name of the caller member. System.String callerFilePath The caller file path. System.Int32 callerLineNumber The caller line number. Log(Exception, String, String, String, String, Int32) Logs an error message to the console's standard error Declaration public static void Log(this Exception ex, string source = null, string message = null, string callerMemberName = \"\", string callerFilePath = \"\", int callerLineNumber = 0) Parameters Type Name Description System.Exception ex The ex. System.String source The source. System.String message The message. System.String callerMemberName Name of the caller member. This is automatically populated. System.String callerFilePath The caller file path. This is automatically populated. System.Int32 callerLineNumber The caller line number. This is automatically populated. Log(Exception, Type, String, String, String, Int32) Logs an error message to the console's standard error Declaration public static void Log(this Exception ex, Type source = null, string message = null, string callerMemberName = \"\", string callerFilePath = \"\", int callerLineNumber = 0) Parameters Type Name Description System.Exception ex The ex. System.Type source The source. System.String message The message. System.String callerMemberName Name of the caller member. This is automatically populated. System.String callerFilePath The caller file path. This is automatically populated. System.Int32 callerLineNumber The caller line number. This is automatically populated. Log(String, String, LogMessageType, Object, String, String, Int32) Logs the specified message. Declaration public static void Log(this string message, string source, LogMessageType messageType, object extendedData = null, string callerMemberName = \"\", string callerFilePath = \"\", int callerLineNumber = 0) Parameters Type Name Description System.String message The message. System.String source The source. LogMessageType messageType Type of the message. System.Object extendedData The extended data. System.String callerMemberName Name of the caller member. This is automatically populated. System.String callerFilePath The caller file path. This is automatically populated. System.Int32 callerLineNumber The caller line number. This is automatically populated. Log(String, Type, LogMessageType, Object, String, String, Int32) Logs the specified message. Declaration public static void Log(this string message, Type source, LogMessageType messageType, object extendedData = null, string callerMemberName = \"\", string callerFilePath = \"\", int callerLineNumber = 0) Parameters Type Name Description System.String message The message. System.Type source The source. LogMessageType messageType Type of the message. System.Object extendedData The extended data. System.String callerMemberName Name of the caller member. System.String callerFilePath The caller file path. System.Int32 callerLineNumber The caller line number. OverwriteLine(String, Nullable<ConsoleColor>, TerminalWriters) As opposed to WriteLine methods, it prepends a Carriage Return character to the text so that the console moves the cursor one position up after the text has been written out. Declaration public static void OverwriteLine(this string text, ConsoleColor? color = null, TerminalWriters writerFlags = TerminalWriters.StandardOutput) Parameters Type Name Description System.String text The text. System.Nullable < System.ConsoleColor > color The color. TerminalWriters writerFlags The writer flags. PrintCurrentCodePage() Prints all characters in the current code page. This is provided for debugging purposes only. Declaration public static void PrintCurrentCodePage() ReadKey(Boolean, Boolean) Reads a key from the Terminal. This is the closest equivalent to Console.ReadKey Declaration public static ConsoleKeyInfo ReadKey(bool intercept, bool disableLocking = false) Parameters Type Name Description System.Boolean intercept if set to true the pressed key will not be rendered to the output. System.Boolean disableLocking if set to true the output will continue to be shown. This is useful for services and daemons that are running as console applications and wait for a key to exit the program. Returns Type Description System.ConsoleKeyInfo ReadKey(String) Reads a key from the terminal preventing the key from being echoed. Declaration public static ConsoleKeyInfo ReadKey(this string prompt) Parameters Type Name Description System.String prompt The prompt. Returns Type Description System.ConsoleKeyInfo ReadKey(String, Boolean) Reads a key from the Terminal Declaration public static ConsoleKeyInfo ReadKey(this string prompt, bool preventEcho) Parameters Type Name Description System.String prompt The prompt. System.Boolean preventEcho if set to true [prevent echo]. Returns Type Description System.ConsoleKeyInfo ReadLine() Reads a line of text from the console Declaration public static string ReadLine() Returns Type Description System.String ReadNumber(String, Int32) Reads a number from the input. If unable to parse, it returns the default number Declaration public static int ReadNumber(this string prompt, int defaultNumber) Parameters Type Name Description System.String prompt The prompt. System.Int32 defaultNumber The default number. Returns Type Description System.Int32 ReadPrompt(String, Dictionary<ConsoleKey, String>, String) Creates a table prompt where the user can enter an option based on the options dictionary provided Declaration public static ConsoleKeyInfo ReadPrompt(this string title, Dictionary<ConsoleKey, string> options, string anyKeyOption) Parameters Type Name Description System.String title The title. System.Collections.Generic.Dictionary < System.ConsoleKey , System.String > options The options. System.String anyKeyOption Any key option. Returns Type Description System.ConsoleKeyInfo SetCursorPosition(Int32, Int32) Sets the cursor position. Declaration public static void SetCursorPosition(int left, int top) Parameters Type Name Description System.Int32 left The left. System.Int32 top The top. Trace(Exception, String, String, String, String, Int32) Logs a trace message to the console Declaration public static void Trace(this Exception extendedData, string source, string message, string callerMemberName = \"\", string callerFilePath = \"\", int callerLineNumber = 0) Parameters Type Name Description System.Exception extendedData The extended data. System.String source The source. System.String message The message. System.String callerMemberName Name of the caller member. This is automatically populated. System.String callerFilePath The caller file path. This is automatically populated. System.Int32 callerLineNumber The caller line number. This is automatically populated. Trace(String, String, Object, String, String, Int32) Logs a trace message to the console Declaration public static void Trace(this string message, string source = null, object extendedData = null, string callerMemberName = \"\", string callerFilePath = \"\", int callerLineNumber = 0) Parameters Type Name Description System.String message The text. System.String source The source. System.Object extendedData The extended data. System.String callerMemberName Name of the caller member. This is automatically populated. System.String callerFilePath The caller file path. This is automatically populated. System.Int32 callerLineNumber The caller line number. This is automatically populated. Trace(String, Type, Object, String, String, Int32) Logs a trace message to the console Declaration public static void Trace(this string message, Type source, object extendedData = null, string callerMemberName = \"\", string callerFilePath = \"\", int callerLineNumber = 0) Parameters Type Name Description System.String message The message. System.Type source The source. System.Object extendedData The extended data. System.String callerMemberName Name of the caller member. System.String callerFilePath The caller file path. System.Int32 callerLineNumber The caller line number. Warn(Exception, String, String, String, String, Int32) Logs a warning message to the console Declaration public static void Warn(this Exception extendedData, string source, string message, string callerMemberName = \"\", string callerFilePath = \"\", int callerLineNumber = 0) Parameters Type Name Description System.Exception extendedData The extended data. System.String source The source. System.String message The message. System.String callerMemberName Name of the caller member. This is automatically populated. System.String callerFilePath The caller file path. This is automatically populated. System.Int32 callerLineNumber The caller line number. This is automatically populated. Warn(String, String, Object, String, String, Int32) Logs a warning message to the console Declaration public static void Warn(this string message, string source = null, object extendedData = null, string callerMemberName = \"\", string callerFilePath = \"\", int callerLineNumber = 0) Parameters Type Name Description System.String message The text. System.String source The source. System.Object extendedData The extended data. System.String callerMemberName Name of the caller member. This is automatically populated. System.String callerFilePath The caller file path. This is automatically populated. System.Int32 callerLineNumber The caller line number. This is automatically populated. Warn(String, Type, Object, String, String, Int32) Logs a warning message to the console Declaration public static void Warn(this string message, Type source, object extendedData = null, string callerMemberName = \"\", string callerFilePath = \"\", int callerLineNumber = 0) Parameters Type Name Description System.String message The message. System.Type source The source. System.Object extendedData The extended data. System.String callerMemberName Name of the caller member. System.String callerFilePath The caller file path. System.Int32 callerLineNumber The caller line number. Write(Byte, Nullable<ConsoleColor>, Int32, Boolean, TerminalWriters) Writes a character a number of times, optionally adding a new line at the end Declaration public static void Write(this byte charCode, ConsoleColor? color = null, int count = 1, bool newLine = false, TerminalWriters writerFlags = TerminalWriters.StandardOutput) Parameters Type Name Description System.Byte charCode The character code. System.Nullable < System.ConsoleColor > color The color. System.Int32 count The count. System.Boolean newLine if set to true [new line]. TerminalWriters writerFlags The writer flags. Write(Char, Nullable<ConsoleColor>, TerminalWriters) Writes the specified character in the default color. Declaration public static void Write(this char charCode, ConsoleColor? color = null, TerminalWriters writerFlags = TerminalWriters.StandardOutput) Parameters Type Name Description System.Char charCode The character code. System.Nullable < System.ConsoleColor > color The color. TerminalWriters writerFlags The writer flags. Write(String, Nullable<ConsoleColor>, TerminalWriters) Writes the specified text in the given color Declaration public static void Write(this string text, ConsoleColor? color = null, TerminalWriters writerFlags = TerminalWriters.StandardOutput) Parameters Type Name Description System.String text The text. System.Nullable < System.ConsoleColor > color The color. TerminalWriters writerFlags The writer flags. WriteLine(String, Nullable<ConsoleColor>, TerminalWriters) Writes a line of text in the current console foreground color to the standard output Declaration public static void WriteLine(this string text, ConsoleColor? color = null, TerminalWriters writerFlags = TerminalWriters.StandardOutput) Parameters Type Name Description System.String text The text. System.Nullable < System.ConsoleColor > color The color. TerminalWriters writerFlags The writer flags. WriteLine(TerminalWriters) Writes a New Line Sequence to the standard output Declaration public static void WriteLine(TerminalWriters writerFlags = TerminalWriters.StandardOutput) Parameters Type Name Description TerminalWriters writerFlags The writer flags. Events OnLogMessageDisplaying Occurs synchronously (so handle quickly), whenever a logging message is about to be enqueued to the console output. Setting the CancelOutput to true in the event arguments prevents the logging message to be written out to the console. Message filtering only works with logging methods such as Trace, Debug, Info, Warn, Error and Dump Standard Write methods do not get filtering capabilities. Declaration public static event EventHandler<LogMessageDisplayingEventArgs> OnLogMessageDisplaying Event Type Type Description System.EventHandler < LogMessageDisplayingEventArgs > OnLogMessageReceived Occurs asynchronously, whenever a logging message is received by the terminal. Only called when Terminal writes data via Info, Error, Trace, Warn, Debug methods, regardless of whether or not the console is present. Subscribe to this event to pass data on to your own logger. Declaration public static event EventHandler<LogMessageReceivedEventArgs> OnLogMessageReceived Event Type Type Description System.EventHandler < LogMessageReceivedEventArgs >"
  },
  "api/Unosquare.Swan.TerminalWriters.html": {
    "href": "api/Unosquare.Swan.TerminalWriters.html",
    "title": "Enum TerminalWriters | Unosquare SWAN",
    "keywords": "Enum TerminalWriters Defines a set of bitwise standard terminal writers Namespace : Unosquare.Swan Assembly : cs.temp.dll.dll Syntax [Flags] public enum TerminalWriters Fields Name Description All Writes to all possible terminal writers Diagnostics Writes to the System.Diagnostics.Debug ErrorAndDebug The error and debug writers None Prevents output OutputAndDebug The output and debug writers StandardError Writes to the Console.Error StandardOutput Writes to the Console.Out"
  },
  "api/Unosquare.Swan.html": {
    "href": "api/Unosquare.Swan.html",
    "title": "Namespace Unosquare.Swan | Unosquare SWAN",
    "keywords": "Namespace Unosquare.Swan Classes AppWorkerStateChangedEventArgs Represents event arguments whenever the state of an application service changes ArgumentOptionAttribute Models an option specification. Based on CommandLine (Copyright 2005-2015 Giacomo Stelluti Scala and Contributors.) ConnectionAcceptedEventArgs The event arguments for when connections are accepted ConnectionAcceptingEventArgs Occurs before a connection is accepted. Set the Cancel property to true to prevent the connection from being accepted. ConnectionDataReceivedEventArgs Event arguments for when data is received. ConnectionFailureEventArgs The event arguments for connection failure events ConnectionListenerFailedEventArgs Event arguments for when a server listener fails to start ConnectionListenerStartedEventArgs Event arguments for when a server listener is started ConnectionListenerStoppedEventArgs Event arguments for when a server listener stopped Definitions Contains useful constants and definitions Definitions.SmtpAuthMethods Lists the AUTH methods supported by default. DependencyContainerAutoRegistrationException Auto-registration Exception DependencyContainerConstructorResolutionException Constructor Resolution Exception DependencyContainerRegistrationException Generic Constraint Registration Exception DependencyContainerRegistrationTypeException Registration Type Exception DependencyContainerResolutionException An exception for dependency resolutions DependencyContainerWeakReferenceException Weak Reference Exception DnsQueryException An exception thrown when the DNS query fails. Extensions Provides various extension methods JsonPropertyAttribute An attribute used to help setup a property behavior when serialize/deserialize JSON. LogMessageDisplayingEventArgs Event arguments representing a message logged and about to be displayed on the terminal (console). Set the CancelOutput property in the event handler to prevent the terminal from displaying the message. LogMessageReceivedEventArgs Event arguments representing the message that is logged on to the terminal. Use the properties to forward the data to your logger of choice. MessageHubSubscriptionException Thrown when an exceptions occurs while subscribing to a message type Network Provides miscellaneous network utilities such as a Public IP finder, a DNS client to query DNS records of any kind, and an NTP client. PropertyDisplayAttribute An attribute used to include additional information to a Property for serialization. Previously we used DisplayAttribute from DataAnnotation Runtime Provides utility methods to retrieve information about the current application SmtpException Defines an SMTP Exceptions class StructEndiannessAttribute An attribute used to help conversion structs back and forth into arrays of bytes via extension methods included in this library ToStruct and ToBytes. Terminal A console terminal helper to create nicer output and receive input from the user This class is thread-safe :) Terminal.Settings Terminal global settings Enums AppWorkerState Enumerates the different Application Worker States ConnectionDataReceivedTrigger Enumerates the possible causes of the DataReceived event occurring. DnsOperationCode Enumerates the different DNS operation codes DnsRecordClass Enumerates the different DNS record classes DnsRecordType Enumerates the different DNS record types DnsResponseCode Enumerates the different DNS query response codes Endianness Defines Endianness, big or little LogMessageType Defines the bitwise flags to determine which types of messages get printed on the current console OperatingSystem Enumeration of Operating Systems SmtpCommandNames Enumerates all of the well-known SMTP command names. SmtpReplyCodeCategories Enumerates the reply code categories SmtpReplyCodeSeverities Enumerates the reply code severities SmtpStatusCode Defines the different SMTP status codes TerminalWriters Defines a set of bitwise standard terminal writers"
  }
}